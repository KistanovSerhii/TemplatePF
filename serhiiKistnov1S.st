{1,
{10,
{"serhii.Kistanov",1,0,"",""},
{6,
{"БСП",1,0,"",""},
{0,
{"ВнедрениеБСП",0,0,"ВнедрениеБСП_Кистанов","#Область ИнструкцияВнедренияБСП
// ///////////////////////////////////////////////////////////////////////////////////////////////////////
//// ВНЕДРЕНИЕ   Библиотеки стандартных подсистем
// ///////////////////////////////////////////////////////////////////////////////////////////////////////
//  1. Установить шаблон БСП
//  2. (Можно пропустить! для дальнейшего копирования модулей и т.д.) Установить БСП из шаблона
//  3. Создать пустую конфигурацию (сюда мы перенесем фундамент в виде БСП) /
//     (ЕСЛИ внедряем в существующую базу - Установить пустой пароль пользователю Администратор)
//  4. Запустить пустую (созданную на шаге 3) конфигурацию
//  5. Открыть обработку ""ПервоеВнедрениеБСП.epf"" в пользовательском режиме
//     (обработка находится в каталоке ""ExtFiles"" шаблона БСП)
//  6. Выбрать необходимый для внедрения перечень модулей (фундамент будущей конфигурации)
//  7. Выполнить команду ""Сохранить настройки для конфигуратора"" (файл xml - это правила объединения)
//  8. В режиме конфигуратора (пустой базы) выполняем команду 
//     ""Конфигурация > Сравнить, объединить с конфигурацией из файла""
//  9. Указываем ""1Cv8.cf"" файл конфигурации БСП который находится в папке шаблона БСП
// 10. В окне сравнения переходим в меню ""Действия"" и выбираем команду ""Загрузить настройки из файла""
//     и выбираем файл созданный и сохраненный на диск шагом 7
// 11. На вопрос ""Выполнить полную загрузку"" отвечаем ""НЕТ"" (это окно появляется если конфигурация пустая),
//     На вопрос ""Поставить на поддержку"" отвечаем ""ДА""
// 12. Нажимаем ""Выполнить"" (ждем выполнения операции ""сравнить, объединить"")
// 13. Появится окно ""Неразрешенные ссылки"" в котором нажимаем ""Продолжить""
//     , после чего откроется окно ""Настройка правил поддержки"" где нажимаем ""ок"".
// 14. Дожидаемся объединения (может длится более часа если выбранно очень много обк для внедрения)
// 15. Устанавливаем имя создаваемой конфигурации (имя, синоним, комментарий, поставщик) и версию 1.0.1.1
//     А также свойств конфигурации должны быть следующими:
//       Основной режим запуска должен быть установлен в Управляемое приложение.
//       В список Назначения использования должно входить значение Персональный компьютер.
//       Вариант встроенного языка должен быть установлен в Русский.
//       Режим управления блокировкой данных должен быть установлен в Управляемый.
//       Режим совместимости - допустимые значения см. в сопроводительном файле UpdateSSL.html
//       Режим использования модальности может быть установлен в Не использовать.
//       Режим совместимости интерфейса может принимать значения Версия 8.2, Версия 8.2. Разрешить Такси или Такси. Разрешить Версия 8.2.
//       Режим использования синхронных вызовов расширений и внешних компонент должен быть установлен в значение Использовать.
// 16. Копируем общий модуль ""ОбновлениеИнформационнойБазыБСП""
// 17. Переименовываем скопированный модуль (меняем БСП на сокр. наименование разрабатываемой конфигурации)
// ///////////////////////////////////////////////////////////////////////////////////////////////////////
// 18. Открываем данный общий модуль и удаляем све его содержимое заменив на:
//  
// ///////////////////////////////////////////////////////////////////////////////////////////////////////
//// Из инструкции БСП (https://its.1c.ru/db/bsp316doc#content:3:1:issogl2_действия_после_сравнения_объединения)
//// Действия после сравнения, объединения
////   1. Установить в свойствах конфигурации имя конфигурации, например, МояКонфигурация.
////   2. Установить в свойствах конфигурации номер версии разрабатываемой конфигурации. Например, 
////      при начале разработки конфигурации можно установить 1.0.1.1 в качестве номера версии.
////   3. Скопировать общий модуль ОбновлениеИнформационнойБазыБСП.
////   4. Заменить в названии скопированного модуля на имя или сокращение имени конфигурации 
////      (например, ОбновлениеИнформационнойБазыМК).
////   5. Заменить текст модуля на:
/////////////////////////////////////////////////////////////////////////////////////////////////////////

//#Область ПрограммныйИнтерфейс

//Процедура ПриДобавленииПодсистемы(Описание) Экспорт
//    Описание.Имя = ""УправлениеПользователямиУчетныхСистем"";
//    Описание.Версия = ""1.0.1.1"";
//    
//    // Требуется библиотека стандартных подсистем.
//    Описание.ТребуемыеПодсистемы.Добавить(""СтандартныеПодсистемы"");
//КонецПроцедуры
//Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
//    
//КонецПроцедуры
//Процедура ПередОбновлениемИнформационнойБазы() Экспорт
//    
//КонецПроцедуры
//Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
//        Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
//    
//КонецПроцедуры
//Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
//    
//КонецПроцедуры
//Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
//    
//КонецПроцедуры
//Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
//    
//КонецПроцедуры 
//Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
//    
//КонецПроцедуры
//
//#КонецОбласти
//
//    В процедуре ""ПриДобавленииПодсистемы"" данного модуля необходимо указать
//    имя и версию (в точности как указанно в свойствах конфигурации), пример:
//      Описание.Имя = ""УправлениеПользователямиУчетныхСистем"";
//      Описание.Версия = ""1.0.1.1"";
// ///////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 19. Разрешаем редактировать модуль ""ПодсистемыКонфигурацииПереопределяемый"" 
//     с сохранением поддержки (""Конфигурация > Поддержка > Настройка поддержки"")
// 20. В процедуре ""ПриДобавленииПодсистем"" модуля ""ПодсистемыКонфигурацииПереопределяемый""
//     добавить скопированный общий модуль в передаваемый массив, пример:
//     ""МодулиПодсистем.Добавить(""ОбновлениеИнформационнойБазыУПУС"");""
//
// 21. Выполняем команду ""Обновить конфигурацию базы данных (F7)"" (жмем бочку)
// 22. Если внедрение проходит не в пустой конфигурации 
//     ТОГД необходимо выдать пользователю ""Администратор"" все Роли БСП
// 23. Запускаем конфигурацию (F5)
// 24. Должо пройти корректно обновление (иначе мы сделали что-то не так на пред. шагах)
// 25. Закрываем КОНФИГУРАТОР
// 26. В интерактивном режиме (режим пользователя) открываем обработку ""ПервоеВнедрениеБСП.epf""
//     (это та же обработка что и на шаге 5) и выполнить команду ""Удалить"" (пункт 3 в данной обработке)
//	   Автоматически будет запущен конфигуратор и произведено удаление лишних объектов
// 27. Заходим в конфигуратор и выполняем команду ""Обновить конфигурацию базы данных (F7)"" (жмем бочку)
// 28. Запускаем интерактивный режим (если ошибок запуска нет - значит внедрение БСП успешно выполнено!)
//     Также для проверки корректности внедрения можно воспользоваться обработкой ""ПроверкаВнедренияБСП.erf""
//     (обработка находится в каталоке ""ExtFiles"" шаблона БСП)

#КонецОбласти"}
},
{0,
{"ОписаниеПроцедурИФункций",0,0,"","/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////ЗАГОЛОВОК ПРОЦЕДУР И ФУНКЦИЙ///////////////////////////////////////////////////////
// Следует избегать комментариев, не дающих дополнительных пояснений о работе не-экспортной процедуры (функции).
 
Комментарий размещается перед объявлением процедуры (функции) и имеет следующий вид:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
* Секция ""Описание"" Может быть единственной секцией для процедур БЕЗ параметров.
* Секция ""Описание"" НЕ должно совпадать с именем процедуры (функции).

* Секция ""Описание"" (англ. ""Description"") содержит:
    1. Описание назначения процедуры (функции), достаточное для понимания сценариев ее использования без просмотра ее исходного кода.	  
    2. Может содержать краткое описание принципов работы 
	3. Может содержать перекрестные ссылки на СВЯЗАННЫЕ процедуры и функции.  

* Секция ""Описание"" для Процедур и Функций должна начинаться с ГЛАГОЛА:
	
	1. Для ФУНКЦИЙ это, как правило: «Возвращает…». 
	2. В тех случаях, когда возвращаемый результат является не основным в работе функции,
	   то с основного действия, например: «Проверяет…», «Сравнивает…», «Вычисляет…» и т.п.
	   
	Не рекомендуется начинать описание с избыточных слов «Процедура...», «Функция...»,
	а также с имени самой процедуры (функции), от удаления которых смысл не меняется.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////ПАРАМЕТРЫ///////////////////////////////////////////////////////////////
* Секция ""Параметры"" (англ. ""Parameters"") описывает:
    1. Параметры процедуры (функции). Если их нет, секция пропускается.	   
    2. Имя параметра необходимо стремиться выбирать таким образом, чтобы его назначение было понятно в контексте функции без дополнительных пояснений.
	3. Тип может быть описан явно, при этом может быть указан или один тип или список типов.
	   Под «списком типов» подразумеваются имена типов, разделенные запятыми. 
	   Имя типа может быть простым (в одно слово) или составным - в два слова, разделенных точкой.
       (Например: Строка, Структура, Произвольный, СправочникСсылка.Сотрудники)
	
    4. В качестве типов значений следует использовать только существующие в платформе типы, а также специальные типы, предусмотренные в EDT:
       ОпределяемыйТип.<Имя>, СправочникСсылка, ОбъектМетаданныхОтчет, РасширениеДекорацииФормыДляНадписи и т.п.
       Например:
           КоллекцияСтрок           – ТаблицаЗначений, Массив, СписокЗначений – коллекция для сравнения.
           ФормируемыйОтчет         – ОбъектМетаданныхОтчет.
           ПрисоединенныйФайлОбъект - ОпределяемыйТип.ПрисоединенныйФайлОбъект - элемент справочника файлов.
		   
    5. Текстовое описание параметра рекомендуется заполнять в том случае:
	       Когда только имени параметра в контексте функции не достаточно для понимания его назначения.
		   
	       Когда требуется дать дополнительную информацию о типе, поясняющие назначение параметра.
		   
		   Когда может приводиться наглядный пример с ожидаемым значением параметра.

		   Пример:
                 Проверяет, что переданные адреса включены в задачу. Если проверка не проходит – генерируется исключение.

                 //Параметры:
                 //    Адреса - Строка - содержит электронные адреса, разделенные запятой. Например, support@mycorp.ru,v8@localdomain.
                 //    ЗадачаИсполнителя - ЗадачаСсылка.ЗадачаИсполнителя
                 //Процедура ПроверитьАдресаЗадачи(Адреса, ЗадачаИсполнителя)
				 
           В данном примере текстовое описание для параметра «Адреса» нужно чтобы
           указать правило передачи нескольких адресов (через зяпятую); // привести пример.
           Текстовое описание для параметра ЗадачаИсполнителя не нужно.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		   
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////ПРИМЕР ОПИСАНИЯ ПАРАМЕТРОВ///////////////////////////////////////////////////////
Для параметров типа Структура и ТаблицаЗначений:
// Параметры:
//   СтатусыСерий - ТаблицаЗначений:
//     * Серия - СправочникСсылка.СерииНоменклатуры - если серия указана и она может
//               использоваться с новым значением номенклатуры на указанном складе, 
//               то возвращается переданное значение; если нет - пустая ссылка
//     * СтатусУказанияСерий - Число - если серии указываются в ТЧ ""Товары"", то 
//               возвращается рассчитанный статус, если для переданной
//               номенклатуры/склада серии не используется - возвращается 0
//               иначе возвращается переданный статус.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	 
Для параметров типа Массив следует указывать тип элементов с помощью ключевого слова ""из"" (англ. ""of""):
// ПеренаправленныеЗадачи - Массив из ЗадачаСсылка.ЗадачаИсполнителя
// 
// СведенияОбОбновлении  - Массив из Структура:
//     * КодАдресногоОбъекта - Строка
//     * Наименование        - Строка
//     * Индекс              - Строка
//     * ОбновлениеДоступно  - Булево
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	 
Для массивов, структур и таблиц значений могут быть вложенные описания,
при этом перед именами вложенных свойств число звездочек увеличивается: для первого уровня вложенности 2 звездочки, для второго 3 и т.д.
// Параметры:
//  СведенияОбОбновлении - Массив из Структура:
//     * КодАдресногоОбъекта - Структура:
//        ** КодРегиона             - Число - код региона (длина - 2).
//        ** КодНаселенногоПункта   - Число - код населенного пункта (длина - 3).
//        ** КодУлицы               - Число - код улицы (длина - 4).
//     * Наименование        - Строка
//     * ОбновлениеДоступно  - Булево
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Для параметра типа СтрокаТаблицыЗначений (СтрокаДереваЗначений) возможно задать состав свойств,
соответствующий колонкам его таблицы-владельца (дерева-владельца):
// СведенияОРегионе – СтрокаТаблицыЗначений: см. РегистрыСведений.АдресныеОбъекты.КлассификаторСубъектовРФ
где КлассификаторСубъектовРФ - экспортная функция модуля менедежра регистра сведения АдресныеОбъекты, которая возвращает таблицу значений.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Для каждого параметра (когда параметр может быть разного типа) можно задать одно или несколько дополнительных описаний типов параметра.
//   Реквизиты - Строка - имена реквизитов, перечисленные через запятую.
//                        Например, ""Код, Наименование, Родитель"".
//             - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//                        псевдоним поля для возвращаемой структуры с результатом,
//                        а в качестве значения (опционально) фактическое имя поля в таблице.
//                        Если значение не определено, то имя поля берется из ключа.
//             - Массив Из Строка, ФиксированныйМассив Из Строка - имена реквизитов.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Заданы с помощью ссылки на функцию-конструктор в формате ""см. ПутьКФункции"" (англ ""see MethodPath"").
// ПараметрыУказанияСерий - см. НоменклатураКлиентСервер.ПараметрыУказанияСерий
// Дубли - см. ОбработкаОбъект.ПоискИУдалениеДублей.ГруппыДублей
// РеквизитыКомпонент - Массив из см. ВнешниеКомпоненты.РеквизитыКомпоненты
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Обращающегося к реквизитам конкретного объекта метаданных или формы, можно ссылаться на типы реквизитов этого объекта (формы):
//  Запросы - см. Обработки.КонсольЗапросов.ТабличнаяЧасть.Запросы
//  ТипыДанных - см. Обработки.КонсольЗапросов.Реквизит.ДоступныеТипыДанных
//  Вложения - см. Справочники.ШаблоныСообщений.ФормаЭлемента.Вложения
//  КонтактнаяИнформация - см. Документы.ЗаказПокупателя.ФормаДокумента.Объект.КонтактнаяИнформация
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Когда подходящей функции-конструктора не существует и ее невозможно создать, допустимо указывать ссылку на другую процедуру 
(при полном совпадении параметров) или на параметр другой процедуры или функции, например:
// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту
//
// Параметры:
//  НастройкиФормы - см. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.НастройкиФормы
//  Источники - см. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.Источники
//  ПодключенныеОтчетыИОбработки - см. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.ПодключенныеОтчетыИОбработки
//  Команды - см. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.Команды
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////ВОЗВРАЩАЕМЫЕ ПАРАМЕТРЫ/////////////////////////////////////////////////////////
Секция ""Возвращаемое значение"" (англ. ""Returns"") описывает тип и содержание возвращаемого значения функции. Для процедур эта секция отсутствует.
// Возвращаемое значение:
//  Строка

// Возвращаемое значение:
//  Булево - Истина, если хотя бы одна из переданных ролей доступна текущему пользователю, либо у него есть административные права.

// Возвращаемое значение: 
//  - ЛюбаяСсылка - ссылка на предопределенный элемент.
//  - Неопределено - если предопределенный элемент есть в метаданных, но не создан в ИБ.

// Возвращаемое значение:
//  - СправочникСсылка.Пользователи
//  - СправочникСсылка.ВнешниеПользователи
Текстовое описание возвращаемого значения рекомендуется заполнять в том случае, когда только одного описания функции не достаточно,
либо требуется дать дополнительную информацию о типе, например, о составе свойств или колонок возвращаемого значения.
Также может быть приведен пример с ожидаемым значением возвращаемого значения, либо сквозной пример размещается в секции ""Пример"" ниже.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////ПРИМЕР/////////////////////////////////////////////////////////////////
// Пример:
//  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(""ru='%1 пошел в %2'""), ""Вася"", ""Зоопарк"") = ""Вася пошел в Зоопарк"".
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
В ПЕРЕОПРЕДЕЛЯЕМЫХ модулях в секции ""Пример"" следует размещать пример реализации переопределяемой процедуры, а не пример ее вызова.
Например, для процедуры ПриОпределенииОбщихПараметровБазовойФункциональности(ОбщиеПараметры) мы сообщаем что вернет функция передав знч:
// Пример:
//  ОбщиеПараметры.МинимальноНеобходимаяВерсияПлатформы = ""8.3.4.365"";
//  ОбщиеПараметры.РекомендуемыйОбъемОперативнойПамяти = 2;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////Варианты вызова/////////////////////////////////////////////////////////////
В редких случаях, когда сразу несколько параметров имеют дополнительные типы, 
рекомендуется добавить секцию ""Варианты вызова"" (англ. ""Сall options""), в которой дать описания наиболее частых или
всех возможных вариантов вызова функции с различными комбинациями типов параметров.
//
// Варианты вызова:
//   УниверсальнаяПроцедура(Тип11, Тип21) - описание ...
//   УниверсальнаяПроцедура(Тип12, Тип22) - описание ...
//   УниверсальнаяПроцедура(Тип11, Тип23) - описание ...
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////Документированный ПЕРЕХОД////////////////////////////////////////////////////////
Переход к другим объектам конфигурации, процедурам и функциям (в частности, для перехода к функциям-конструкторам структур).
Например:
// Описание универсальной процедуры.
// 
// См. УправлениеДоступом.ЗаполнитьНаборыЗначенийДоступа
//
// Параметры:
//   Параметр1 – Произвольный – описание параметра см. Справочник.Контрагенты.
//
Процедура УниверсальнаяПроцедура(Параметр1)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////Метка УСТАРЕЛА/////////////////////////////////////////////////////////////
отметить процедуру (функцию) как устаревшую, в первой строке ее описания размещается слово ""Устарела"" (англ. ""Deprecated"")
Например:
// Устарела. Следует использовать новую см. ОбщегоНазначения.ЕстьРоль
// ... 
Функция РолиДоступны(ИменаРолей) Экспорт
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////ПРИМЕР/////////////////////////////////////////////////////////////////
Описания функции с одним параметром:
// Определяет доступность ролей ИменаРолей текущему пользователю,
// а также доступность административных прав.
//
// Параметры:
//   ИменаРолей - Строка - имена ролей, доступность которых проверяется, разделенные запятыми.
//
// Возвращаемое значение:
//   Булево - Истина, если хотя бы одна из переданных ролей доступна текущему пользователю,
//   либо у него есть административные права.
//
// Пример:
// Если РолиДоступны(""ИспользованиеРассылокОтчетов,ОтправкаПоПочте"") Тогда ...
//
Функция РолиДоступны(ИменаРолей) Экспорт 

Описания процедуры без параметров:
// В обработчике события ПередЗаписью документа выполняется;
// - очистка табличной части услуги, в случае если указан договор с комиссионером;
// - проверка заполнения реквизита ЕдиницаИзмеренияМест табл. части Товары;
// - синхронизация с ""подчиненным"" счетом-фактурой;
// - заполнение склада и заказа покупателя в табличных частях Товары и ВозвратнаяТара;
// - удаление неиспользуемых строк табличной части ""Серийные номера"";
// - заполнение переменной модуля объекта УдалятьДвижение.
//
Процедура ПередЗаписью()"}
},
{0,
{"ДобавитьБСПRLSНовомуОбкВТиповойКонфигурации",0,0,"","///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 1. Добавить код в модуль менеджер объекта:
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	""РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)"";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Описание - возвращает структуру со значениями по которым будут проверяться права на разделы документа
// 				 
// Параметры:
//  ДокументОбъект - ДокументОбъект.ПриемНаРаботу, ДанныеФормыСтруктура - объект или данные формы, 
//					отображающие данные документа, для которого нужно получить данные
//
// Возвращаемое значение:
// 	Структура -  см. НовыйЗначенияДоступа - значения доступа по которым будут проверяться права на документ
//
Функция ЗначенияДоступа(ДокументОбъект) Экспорт
	Возврат МногофункциональныеДокументыБЗК.ЗначенияДоступаПоСоставуДокумента(
		ДокументОбъект, 
		ДокументОбъект.Организация);
КонецФункции

#КонецОбласти

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 2. Добавить код в модуль формы объекта:
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 3. Добавить шаблон (см. ""Разработка ограничений прав доступа"" https://its.1c.ru/db/bsp314doc#content:4:1)"}
},
{0,
{"БСПКакПодключитьДополнительныеРеквизиты",0,0,"БСПКакПодключитьДополнительныеРеквизиты_Кистанов","БСП 2.3

1) В нашем объекте добавляем табличную часть ""ДополнительныеРеквизиты"", а точнее копируем ее из другого существующего справочника или документа, например, из справочника Пользователи, который изначально находится в составе конфигурации БСП.
2) На форме элемента нашего объекта добавляем группу с наименованием ""ГруппаДополнительныеРеквизиты"". Именно в этой группе и будет отображаться интерфейс дополнительных реквизитов.
3) В справочнике ""НаборыДополнительныхРеквизитовИСведений"" добавляем новый предопределенный элемент по шаблону - Справочник_Склады (если наш объект это справочник и называется он ""Склады""). То есть смотрим на существующие предопределенные элементы и добавляем необходимый аналогичным образом.
4) В Плане видов характеристик ""ДополнительныеРеквизитыИСведения"" добавляем тип нашего объекта, если необходим такой тип для созданий дополнительных реквизитов.
5) В модуле формы элемента нашего объекта размещаем следующие куски кода:

    В процедуре ПриСозданииНаСервере добавляем:

    // Обработчик подсистемы ""Свойства""
    ДополнительныеПараметры = Новый Структура;
    ДополнительныеПараметры.Вставить(""Объект"", Объект);
    ДополнительныеПараметры.Вставить(""ИмяЭлементаДляРазмещения"", ""ГруппаДополнительныеРеквизиты"");
    УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
    // Конец СтандартныеПодсистемы.Свойства
    В процедуре ПриЧтенииНаСервере добавляем:

    // СтандартныеПодсистемы.Свойства
    УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);    
    // Конец СтандартныеПодсистемы.Свойства    
     В процедуре ОбработкаПроверкиЗаполненияНаСервере добавляем:

    // СтандартныеПодсистемы.Свойства
    УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты, Объект);
    // Конец СтандартныеПодсистемы.Свойства
     В процедуре ПередЗаписьюНаСервере  добавляем:

    // СтандартныеПодсистемы.Свойства
    УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.Свойства
    Добавляем следующие процедуры:

    // ПРОЦЕДУРЫ ПОДСИСТЕМЫ ""СВОЙСТВ""
    &НаКлиенте
    Процедура Подключаемый_РедактироватьСоставСвойств()
        УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
    КонецПроцедуры
    &НаСервере
    Процедура ОбновитьЭлементыДополнительныхРеквизитов()
        УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение(""Объект""));
    КонецПроцедуры
6) И еще один важный момент: у справочника ""НаборыДополнительныхРеквизитовИСведений"" есть реквизит ""Используется"". Для нашего созданного предопределенного элемента (см. пункт 3) необходимо установить значение Истина для этого реквизита. Но в пользовательском режиме 1С:Предприятие это не получится сделать, потому что этого реквизита нет на форме. Но можно воспользоваться стандартной обработкой ""Групповое изменение реквизитов"", где выбрать справочник ""НаборыДополнительныхРеквизитовИСведений"", сделать отбор по нашему созданному предопределенному элементу и установить значение Истина для реквизита ""Используется"". Примечание: если в обработке ""Групповое изменение реквизитов"" нет для выбора справочника ""НаборыДополнительныхРеквизитовИСведений"", то необходимо в настройке ""Дополнительные параметры"" включить галку ""Показывать служебные реквизиты""."}
},
{0,
{"ПолучитьКонтактнуюИнформацию",0,0,"","ОтветсвенныйИсполнительEmail = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ОтветсвенныйИсполнитель, 
Справочники.ВидыКонтактнойИнформации.EmailКонтактныеЛица)"}
},
{0,
{"СообщитьПользователю_ФормируемСообщениеНаСервере",0,0,"","			Если ОрганизацияНоменклатуры = Неопределено Тогда 
				ТекстОшибки = НСтр(""ru='У номенклатуры %1 в строке %2 не указана Организация номенклатуры"");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				Стр.Номенклатура, Стр.НомерСтроки);
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(""Колонка"", ""Заполнение"",
				НСтр(""ru = 'Номенклатура.Организация Номенклатуры'""),
				Стр.НомерСтроки,
				Стр.Номенклатура,
				ТекстОшибки);
				Поле = Стр.Номенклатура.Наименование;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, ""Объект"", Отказ);
			ИначеЕсли ОрганизацияНоменклатуры <> ЭтотОбъект.Организация И Стр.СуммаАкциза <> 0 Тогда
				ТекстОшибки = НСтр(""ru='У номенклатуры %1 в строке %2 изменена Организация номенклатуры. Необходимо пересчитать акциз"");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				Стр.Номенклатура, Стр.НомерСтроки);
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(""Колонка"", ""Заполнение"",
				НСтр(""ru = 'Номенклатура.Организация Номенклатуры'""),
				Стр.НомерСтроки,
				Стр.Номенклатура,
				ТекстОшибки);
				Поле = Стр.Номенклатура.Наименование;
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, ""Объект"", Отказ);
			КонецЕсли;"}
}
},
{38,
{"Подсказки",1,0,"",""},
{0,
{"ВНИМАНИЕ_ПередачаТабличногоДокумента_ОшибкаXTDO",0,0,"","#Область ОшибкаПередачиТабличногоДокумента
// Написал я как то такую процедуру и была у меня ошибка преобразования XTDO
// Я думал что ошибка относится к ТабличномуДокументу но, нет проблемма была в параметре ""Запрос"",
// это структура где есть массив из массив из структура и другие ключи примитивного типа.
// Процедура отрабатывала нормально но, при выходе из процедуры возникала ошибка XTDO и решил я это
// 1. Передачей по значению (Знач Запрос) 2. ИЛИ в конце процедуры очистка переменной (Запрос = Неопределено).

&НаСервереБезКонтекста
Процедура НаполнитьТабличныйДокументДаннымиЗапроса(Знач Запрос, ТабличныйДокумент)
	
	РезультатЗапроса = НовыйРезультатЗапроса(Запрос.Параметры, Запрос.Текст, Запрос.ДанныеВТ, Запрос.ИменаВТ);
	РезультатЗапросаВТабличныйДокумент(РезультатЗапроса, ТабличныйДокумент);
	
	// ИЛИ так: Запрос = Неопределено;
	
КонецПроцедуры // НаполнитьТабличныйДокументДаннымиЗапроса()

#КонецОбласти"}
},
{0,
{"ЗаполнитьФормуПоКлючу_ВызовМетодаФОРМЫ",0,0,"ЗаполнитьФормуПоКлючу_Кистанов","
#Область ЗаполнитьФормуПоКлючу_ВызовМетодаФОРМЫ

#Область Синтаксис

отбор = Новый Структура(""Ключ"", <? ""ЗначениеКлюча"">);
форма = ПолучитьФорму(<?>, отбор);
// ИЛИ при необходимости, можно открыть форму: ОткрытьФорму("""", отбор);

#КонецОбласти

#Область Пример

// Получения формы выделенных строк в форме списка и вызов метода формы:
&НаКлиенте
Процедура РасшБагз_ПересчитатьДокументыВместо(Команда)
	Для каждого Элемент из Элементы.Список.ВыделенныеСтроки Цикл
		ПараметрыФормы = Новый Структура(""Ключ"", Элемент);
		фрм = ПолучитьФорму(""Документ.ДанныеДляРасчетаЗарплаты.ФормаОбъекта"",ПараметрыФормы);						
		фрм.РасшБагз_СортВиноградаПриИзмененииПосле(Неопределено);
		фрм.Записать();
	КонецЦикла;                                       
	Сообщить (""Пересчет документов завершен.""); 	
КонецПроцедуры

#КонецОбласти

#КонецОбласти"}
},
{0,
{"ПереопределитьПараметрыКомпоновщикаОтчета",0,0,"ПереопределитьПараметрыКомпоновщикаОтчета_Кистанов","#Область ПереопределитьПараметрыКомпоновщикаОтчета
<?>

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.АвтоМасштаб        = Истина;
	
	Организация     = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, ""Организация"");
	Подписант1 		= КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, ""ПодвалФИО1"");
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ""ПодвалДолжность1"", 
	                                                ДолжностьФизЛица(Подписант1.Значение,	Организация.Значение));	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ""ПодвалФИО1_"", 
	                                                ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Строка(Подписант1.Значение)));
	
КонецПроцедуры

#КонецОбласти"}
},
{0,
{"ПолучитьЗнчРеквизитаНаходящегосяНаФормы",0,0,"ПолучитьЗнчРеквизитаНаходящегосяНаФормы_Кистанов","<?>
// Например необходимо получить знч реквизита (формы) ""ОтветственноеЛицо"" справочника ""Склады"", ТОГДА:
// ПолучитьФорму(""Справочник.Склады.ФормаОбъекта"", новый Структура(""Ключ"",СкладСсылка)).ОтветственноеЛицо
&НаКлиенте
ПолучитьФорму(""<?""МетаданныеПуть"">.ФормаОбъекта"", новый Структура(""Ключ"",<?""Обк ссылка"">)).<?""получитьРеквизит"">;"}
},
{0,
{"ПолучитьМакетИзКонтекстаЭтотОбъект",0,0,"ПолучитьМакетИзКонтекстаЭтотОбъект_Кистанов","<?>
Макет = ЭтотОбъект.ПолучитьМакет(<?""имяМакета"">);"}
},
{0,
{"ПолучитьМакетИзКонтекстаФормы",0,0,"ПолучитьМакетИзКонтекстаФормы_Кистанов","<?>
&НаСервере
Функция ПолучитьМакетНаСервере(<?""имяМакета"">)
	Возврат РеквизитФормыВЗначение(""Объект"").ПолучитьМакет(<?""имяМакета"">);
КонецФункции"}
},
{0,
{"ТекстыЗапросовПакета",0,0,"ТекстыЗапросовПакета_Кистанов","<?>
ТекстыЗапросовПакета = Новый Массив;
Разделитель          =
""
|;
|/////////////////////////////////////////////////////////////
|"";

ТекстЗапроса =
""ВЫБРАТЬ
| Упаковки.Ссылка КАК Ссылка
|ИЗ
| Справочник.Упаковки КАК Упаковки"";

ТекстыЗапросовПакета.Добавить(ТекстЗапроса);

ТекстЗапроса =
""ВЫБРАТЬ
| Номенклатура.Ссылка КАК Ссылка
|ИЗ
| Справочник.Номенклатура КАК Номенклатура "";

ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
ТекстЗапроса = СтрСоединить(ТекстыЗапросовПакета, Разделитель);"}
},
{0,
{"КонкатенацияТекстаЗапроса",0,0,"КонкатенацияТекстаЗапроса_Кистанов","<?>
Разделитель =
""
|;
|/////////////////////////////////////////////////////////////
|"";

ТекстыЗапросовПакета = Новый Массив;

ТекстЗапроса =
""ВЫБРАТЬ
| Упаковки.Ссылка КАК Ссылка
|ИЗ
| Справочник.Упаковки КАК Упаковки"";

ТекстыЗапросовПакета.Добавить(ТекстЗапроса);

ТекстЗапроса =
""ВЫБРАТЬ
| Номенклатура.Ссылка КАК Ссылка
|ИЗ
| Справочник.Номенклатура КАК Номенклатура "";

ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
ТекстЗапроса = СтрСоединить(ТекстыЗапросовПакета, Разделитель);"}
},
{0,
{"ПланыОбмена",0,0,"","///////////////////////////////////////////////////////////////////////
//   ВНИМАНИЕ: На предопределенном узле НЕ регистрирует изменения!   //
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
// 1. Программная регистрация прикладного объекта:
//    (ПРИ ИЗМЕНЕНИИ прикладного объекта)
#Область ПланыОбменаЗарегистрироватьИзменения

Процедура ПланыОбменаЗарегистрироватьИзменения(ИмяУзла, Источник) Экспорт

   Если Источник.НенадоРегистрировать Тогда
     Возврат;
   КонецЕсли;


  Узел = ПланыОбмена.Exe_umac.НайтиПоНаименованию(ИмяУзла);;
  ПланыОбмена.ЗарегистрироватьИзменения(Узел, Источник);
  
КонецПроцедуры

#КонецОбласти


///////////////////////////////////////////////////////////////////////
// 2. Выгружаем данные зарегистрированные на узле,
//    а также устанавливаем новый номер сообщения:
//    (ПРИ событии - ВЫПОЛНИТЬ ОБМЕН)
#Область ПланыОбменаВыгрузитьИзменения

Функция ПланыОбменаВыгрузитьИзменения(ИмяУзла) Экспорт
    Узел = ПланыОбмена.Exe_umac.НайтиПоНаименованию(ИмяУзла);
	ДанныеВыгрузки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	""ВЫБРАТЬ
	|	ФизическиеЛицаИзменения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица.Изменения КАК ФизическиеЛицаИзменения
	|ГДЕ
	|	ФизическиеЛицаИзменения.Узел = &Узел"";
	Запрос.УстановитьПараметр(""Узел"", Узел);
	
	Выборка = Запрос.Выполнить().Выбрать();		
	Пока Выборка.Следующий() Цикл
		ДанныеВыгрузки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного, ДанныеВыгрузки);
	
	УзелОбъект    = Узел.ПолучитьОбъект();
	НомерВыгрузки = УзелОбъект.НомерОтправленного + 1;
	УзелОбъект.НомерОтправленного = НомерВыгрузки;
	УзелОбъект.Записать();

	Выгрузка = Новый Структура;
	Выгрузка.Вставить(""Номер"",  НомерВыгрузки);
	Выгрузка.Вставить(""Данные"", ДанныеВыгрузки);
	
	Возврат Выгрузка;	
КонецФункции

#КонецОбласти



///////////////////////////////////////////////////////////////////////
// 3. Снять с регистрации плана обмена:
//    (ПРИ событии - ПОЛУЧЕН ОТВЕТ успешно выполненого обмена)
#Область ПланыОбменаСнятьСРегистрации

#Область ПланыОбменаСнятьСРегистрацииПоНомеруВыгрузки

Процедура ПланыОбменаСнятьСРегистрацииПоНомеруВыгрузки(ИмяУзла, НомерВыгрузки) Экспорт

  Узел = ПланыОбмена.Exe_umac.НайтиПоНаименованию(ИмяУзла);
  ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НомерВыгрузки);
  
КонецПроцедуры

#КонецОбласти
//
//
//
#Область ПланыОбменаСнятьСРегистрацииПоСсылке

Процедура ПланыОбменаСнятьСРегистрацииПоСсылке(ИмяУзла, СсылкаНаОбъект) Экспорт

  Узел = ПланыОбмена.Exe_umac.НайтиПоНаименованию(ИмяУзла);
  ПланыОбмена.УдалитьРегистрациюИзменений(Узел, СсылкаНаОбъект);
  
КонецПроцедуры

#КонецОбласти

#КонецОбласти"}
},
{0,
{"ОбходВыделенныхСтрокТЧ",0,0,"ОбходВыделенныхСтрокТЧ_Кистанов","&НаКлиенте
Процедура УстановитьВыделенымСтрокамОбщийСценарий(ОбщийСценарий)
	
	ВыделенныеЭлементы = Элементы.ТаблицаЗависимостей.ВыделенныеСтроки;
	Для каждого ИндексВыделенногоЭлемента Из ВыделенныеЭлементы Цикл
		СтрокаТаблицы 	= ТаблицаЗависимостей.НайтиПоИдентификатору(ИндексВыделенногоЭлемента);
		ИндексСтроки 	= ТаблицаЗависимостей.Индекс(СтрокаТаблицы);
		
		ТаблицаЗависимостей[ИндексСтроки].Сценарий = ОбщийСценарий;
	КонецЦикла;

КонецПроцедуры"}
},
{0,
{"БыстраяСортировка",0,0,"БыстраяСортировка_Кистанов","		
ВремСписок = Новый СписокЗначений();
    ВремСписок.Добавить(Сумма1, ""Сумма документа 1"");
    ВремСписок.Добавить(Сумма2, ""Сумма документа 2"");
    ВремСписок.Добавить(Сумма3, ""Сумма документа 3"");
    ВремСписок.СортироватьПоЗначению(НаправлениеСортировки.Возр);
МинимальнаяСумма = ВремСписок[0].Значение;"}
},
{0,
{"ФоновоеВыполнение",0,0,"","
#Область ОбщийМодуль_ФоновоеВыполнение
// Перво-наперво создаем общий модуль с именем например ""ФоновоеВыполнение"" с галкой ""Сервер"". Добавим туда пару процедур:

Функция ЗапуститьФоновоеВыполнение(ТекстПроцедуры, СтруктураПараметров=Неопределено) Экспорт
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
    ПараметрыВыполнения = Новый Массив;
    ПараметрыВыполнения.Добавить(ТекстПроцедуры);
    ПараметрыВыполнения.Добавить(СтруктураПараметров);
    
    ФоновыеЗадания.Выполнить(""ИТФоновоеВыполнение.ФоноваяПроцедура"", ПараметрыВыполнения, УникальныйИдентификатор);
	
    Возврат УникальныйИдентификатор;
	
КонецФункции

Процедура ФоноваяПроцедура(ТекстМодуля, ПараметрыВыполнения) Экспорт
	
	ПолныйТекстМодуля = """";
	
	Для Каждого ТекПараметр Из ПараметрыВыполнения Цикл
        ПолныйТекстМодуля = ПолныйТекстМодуля + ТекПараметр.Ключ+""=ПараметрыВыполнения.""+ТекПараметр.Ключ+"";""+Символы.ПС;
    КонецЦикла;
	
	ПолныйТекстМодуля = ПолныйТекстМодуля + ТекстМодуля;
	
	Выполнить(ПолныйТекстМодуля);
	
КонецПроцедуры

#КонецОбласти

#Область Используем_ОбщийМодуль_ФоновоеВыполнение_ГДЕЛибо

	ИсточникИмя					= Источник.Метаданные().Имя;
	ИсточникУникальныйИД		= Строка(Источник.Ссылка.УникальныйИдентификатор());
	
	// НовыйПараметрыПочтовоеУведомлениеОУвольнении - это структура (интерфейс параметра функции)
	ПараметрыФоновойПроцедуры						= НовыйПараметрыПочтовоеУведомлениеОУвольнении();
	ПараметрыФоновойПроцедуры.ИсточникИмя 			= ИсточникИмя;
	ПараметрыФоновойПроцедуры.ИсточникУникальныйИД 	= ИсточникУникальныйИД;
	
	ПараметрыФоновойПроцедуры.мПолучатели.Добавить(""it@massandra.ru"");
	
	// Необходимо указывать имя общего модуля даже если процедура ""ОтправитьПочтовоеУведомлениеОУвольнении"" находимтся в этом же модуле
	ТекстФоновойПроцедуры = ""ИТОповищение.ОтправитьПочтовоеУведомлениеОУвольнении(ИсточникИмя, ИсточникУникальныйИД, мПолучатели);"";
	
	// ИТФоновоеВыполнение - это общий модуль (галочка ""сервер"") в котором реализована процедура ""ЗапуститьФоновоеВыполнение""
	ИТФоновоеВыполнение.ЗапуститьФоновоеВыполнение(ТекстФоновойПроцедуры, ПараметрыФоновойПроцедуры);
	
#КонецОбласти

#Область ПРОЦЕДУРА_которая_выполняется_в_ФОНОВОМРЕЖИМЕ

// Процедура - Отправить почтовое уведомление в фоновом режиме
//
// Параметры:
//	ИсточникИмя - Строка - Метаданные().Имя документа
//	ИсточникУникальныйИД - Строка - УникальныйИдентификатор документа как строка
//	мПолучатели - Массив ИЗ Строка - Адреса электронной почты (например: ""it@massandra.ru"")
//
Процедура ОтправитьПочтовоеУведомлениеОУвольнении(ИсточникИмя, ИсточникУникальныйИД, мПолучатели) Экспорт

	//ДокУИДИзСтр	= Новый УникальныйИдентификатор(ИсточникУникальныйИД);
	//ИсточникДок = Документы[ИсточникИмя].ПолучитьСсылку(ДокУИДИзСтр);
	//Выборка 	= ВыбратьСотрудниковДоступКоторымНеобходимоЗакрыть(ИсточникДок);
	
	//Если Выборка = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
		
	//ПользовательSMTP 	= ""app1C@massandra.ru"";
	//ОтправительИмя		= ""app1C"";
	//темаПисьма 			= ""Увольнение сотрудника, необходимо заблокировать доступ!"";	
	//УведомлениеТекст	= СформироватьУведомлениеПоУволенномуСотруднику(Выборка);
	
	//ОписаниеПисьма 		= ИТИнтернетПочта.НовыйОписаниеИнтернетПочтаПисьма();

	//ОписаниеПисьма.ПользовательSMTP = ПользовательSMTP;
	//ОписаниеПисьма.ОтправительИмя   = ОтправительИмя;
	//ОписаниеПисьма.Получатели 		= мПолучатели;
	//ОписаниеПисьма.Тема				= темаПисьма;
	//ОписаниеПисьма.Текст			= УведомлениеТекст;
	
	// ИТИнтернетПочта - это общий модуль с галочкой ""Сервер"" и ""Вызов сервера""
	ИТИнтернетПочта.ОтправитьПочтовоеСообщение(ОписаниеПисьма);

КонецПроцедуры

#КонецОбласти"}
},
{0,
{"ЭлементФормыСписокВыбора",0,0,"","// Заполнение списка происходит у элемента формы
// ,а устанавливается знч реквизиту.
&НаКлиенте
Функция СценарийДляВсехВыделеныхЗначениеПоУмолчанию()

	ЗнчПоУмолчанию = Элементы.СценарийДляНайденыхВыделеных.СписокВыбора.Добавить(""Просмотр"");	
	ЭтаФорма.СценарийДляВсехВыделеных = ЗнчПоУмолчанию;
	
КонецФункции // СценарийДляВсехВыделеныхЗначениеПоУмолчанию()"}
},
{0,
{"ОбойтиВсеВыделенныеСтрокиТЧ",0,0,"ОбойтиВсеВыделенныеСтрокиТЧ_Кистанов","	ВыделенныеЭлементы = Элементы.ТаблицаЗависимостей.ВыделенныеСтроки;
	Для каждого ИндексВыделенногоЭлемента Из ВыделенныеЭлементы Цикл
		СтрокаТаблицы 	= ТаблицаЗависимостей.НайтиПоИдентификатору(ИндексВыделенногоЭлемента);
		ИндексСтроки 	= ТаблицаЗависимостей.Индекс(СтрокаТаблицы);
		
		ТаблицаЗависимостей[ИндексСтроки].Сценарий = ОбщийСценарий;
	КонецЦикла;"}
},
{0,
{"ОтладкаВнешнихПФЧерезКомандуФормы",0,0,"ОтладкаВнешнихПФЧерезКомандуФормы_Кистанов","
#Область ОтладкаВнешнихПФ

&НаКлиенте
Процедура Печать(Команда)
	ПечатьНаСервере().Показать();
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере()
	
	// докСсылка - это реквизит на форме, Ссылка на конкретный документ.
	
	докСсылка 	= Объект.СсылкаНаОбъект;
	л_Объект	= РеквизитФормыВЗначение(""Объект"");
	мДок 		= новый Массив;
	
	мДок.Добавить(докСсылка);
	
	// ВХОДНОЙ ПАРАМЕТР:
	// МассивОбъектов - Массив - ссылки на объекты, которые нужно распечатать;  #МОЖНО ПЕРЕДАТЬ МАССИВ ОБК
	// ВЫХОДНОЙ ПАРАМЕТР:
	// ОбъектыПечати  - СписокЗначений - значение - ссылка на объект;			#МОЖНО ПЕРЕДАТЬ МАССИВ ОБК
	//
	// Функция ""СформироватьТабДокумнтОбразца"" - находимтся в модуле объекта обработки и вызывается в процедуре ""Печать""
	// ВНИМАНИЕ: на время отладки - этой функции необходимо добавить ключевое слово ""Экспорт"",
	// пример (в модуле объекта станет так): ""Функция СформироватьТабДокумнтОбразца(МассивОбъектов, ОбъектыПечати) Экспорт""
	//
	// НЕ ОБЯЗАТЕЛЬНЫЙ ПАРАМЕТР:
	// #ДанныеДляпечати = ОбъектыПечати; #ВСЕ НЕ ОБЯЗАТЕЛЬНЫЕ ПАРАМЕТРЫ НУЖНО СМОТРЕТЬ В ОБРАБОТКЕ,
	// ЧАСТО ЭТО ССЫЛКА НА ПЕРВЫЙ ОБК из массива обязательных параметров
	//
	// ПРИМЕР:
	// л_Объект.ФункцияСформироватьПечатнуюФорму(МассивОбъектов, ОбъектыПечати);

	МассивОбъектов = ДанныеПечатиДокументов(мДок);
	Возврат л_Объект.СформироватьТабДокумнтОбразца(МассивОбъектов, мДок, мДок); // Место для ТОЧКИ ОСТАНОВА с заходом В!
	
КонецФункции

// ""Служебная"" Функция - Универсальная - используетсяв ПечатьНаСервере
&НаСервере
Функция ДанныеПечатиДокументов(МассивОбъектов) Экспорт
	
	ДанныеПечатиОбъектов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ""ВЫБРАТЬ
	|	док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ."" + МассивОбъектов[0].Метаданные().Имя + "" КАК док
	|ГДЕ
	|	док.Ссылка В(&МассивОбъектов)"";
	
	Запрос.УстановитьПараметр(""МассивОбъектов"", МассивОбъектов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;		
	КонецЕсли;	
КонецФункции

#КонецОбласти"}
},
{0,
{"ВыборКогдаПериодичностьПоПозицииРегистратора",0,0,"ВыборКогдаПериодичностьПоПозицииРегистратора_Кистанов","	""ВЫБРАТЬ
	|	Регистр.Период				КАК ПериодРегистрации,
	|	Регистр.Организация			КАК Организация,
	|	Регистр.Объект				КАК ОС,
	|	Регистр.СуммаАмортизацииБУ  КАК СуммаБУ
	|	ПОМЕСТИТЬ ВТОтборОС
	|ИЗ
	|	РегистрСведений.РасчетАмортизации.СрезПоследних(
	|	&Период, Организация = &Организация И Объект В (&ОсновныеСредства)) КАК Регистр
	|;
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(Амортизация.ПериодРегистрации)	КАК ПериодРегистрации,
	|	Амортизация.Организация					КАК Организация,
	|	Амортизация.ОС							КАК ОС
	|	ПОМЕСТИТЬ ВТСрезПоследних
	|ИЗ
	|	ВТОтборОС КАК Амортизация
	|	
	|СГРУППИРОВАТЬ ПО
	|	Организация,
	|	ОС
	|;
	|
	|ВЫБРАТЬ
	|	ТабОС.ОС		КАК ОС,
	|	ТабОС.СуммаБУ 	КАК СуммаБУ
	|ИЗ
	|	ВТОтборОС КАК ТабОС
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСрезПоследних КАК СрезПоследних
	|	ПО ТабОС.ПериодРегистрации 	= СрезПоследних.ПериодРегистрации
	|	И  ТабОС.Организация 		= СрезПоследних.Организация
	|	И  ТабОС.ОС 				= СрезПоследних.ОС"";"}
},
{0,
{"ВыбратьДопОтчетыИОбработки",0,0,"ВыбратьДопОтчетыИОбработки_Кистанов","Выбрать * ИЗ Справочник.ДополнительныеОтчетыИОбработки КАК ДО
     ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Разделы
КАК Р ПО ДО.Ссылка = Р.Ссылка И Р.Ссылка Есть NULL
     ГДЕ ИмяФайла ПОДОБНО ""%.erf"""}
},
{0,
{"ОписаниеТиповПодсказка",0,0,"ОписаниеТиповПодсказка_Кистанов","    // Описание типа строки:
    НовСтрока = Новый ОписаниеТипов(""Строка"");
    // Описание строки с уточнением через квалификатор: максимальная длина строки = 50 символов
    КвалификаторыСтроки = Новый КвалификаторыСтроки(50);
    НовСтрока_50 = Новый ОписаниеТипов(""Строка"", ,КвалификаторыСтроки);

    // Описание типа числа:
    НовЧисло = Новый ОписаниеТипов(""Число"");
    // Описание числа с уточнением через квалификатор: общее число разрядов = 14, число дробной части = 3
    КвалификаторыЧисла = Новый КвалификаторыЧисла(14, 3, ДопустимыйЗнак.Любой);
    НовЧисло_14_3 = Новый ОписаниеТипов(""Число"", КвалификаторыЧисла);

    // Описание типа даты:
    НовДата = Новый ОписаниеТипов(""Дата"");
    // Описание даты с уточнением через квалификатор: храниться только дата, без времени
    КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);
    НовДата_БезВремени = Новый ОписаниеТипов(""Дата"", , ,КвалификаторыДаты);

    // Описание типа булево:
    НовБулево = Новый ОписаниеТипов(""Булево"");// Истина, Ложь

    // Описание типа справочника:
    НовНоменклатура = Новый ОписаниеТипов(""СправочникСсылка.Номенклатура"");

    // Описание типа перечисление:
    НовСпособОплаты = Новый ОписаниеТипов(""ПеречислениеСсылка.СпособыОплаты"");

    // Описание типа документа:
    НовДоговор = Новый ОписаниеТипов(""ДокументСсылка.Договор"");

    // Описание типа структуры:
    НовСтруктура = Новый ОписаниеТипов(""Структура"");

    // Описание типа соответствия:
    НовСоответствие = Новый ОписаниеТипов(""Соответствие"");

    // Описание типа массива:
    НовМассив = Новый ОписаниеТипов(""Массив"");

    // Описание типа хранилище значения:
    НовХранилищеЗначения = Новый ОписаниеТипов(""ХранилищеЗначения"");

    // Описание типа таблица значений:
    НовТаблицаЗначений = Новый ОписаниеТипов(""ТаблицаЗначений"");

    // Описание типа список значений:
    НовТаблицаЗначений = Новый ОписаниеТипов(""СписокЗначений"");

    // Описание типа картинки:
    НовКартинка = Новый ОписаниеТипов(""Картинка"");

    // Описание типа уникального идентификатора:
    НовУникальныйИдентификатор = Новый ОписаниеТипов(""УникальныйИдентификатор"");

    // Описание типа объекта метаданых:
    НовОбъектМетаданных = Новый ОписаниеТипов(""ОбъектМетаданных, Строка"");

    // Описание составного типа (Например: строка+структура+справочник):
    СписокМассив = Новый Массив;
    СписокМассив.Добавить(""Строка"");
    СписокМассив.Добавить(""Структура"");
    СписокМассив.Добавить(""СправочникСсылка.Номенклатура"");
    ОписаниеСоставногоТипа = Новый ОписаниеТипов(СписокМассив);"}
},
{0,
{"ПРОГРАММНО_РЕКВИЗИТ_Шпаргалка_ЭлементыРеквизитыПрограммно",0,0,"","// (Источник: https://infostart.ru/1c/articles/1118319/)
//
// Есть определенные ситуации, когда без программного формирования элементов формы не обойтись:

// 1. Заранее неизвестно какое количество элементов необходимо разместить на форме
// (Примеры: Система тестирования, где при формирование тестового задания заранее неизвестно сколько будет вопросов или документ корректировки регистров,
// когда так же заранее не известно какие колонки будут у таблицы формы).

// 2.Доработка типового функционала. Программное размещение элементов впоследствии упрощает обновление типовых конфигураций.
// Многие разработчики даже придерживаются данного правила при работе с «расширениями».


// Шпаргалка:
#Область Шпаргалка

// Группа – Тип(""ГруппаФормы"")
#Область ТипГруппаФормы
	
	//Пример создания обычной группы без отображения
	#Область ОбычнойГруппыБезОтображения
	
	ГруппаДатаНомер = ЭтаФорма.Элементы.Добавить(""ГруппаОбычная"", Тип(""ГруппаФормы""),ЭтаФорма);
	ГруппаДатаНомер.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДатаНомер.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДатаНомер.ОтображатьЗаголовок = ЛОЖЬ; 
	ГруппаДатаНомер.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	#КонецОбласти
		
	//Пример создания обычной группы
	#Область ОбычнойГруппы
	
	ГруппаШапка = ЭтаФорма.Элементы.Добавить(""ГруппаШапка"", Тип(""ГруппаФормы""),ЭтаФорма);
	ГруппаШапка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаШапка.Заголовок = ""Основные реквизиты"";
	ГруппаШапка.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	ГруппаШапка.ОтображатьЗаголовок = ИСТИНА; 
	ГруппаШапка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаШапка.РастягиватьПоГоризонтали = ИСТИНА;
	
	#КонецОбласти
	
	//Пример создания группы страницы
	#Область ГруппыСтраницЫ
	
	ГруппаСтраниц = ЭтаФорма.Элементы.Добавить(""ГруппаСтраницы"", Тип(""ГруппаФормы""),ЭтаФорма);
	ГруппаСтраниц.Вид = ВидГруппыФормы.Страницы;
	ГруппаСтраниц.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	ГруппаСтраниц.РастягиватьПоГоризонтали = ИСТИНА;
	
	#КонецОбласти
	
	//Пример создания страниц
	#Область СтраницА
	
	СтраницаТовары = ЭтаФорма.Элементы.Добавить(""СтраницаТовары"", Тип(""ГруппаФормы""),ГруппаСтраниц);
	СтраницаТовары.Вид = ВидГруппыФормы.Страница;
	СтраницаТовары.Заголовок = ""Товары"";
	
	СтраницаДополнительно = ЭтаФорма.Элементы.Добавить(""СтраницаДополнительно"", Тип(""ГруппаФормы""),ГруппаСтраниц);
	СтраницаДополнительно.Вид = ВидГруппыФормы.Страница;
	СтраницаДополнительно.Заголовок = ""Дополнительно"";
	
	#КонецОбласти
 
#КонецОбласти

// Поле – Тип(""ПолеФормы"")
#Область ТипПолеФормы

  Для работы элемента формы «Поле» необходимо наличие источника данных – реквизита. Если необходимого реквизита нет, его нужно предварительно создать.

// Элементы формы, которые можно создать с типом «ПолеФормы»:

  ПолеHTMLДокумента
  ПолеВвода
  ПолеГеографическойСхемы
  ПолеГрафическойСхемы
  ПолеДендрограммы
  ПолеДиаграммы
  ПолеДиаграммыГанта
  ПолеИндикатор
  ПолеКалендарь
  ПолеКартинки
  ПолеНадписи
  ПолеПереключателя
  ПолеПланировщика
  ПолеПолосыРегулирования
  ПолеТабличногоДокумента
  ПолеТекстовогоДокумента
  ПолеФлажок
  ПолеФорматированногоДокумента

#КонецОбласти
 
//Создание реквизитов
#Область СозданиеРеквизитов
	
	ДобавляемыеРеквизиты = Новый Массив; //Определяем массив добавляемых реквизитов
	
	НовыйРеквизит = Новый РеквизитФормы(""Комментарий"",Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(500))); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит); 
	НовыйРеквизит = Новый РеквизитФормы(""Номер"",Новый ОписаниеТипов(""Число"",Новый КвалификаторыЧисла(10,0))); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы(""Дата"",Новый ОписаниеТипов(""Дата"",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя))); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы(""Наименование"",Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(150))); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы(""ПометкаУдаления"",Новый ОписаниеТипов(""Булево"")); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый ОписаниеТипов(""СправочникСсылка.Номенклатура"");
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
#КонецОбласти

//Создание полей
#Область Созданиеполей
	
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(""Номер"", Тип(""ПолеФормы""),ГруппаДатаНомер);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = ""Номер"";

	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(""Дата"", Тип(""ПолеФормы""),ГруппаДатаНомер);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = ""Дата"";
	
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(""Наименование"", Тип(""ПолеФормы""),ГруппаШапка);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = ""Наименование"";
	
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(""Комментарий"", Тип(""ПолеФормы""),СтраницаДополнительно);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = ""Комментарий"";
	
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(""ПометкаУдаления"", Тип(""ПолеФормы""),СтраницаДополнительно);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = ""ПометкаУдаления"";
	
#КонецОбласти
 
// Декорация – Тип(""ДекорацияФормы"")
#Область ТипДекорацияФормы
Обе существующие декорации имеют один тип, но разный вид.

//Декорация надпись
#Область ДекорацияНадпись
	
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(""ЗаголовокТовара"", Тип(""ДекорацияФормы""),СтраницаТовары);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок = ""Глобус"";
	
#КонецОбласти
 
//Декорация картинка
#Область ДекорацияКартинка
	
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(""КартинкаТовара"", Тип(""ДекорацияФормы""),СтраницаТовары);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
	НовыйЭлемент.Картинка = БиблиотекаКартинок.ГеографическаяСхема;
	НовыйЭлемент.РазмерКартинки = РазмерКартинки.Растянуть;
	НовыйЭлемент.Ширина = 20;
	НовыйЭлемент.Высота = 8;
	
#КонецОбласти
	
#КонецОбласти

// Кнопка – Тип(""КнопкаФормы"")
#Область ТипКнопкаФормы   
// Для работы кнопок, необходимо наличие команды.
// Если на форме нет определенной команды, то её необходимо создать программно.

// Создание команды
#Область СозданиеКоманды
// Важно, для работы команды должно быть определено действие.

	//Создание команды
	НоваяКоманда = ЭтаФорма.Команды.Добавить(""ОбщаяКоманда"");
	НоваяКоманда.Заголовок = ""Общая команда"";
	НоваяКоманда.Действие = ""ОбщееДействие""; //указываем только имя процедуры

// Действие - это основная процедура команды, программно его создать не получится. 
#Область ПримерДействияВМодулеФормы

&НаКлиенте
Процедура ОбщееДействие(Команда)
	
	ШифрКоманды = ПолучитьШифрКоманды(ТекущийЭлемент.Имя);
	
	Если ШифрКоманды = 1 Тогда
		Сообщить(""Привет, мир!"");	
	ИначеЕсли ШифрКоманды = 2 Тогда
		Сообщить(Строка(ЭтотОбъект.Номер + ЭтотОбъект.Номер));
	ИначеЕсли ШифрКоманды = 3 Тогда
		Сообщить(Формат(ТекущаяДата(),""ДЛФ=DDT""));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьШифрКоманды(ИмяКнопки)
	Возврат Число(СтрЗаменить(ИмяКнопки,""Кнопка"",""""));
КонецФункции
 
#КонецОбласти
	
#КонецОбласти


//Создание кнопок
#Область СозданиеКнопок
	
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(""Кнопка1"", Тип(""КнопкаФормы""),СтраницаТовары);
	НовыйЭлемент.Заголовок = ""Привет мир!"";
	НовыйЭлемент.ИмяКоманды = ""ОбщаяКоманда"";

	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(""Кнопка2"", Тип(""КнопкаФормы""),СтраницаДополнительно);
	НовыйЭлемент.Заголовок = ""Сложить номер"";
	НовыйЭлемент.ИмяКоманды = ""ОбщаяКоманда"";
	
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(""Кнопка3"", Тип(""КнопкаФормы""),СтраницаДополнительно);
	НовыйЭлемент.Заголовок = ""Текущее время"";
	НовыйЭлемент.ИмяКоманды = ""ОбщаяКоманда"";
  
#КонецОбласти
 
#КонецОбласти

// Таблица формы и колонки
#Область ТаблицаИКолонкиФормы
// Для работы таблицы формы необходимо наличие реквизита ""Таблица значений"" или ""Динамический список"".
// Не забывайти про путь, если таблица находиться в объекте, тогда указываем полный путь,
// пример: ""Объект.Товары"" и так же для колонок ""Объект.Товары.Номенклатура"".

// Создание таблицы
#Область СозданиеТаблицы

ТаблицаФормы = Элементы.Добавить(""МояТаблицаТоваров"", Тип(""ТаблицаФормы""),ЭтотОбъект);
ТаблицаФормы.ПутьКДанным = ""Объект.Товары"";

#КонецОбласти

// Создание колонок
#Область СозданиеКолонокТаблицы

#Область СозданиеКолонокДляВыбораИВвода

//Создаем колонку для выбора и ввода
НовыйЭлемент  = Форма.Элементы.Добавить(""МояТаблицаТоваровНоменклатура"",Тип(""ПолеФормы""),ТаблицаФормы);
НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
НовыйЭлемент.ПутьКДанным = ""Объект.Товары.Номенклатура"";

#КонецОбласти

#Область СозданиеКолонкуДляБулево

//Создаем колонку для булево
НовыйЭлемент  = Форма.Элементы.Добавить(""МояТаблицаТоваровПроведен"",Тип(""ПолеФормы""),ТаблицаФормы);
НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;      
НовыйЭлемент.ПутьКДанным = ""Объект.Товары.Используется"";

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти

// Пример
#Область ПримерПрограммногоСозданияИнтерфейса

&НаСервере
Процедура ПрограмноеСозданиеЭлементовРеквизитовКоманд()
	
//Группы
#Область ПримерСозданиеГруппы
	
	//Пример создания обычной группы без отображения
	ГруппаДатаНомер = ЭтаФорма.Элементы.Добавить(""ГруппаОбычная"", Тип(""ГруппаФормы""),ЭтаФорма);
	ГруппаДатаНомер.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДатаНомер.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаДатаНомер.ОтображатьЗаголовок = ЛОЖЬ; 
	ГруппаДатаНомер.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	//Пример создания обычной группы
	ГруппаШапка = ЭтаФорма.Элементы.Добавить(""ГруппаШапка"", Тип(""ГруппаФормы""),ЭтаФорма);
	ГруппаШапка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаШапка.Заголовок = ""Основные реквизиты"";
	ГруппаШапка.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	ГруппаШапка.ОтображатьЗаголовок = ИСТИНА; 
	ГруппаШапка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаШапка.РастягиватьПоГоризонтали = ИСТИНА;
	
	//Пример создания группы страниц
	ГруппаСтраниц = ЭтаФорма.Элементы.Добавить(""ГруппаСтраницы"", Тип(""ГруппаФормы""),ЭтаФорма);
	ГруппаСтраниц.Вид = ВидГруппыФормы.Страницы;
	ГруппаСтраниц.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	ГруппаСтраниц.РастягиватьПоГоризонтали = ИСТИНА;
	
	//Пример создания страниц
	
	СтраницаТовары = ЭтаФорма.Элементы.Добавить(""СтраницаТовары"", Тип(""ГруппаФормы""),ГруппаСтраниц);
	СтраницаТовары.Вид = ВидГруппыФормы.Страница;
	СтраницаТовары.Заголовок = ""Товары"";
	
	СтраницаДополнительно = ЭтаФорма.Элементы.Добавить(""СтраницаДополнительно"", Тип(""ГруппаФормы""),ГруппаСтраниц);
	СтраницаДополнительно.Вид = ВидГруппыФормы.Страница;
	СтраницаДополнительно.Заголовок = ""Дополнительно"";	

#КонецОбласти	
	
// Создание реквизитов
#Область ПримерСозданиеРеквизитов
	
	ДобавляемыеРеквизиты = Новый Массив; //Определяем массив добавляемых реквизитов
	НовыйРеквизит = Новый РеквизитФормы(""Комментарий"",Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(500))); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит); 
	НовыйРеквизит = Новый РеквизитФормы(""Номер"",Новый ОписаниеТипов(""Число"",Новый КвалификаторыЧисла(10,0))); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы(""Дата"",Новый ОписаниеТипов(""Дата"",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя))); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы(""Наименование"",Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(150))); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	НовыйРеквизит = Новый РеквизитФормы(""ПометкаУдаления"",Новый ОписаниеТипов(""Булево"")); 
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты); //Применяем реквизиты 

#КонецОбласти

//Создание полей
#Область ПримерСозданиеПолей
	
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(""Номер"", Тип(""ПолеФормы""),ГруппаДатаНомер);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = ""Номер"";

	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(""Дата"", Тип(""ПолеФормы""),ГруппаДатаНомер);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = ""Дата"";
	
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(""Наименование"", Тип(""ПолеФормы""),ГруппаШапка);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = ""Наименование"";
	
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(""Комментарий"", Тип(""ПолеФормы""),СтраницаДополнительно);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = ""Комментарий"";
	
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(""ПометкаУдаления"", Тип(""ПолеФормы""),СтраницаДополнительно);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = ""ПометкаУдаления"";

#КонецОбласти

#Область ПримерСозданиеДекорации

	//Декорация надпись
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(""ЗаголовокТовара"", Тип(""ДекорацияФормы""),СтраницаТовары);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок = ""Глобус"";
	
	//Декорация картинка
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(""КартинкаТовара"", Тип(""ДекорацияФормы""),СтраницаТовары);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
	НовыйЭлемент.Картинка = БиблиотекаКартинок.ГеографическаяСхема;
	НовыйЭлемент.РазмерКартинки = РазмерКартинки.Растянуть;
	НовыйЭлемент.Ширина = 20;
	НовыйЭлемент.Высота = 8;
	
#КонецОбласти
	

//Создание команды
#Область ПримерСозданиеКоманды

	НоваяКоманда = ЭтаФорма.Команды.Добавить(""ОбщаяКоманда"");
	НоваяКоманда.Заголовок = ""Общая команда"";
	НоваяКоманда.Действие = ""ОбщееДействие"";

#КонецОбласти

//Создание кнопок
#Область ПримерСозданиеКнопок
	
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(""Кнопка1"", Тип(""КнопкаФормы""),СтраницаТовары);
	НовыйЭлемент.Заголовок = ""Привет мир!"";
	НовыйЭлемент.ИмяКоманды = ""ОбщаяКоманда"";

	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(""Кнопка2"", Тип(""КнопкаФормы""),СтраницаДополнительно);
	НовыйЭлемент.Заголовок = ""Сложить номер"";
	НовыйЭлемент.ИмяКоманды = ""ОбщаяКоманда"";
	
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(""Кнопка3"", Тип(""КнопкаФормы""),СтраницаДополнительно);
	НовыйЭлемент.Заголовок = ""Текущее время"";
	НовыйЭлемент.ИмяКоманды = ""ОбщаяКоманда"";

#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ДобавитьКолонкуНаСервере()
	
	//нРеквизиты = Новый Массив;
    //нРеквизиты.Добавить(Новый РеквизитФормы(""Тест3"", Новый ОписаниеТипов(""Строка""), ""Объект.Тест"", ""Тест3"", Истина));
    //ИзменитьРеквизиты(нРеквизиты);

	ТаблицаФормыВыполненныеРаботы = ЭтаФорма.Элементы.ВыполненныеРаботы;
	участокМестоВставки = ТаблицаФормыВыполненныеРаботы.ПодчиненныеЭлементы[2];
	
	// Элементы.Добавить - если необходимо расположить последним в таблицу
	// Элементы.Вставить - если необходимо расположить под определенным индексом
	
	нЭлементУчасток = Элементы.Вставить(""Участок"", Тип(""ПолеФормы""), ТаблицаФормыВыполненныеРаботы, участокМестоВставки);
	нЭлементУчасток.Вид = ВидПоляФормы.ПолеВвода; 
	нЭлементУчасток.ПутьКДанным = ""Объект.ВыполненныеРаботы._Участок"";
	
	//нЭлементБригада = Элементы.Добавить(""Участок"", Тип(""ПолеФормы""), ТаблицаФормыВыполненныеРаботы);
	//нЭлементБригада.Вид = ВидПоляФормы.ПолеВвода; 
	//нЭлементБригада.ПутьКДанным = ""Объект.ВыполненныеРаботы._Участок"";
	
КонецПроцедуры

// Программно назначить обработчик события +++
// ПРОЦЕДУРА установки события НА СЕРВЕРЕ!!!
ТекЭлемент.УстановитьДействие(""ПриИзменении"", ""ВыполнитьДействиеПриИзмененииДанных"");
//ТекЭлемент.УстановитьДействие(""ПриИзменении"", Новый Действие(""ВыполнитьДействиеПриИзмененииДанных""));

&НаКлиенте
Процедура ВыполнитьДействиеПриИзмененииДанных(Элемент)
    ВыполнитьДействиеПриИзмененииДанныхНаСервере();
КонецПроцедуры


&НаСервере
Процедура ВыполнитьДействиеПриИзмененииДанныхНаСервере()
    // Вставить содержимое обработчика.
КонецПроцедуры
// Программно назначить обработчик события ---



#Область КолонокиВТчВыполненныеРаботы

	ТаблицаФормыВыполненныеРаботы = ЭтаФорма.Элементы.ВыполненныеРаботы;
	участокМестоВставки = ТаблицаФормыВыполненныеРаботы.ПодчиненныеЭлементы[4];
	бригадаМестоВставки = ТаблицаФормыВыполненныеРаботы.ПодчиненныеЭлементы[4];
	// 4, 4 потому что вставка первого на индекс 4 затем на тоже место вставка второго (так они будут расположены рядом)
		
	нЭлементУчасток = Элементы.Вставить(""Участок"", Тип(""ПолеФормы""), ТаблицаФормыВыполненныеРаботы, участокМестоВставки); 
	нЭлементУчасток.Вид = ВидПоляФормы.ПолеВвода; 
	нЭлементУчасток.ПутьКДанным = ""Объект.ВыполненныеРаботы._Участок"";
	
	нЭлементБригада = Элементы.Вставить(""Бригада"", Тип(""ПолеФормы""), ТаблицаФормыВыполненныеРаботы, бригадаМестоВставки);
	нЭлементБригада.Вид = ВидПоляФормы.ПолеВвода; 
	нЭлементБригада.ПутьКДанным = ""Объект.ВыполненныеРаботы._Бригада"";
		
#КонецОбласти"}
},
{0,
{"ОбщийМодульСГотовымиФункциями_ЭлементыРеквизитыПрограммно",0,0,"","// (Источник: https://infostart.ru/1c/articles/1118319/)
//
// Бонус – общий модуль с готовыми функциями

// 1. Создайте новый общий модуль:
#Область ОписаниеОбщегоМодуля

 *Имя:          проЭлементы
 *Клиент:       Истина
 *Сервер:       Истина
 *ВызовСервера: Истина
 
#КонецОбласти

// 2. Скопируйте в него код:
#Область ОбщийМодуль_проЭлементы
///////////////////////////////////////////////////////////////////////////////////
//Модуль - Программное создание элементов формы
///////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////
//Создание описание типов

&НаСервере
Функция ОписаниеТипаСтрока(ДлинаСтроки = 0) Экспорт
	Возврат Новый ОписаниеТипов(""Строка"",,кСтрока(ДлинаСтроки));
КонецФункции

&НаСервере
Функция ОписаниеТипаЧисло(ДлинаЧисла = 15,ТочностьЧисла = 2) Экспорт
	Возврат Новый ОписаниеТипов(""Число"",кЧисло(ДлинаЧисла,ТочностьЧисла));
КонецФункции

//ДатаВремя - строка, значения ""Дата"", ""Время"", ""ДатаВремя""
&НаСервере
Функция ОписаниеТипаДатаВремя(ДатаВремя = ""ДатаВремя"") Экспорт
	Возврат Новый ОписаниеТипов(""Дата"",,,кДатаВремя(ДатаВремя));
КонецФункции


///////////////////////////////////////////////////////////////////////////////////
//Создание квалификаторов

&НаСервере
Функция кСтрока(ДлинаСтроки = 0) Экспорт
	Возврат Новый КвалификаторыСтроки(ДлинаСтроки);
КонецФункции

&НаСервере
Функция кЧисло(ДлинаЧисла = 15,ТочностьЧисла = 2) Экспорт
	Возврат Новый КвалификаторыЧисла(ДлинаЧисла,ТочностьЧисла);
КонецФункции

//ДатаВремя - строка, значения ""Дата"", ""Время"", ""ДатаВремя""
&НаСервере
Функция кДатаВремя(ДатаВремя = ""ДатаВремя"") Экспорт
	Возврат Новый КвалификаторыДаты(ЧастиДаты[ДатаВремя]);
КонецФункции


///////////////////////////////////////////////////////////////////////////////////
//Создание реквизитов

//Если требуется создать один реквизит
&НаСервере
Процедура СоздатьРеквизит(ИмяРеквизита,ОписаниеТипа,ТекущаяФорма) Экспорт
	
	структураРеквизитов = Новый Структура;
	структураРеквизитов.Вставить(ИмяРеквизита,ОписаниеТипа);
	СоздатьРеквизиты(структураРеквизитов,ТекущаяФорма); 
	
КонецПроцедуры

//Если требуется создать несколько реквизитов
&НаСервере
Процедура СоздатьРеквизиты(структураРеквизитов,ТекущаяФорма) Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого тРеквизит Из структураРеквизитов Цикл 
		НовыйРеквизит = Новый РеквизитФормы(тРеквизит.Ключ,тРеквизит.Значение); 
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит); 
	КонецЦикла;
	ТекущаяФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты); 
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////
//Создание элементов

&НаСервере
Функция СоздатьОбычнуюГруппуБезОтображения(ЭтаФорма,
	ИмяГруппы,
	РодительГруппы,
	ГруппировкаОбычнойГруппы = 0,
	РастягиватьГоризонтально = 0,
	РастягиватьВертикально = 0,
	СтруктураСвойств = Неопределено,
	ЭлементПеред = Неопределено) Экспорт
	
	Перем ВидГруппы;
	
	Если СтруктураСвойств = Неопределено Тогда
		СтруктураСвойств = Новый Структура;
	КонецЕсли;	
	
	Если ЭлементПеред = Неопределено Тогда
		НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяГруппы, Тип(""ГруппаФормы""),РодительГруппы);
	Иначе
		НовыйЭлемент = ЭтаФорма.Элементы.Вставить(ИмяГруппы, Тип(""ГруппаФормы""),РодительГруппы,ЭлементПеред);		
	КонецЕсли;
	                  
	НовыйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НовыйЭлемент.Отображение = ОтображениеОбычнойГруппы.Нет;
	НовыйЭлемент.ОтображатьЗаголовок = ЛОЖЬ;
	
	Если ГруппировкаОбычнойГруппы = 1 Тогда
		НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;		
	ИначеЕсли ГруппировкаОбычнойГруппы = 2 Тогда
		НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;	
	ИначеЕсли ГруппировкаОбычнойГруппы = 3 Тогда
		НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;			
	КонецЕсли;
	
	Если РастягиватьГоризонтально = 1 Тогда
		НовыйЭлемент.РастягиватьПоГоризонтали = ИСТИНА;	
	ИначеЕсли РастягиватьГоризонтально = 2 Тогда
		НовыйЭлемент.РастягиватьПоГоризонтали = ЛОЖЬ;	
	КонецЕсли;	
	
	Если РастягиватьВертикально = 1 Тогда
		НовыйЭлемент.РастягиватьПоВертикали = ИСТИНА;	
	ИначеЕсли РастягиватьВертикально = 2 Тогда
		НовыйЭлемент.РастягиватьПоВертикали = ЛОЖЬ;	
	КонецЕсли;	

	Для Каждого Элемента Из СтруктураСвойств Цикл
		НовыйЭлемент[Элемента.Ключ] = Элемента.Значение;	
	КонецЦикла;
	
	Возврат НовыйЭлемент;
	
КонецФункции

&НаСервере
Функция СоздатьОбычнуюГруппу(ЭтаФорма,
	ИмяГруппы,
	РодительГруппы,
	Заголовок = """",
	ГруппировкаОбычнойГруппы = 0,
	РастягиватьГоризонтально = 0,
	РастягиватьВертикально = 0,
	СтруктураСвойств = Неопределено,
	ЭлементПеред = Неопределено) Экспорт
	
	Перем ВидГруппы;
	
	Если СтруктураСвойств = Неопределено Тогда
		СтруктураСвойств = Новый Структура;
	КонецЕсли;	
	
	Если ЭлементПеред = Неопределено Тогда
		НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяГруппы, Тип(""ГруппаФормы""),РодительГруппы);
	Иначе
		НовыйЭлемент = ЭтаФорма.Элементы.Вставить(ИмяГруппы, Тип(""ГруппаФормы""),РодительГруппы,ЭлементПеред);		
	КонецЕсли;
	                  
	НовыйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НовыйЭлемент.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	НовыйЭлемент.ОтображатьЗаголовок = ИСТИНА;
	
	Если ГруппировкаОбычнойГруппы = 1 Тогда
		НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;		
	ИначеЕсли ГруппировкаОбычнойГруппы = 2 Тогда
		НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;	
	ИначеЕсли ГруппировкаОбычнойГруппы = 3 Тогда
		НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;			
	КонецЕсли;
	
	Если РастягиватьГоризонтально = 1 Тогда
		НовыйЭлемент.РастягиватьПоГоризонтали = ИСТИНА;	
	ИначеЕсли РастягиватьГоризонтально = 2 Тогда
		НовыйЭлемент.РастягиватьПоГоризонтали = ЛОЖЬ;	
	КонецЕсли;	
	
	Если РастягиватьВертикально = 1 Тогда
		НовыйЭлемент.РастягиватьПоВертикали = ИСТИНА;	
	ИначеЕсли РастягиватьВертикально = 2 Тогда
		НовыйЭлемент.РастягиватьПоВертикали = ЛОЖЬ;	
	КонецЕсли;	

	Если Заголовок <> """" Тогда НовыйЭлемент.Заголовок = Заголовок КонецЕсли;
	
	Для Каждого Элемента Из СтруктураСвойств Цикл
		НовыйЭлемент[Элемента.Ключ] = Элемента.Значение;	
	КонецЦикла;
	
	Возврат НовыйЭлемент;
	
КонецФункции

&НаСервере
Функция СоздатьГруппуСтраницы(ЭтаФорма,
	ИмяГруппы,
	РодительГруппы,
	РастягиватьГоризонтально = 0,
	РастягиватьВертикально = 0,
	ПриСменеСтраницы = """",
	СтруктураСвойств = Неопределено,
	ЭлементПеред = Неопределено) Экспорт
	
	Перем ВидГруппы;
	
	Если СтруктураСвойств = Неопределено Тогда
		СтруктураСвойств = Новый Структура;
	КонецЕсли;	
	
	Если ЭлементПеред = Неопределено Тогда
		НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяГруппы, Тип(""ГруппаФормы""),РодительГруппы);
	Иначе
		НовыйЭлемент = ЭтаФорма.Элементы.Вставить(ИмяГруппы, Тип(""ГруппаФормы""),РодительГруппы,ЭлементПеред);		
	КонецЕсли;
	                  
	НовыйЭлемент.Вид = ВидГруппыФормы.Страницы;
		
	Если РастягиватьГоризонтально = 1 Тогда
		НовыйЭлемент.РастягиватьПоГоризонтали = ИСТИНА;	
	ИначеЕсли РастягиватьГоризонтально = 2 Тогда
		НовыйЭлемент.РастягиватьПоГоризонтали = ЛОЖЬ;	
	КонецЕсли;	
	
	Если РастягиватьВертикально = 1 Тогда
		НовыйЭлемент.РастягиватьПоВертикали = ИСТИНА;	
	ИначеЕсли РастягиватьВертикально = 2 Тогда
		НовыйЭлемент.РастягиватьПоВертикали = ЛОЖЬ;	
	КонецЕсли;	
	
	Если ПриСменеСтраницы <> """" Тогда НовыйЭлемент.ПриСменеСтраницы = ПриСменеСтраницы КонецЕсли;	
	
	Для Каждого Элемента Из СтруктураСвойств Цикл
		НовыйЭлемент[Элемента.Ключ] = Элемента.Значение;	
	КонецЦикла;
	
	Возврат НовыйЭлемент;
	
КонецФункции

&НаСервере
Функция СоздатьСтраницу(ЭтаФорма,
	ИмяСтраницы,
	ГруппаСтраницы,
	Заголовок = """",
	ГруппировкаОбычнойГруппы = 0,
	РастягиватьГоризонтально = 0,
	РастягиватьВертикально = 0,
	СтруктураСвойств = Неопределено,
	СтраницаПеред = Неопределено) Экспорт
	
	Перем ВидГруппы;
	
	Если СтруктураСвойств = Неопределено Тогда
		СтруктураСвойств = Новый Структура;
	КонецЕсли;	
	
	Если СтраницаПеред = Неопределено Тогда
		НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяСтраницы, Тип(""ГруппаФормы""),ГруппаСтраницы);
	Иначе
		НовыйЭлемент = ЭтаФорма.Элементы.Вставить(ИмяСтраницы, Тип(""ГруппаФормы""),ГруппаСтраницы,СтраницаПеред);		
	КонецЕсли;
	                  
	НовыйЭлемент.Вид = ВидГруппыФормы.Страница;
	
	Если ГруппировкаОбычнойГруппы = 1 Тогда
		НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;		
	ИначеЕсли ГруппировкаОбычнойГруппы = 2 Тогда
		НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;	
	ИначеЕсли ГруппировкаОбычнойГруппы = 3 Тогда
		НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;			
	КонецЕсли;
	
	Если РастягиватьГоризонтально = 1 Тогда
		НовыйЭлемент.РастягиватьПоГоризонтали = ИСТИНА;	
	ИначеЕсли РастягиватьГоризонтально = 2 Тогда
		НовыйЭлемент.РастягиватьПоГоризонтали = ЛОЖЬ;	
	КонецЕсли;	
	
	Если РастягиватьВертикально = 1 Тогда
		НовыйЭлемент.РастягиватьПоВертикали = ИСТИНА;	
	ИначеЕсли РастягиватьВертикально = 2 Тогда
		НовыйЭлемент.РастягиватьПоВертикали = ЛОЖЬ;	
	КонецЕсли;	

	Если Заголовок <> """" Тогда НовыйЭлемент.Заголовок = Заголовок КонецЕсли;
	
	Для Каждого Элемента Из СтруктураСвойств Цикл
		НовыйЭлемент[Элемента.Ключ] = Элемента.Значение;	
	КонецЦикла;
	
	Возврат НовыйЭлемент;
	
КонецФункции

&НаСервере
Функция СоздатьГруппу(ЭтаФорма,
	ИмяГруппы,
	РодительГруппы,	
	СтруктураСвойств,
	ЭлементПеред = Неопределено) Экспорт
	
	Перем ВидГруппы;
	
	Если ЭлементПеред = Неопределено Тогда
		НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяГруппы, Тип(""ГруппаФормы""),РодительГруппы);
	Иначе
		НовыйЭлемент = ЭтаФорма.Элементы.Вставить(ИмяГруппы, Тип(""ГруппаФормы""),РодительГруппы,ЭлементПеред);		
	КонецЕсли;
	                  	
	Для Каждого Элемента Из СтруктураСвойств Цикл
		НовыйЭлемент[Элемента.Ключ] = Элемента.Значение;	
	КонецЦикла;
	
	Возврат НовыйЭлемент;
	
КонецФункции

//Общая функция создания элемента Поле
&НаСервере
Функция СоздатьПоле(ЭтаФорма,
	ИмяПоля,
	РодительПоля,
	ШифрВидаПоля = 0,
	ПутьКДанным = """",
	СтруктураСвойств = Неопределено,
	СтруктураСобытий = Неопределено,
	ЭлементПеред = Неопределено) Экспорт
	
	Перем ВидПоля;
	
	Если ШифрВидаПоля <> 0 Тогда
		НаборВидов = ""ПолеВвода
		|ПолеФлажка		
		|ПолеИндикатора
		|ПолеПереключателя
		|ПолеПериода
		|ПолеHTMLДокумента"";
		ВидПоля = СокрЛП(СтрПолучитьСтроку(НаборВидов,ШифрВидаПоля));
	КонецЕсли;
	
	Если СтруктураСвойств = Неопределено Тогда
		СтруктураСвойств = Новый Структура;
	КонецЕсли;	
	
	Если СтруктураСобытий = Неопределено Тогда
		СтруктураСобытий = Новый Структура;
	КонецЕсли;
	
	Если ЭлементПеред = Неопределено Тогда
		НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяПоля, Тип(""ПолеФормы""),РодительПоля);
	Иначе
		НовыйЭлемент = ЭтаФорма.Элементы.Вставить(ИмяПоля, Тип(""ПолеФормы""),РодительПоля,ЭлементПеред);		
	КонецЕсли;
	
	Если ШифрВидаПоля <> 0 Тогда НовыйЭлемент.Вид = ВидПоляФормы[ВидПоля] КонецЕсли;
	Если ПутьКДанным <> """" Тогда НовыйЭлемент.ПутьКДанным = ПутьКДанным КонецЕсли;
	
	Для Каждого Свойства Из СтруктураСвойств Цикл
		НовыйЭлемент[Свойства.Ключ] = Свойства.Значение;	
	КонецЦикла;
	
	Для Каждого События Из СтруктураСобытий Цикл
		НовыйЭлемент.УстановитьДействие(События.Ключ,События.Значение);	
	КонецЦикла;
	
	Возврат НовыйЭлемент;
	
КонецФункции

//Быстрая функция по созданию декорации надпись
&НаСервере
Функция СоздатьДекорациюНадпись(ЭтаФорма,
	ИмяДекорации,
	РодительДекорации,
	ЗаголовокДекорации,
	РастягиватьПоГоризонтали = ИСТИНА,
	ЭлементПеред = Неопределено) Экспорт
	
	Если ЭлементПеред = Неопределено Тогда
		НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяДекорации, Тип(""ДекорацияФормы""),РодительДекорации);
	Иначе
		НовыйЭлемент = ЭтаФорма.Элементы.Вставить(ИмяДекорации, Тип(""ДекорацияФормы""),РодительДекорации,ЭлементПеред);		
	КонецЕсли;
	
	НовыйЭлемент.Заголовок = ЗаголовокДекорации;
	НовыйЭлемент.РастягиватьПоГоризонтали = РастягиватьПоГоризонтали;
	
	Возврат НовыйЭлемент;
	
КонецФункции

//Общая функция создания декорации с видом надпись и картинка
&НаСервере
Функция СоздатьДекорацию(ЭтаФорма,
	ИмяДекорации,
	РодительДекорации,
	СтруктураСвойств = Неопределено,
	СтруктураСобытий = Неопределено,
	ЭлементПеред = Неопределено) Экспорт
	
	Если СтруктураСвойств = Неопределено Тогда СтруктураСвойств = Новый Структура; КонецЕсли;
	Если СтруктураСобытий = Неопределено Тогда СтруктураСобытий = Новый Структура; КонецЕсли;
	
	Если ЭлементПеред = Неопределено Тогда
		НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяДекорации, Тип(""ДекорацияФормы""),РодительДекорации);
	Иначе
		НовыйЭлемент = ЭтаФорма.Элементы.Вставить(ИмяДекорации, Тип(""ДекорацияФормы""),РодительДекорации,ЭлементПеред);		
	КонецЕсли;
	
	Для Каждого Свойства Из СтруктураСвойств Цикл
		НовыйЭлемент[Свойства.Ключ] = Свойства.Значение;	
	КонецЦикла;
	
	Для Каждого События Из СтруктураСобытий Цикл
		НовыйЭлемент.УстановитьДействие(События.Ключ,События.Значение);	
	КонецЦикла;
	
	Возврат НовыйЭлемент;
	
КонецФункции

&НаСервере
Функция СоздатьКнопку(ЭтаФорма,
	ИмяКнопки,
	РодительКнопки,
	ЗаголовокКнопки = """",
	ИмяКоманды = """",
	СтруктураСвойств = Неопределено,	
	ЭлементПеред = Неопределено) Экспорт
	
	Если СтруктураСвойств = Неопределено Тогда СтруктураСвойств = Новый Структура; КонецЕсли;
	
	Если ЭлементПеред = Неопределено Тогда
		НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяКнопки, Тип(""КнопкаФормы""),РодительКнопки);
	Иначе
		НовыйЭлемент = ЭтаФорма.Элементы.Вставить(ИмяКнопки, Тип(""КнопкаФормы""),РодительКнопки,ЭлементПеред);		
	КонецЕсли;
	
	Если ЗаголовокКнопки <> """" Тогда НовыйЭлемент.Заголовок = ЗаголовокКнопки; КонецЕсли;
	Если ИмяКоманды <> """" Тогда НовыйЭлемент.ИмяКоманды = ИмяКоманды; КонецЕсли;
	
	Для Каждого Свойства Из СтруктураСвойств Цикл
		НовыйЭлемент[Свойства.Ключ] = Свойства.Значение;	
	КонецЦикла;

	Возврат НовыйЭлемент;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////////
//Создание команды

&НаСервере
Процедура СоздатьКоманду(ЭтаФорма,ИмяКоманды,КомандаЗаголовок,КомандаДействия) Экспорт
    НоваяКоманда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
    НоваяКоманда.Заголовок = КомандаЗаголовок;
	НоваяКоманда.Действие = КомандаДействия;
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////
//Создание динамического списка

&НаСервере
Процедура СозданиеДинамическогоСписка(ЭтаФорма,
	ИмяСписка = ""Список"", 			//тип строка - имя будущего списка на форме и реквизита
	ТекстЗапроса = """", 				//тип строка - запрос, если он не указан, необходимо указать таблицу
	МассивКолонок,                  //тип массив - массив создаваемых колонок, значения тип строка. Пример: ""Д,ДоговораКонтрагента"" значит будет создана колонка
									//				с заголовком ""Д"" и колонкой списка ""ДоговораКонтрагента"". Если указать просто ""ДоговораКонтрагента"", 
									//				заголовок будет идентичен заголовку по умолчанию типа ""Договор контрагента"".
	СписокДействий = Неопределено,  //типа структура - структура содержит действия (свойства) динамического списка, можно указать только те которые необходимы.
									//				пример: СписокДействий = Новый Структура(""Выбор,ПриАктивизацииСтроки"",""СписокВыбор"",""СписокПриАктивизацииСтроки"")
	ТаблицаСписка = """",				//тип строка - содержит имя основной таблицы, пример: ""Документ.РеализацияТоваровУслуг""	
	ДобавитьВ = """",                 //тип строка - имя элемента на который будет размещен список, если пустое, тогда добавляется на форму
	ВставитьПеред = """",             //тип строка - имя элемента перед которым будет размещен список, если пустое, будет просто добавлен в конец
	СвояКоманднаяПанель = ЛОЖЬ,     //тип булево - если ИСТИНА, скрывает стандартную панель и создает свою пустую для будушего наполнения ИмяСписка+""КоманднаяПанель2""
	ПараметрыЗапроса = Неопределено)//тип структура - содержит перечень параметров, если они используются в запросе.
	
	//Защита от дурака
	Если ТекстЗапроса = """" И ТаблицаСписка = """" Тогда Сообщить(""Ошибка формирования динамического списка, укажите запрос или таблицу""); Возврат; КонецЕсли;
																									
	//Создаем свою командную панель, тот случай когда я не нашел способа снять галочку ""Автозаполнение""
	Если СвояКоманднаяПанель Тогда
		Если ВставитьПеред = """" Тогда
			ГруппаДинамическогоСписка  = ЭтаФорма.Элементы.Добавить(""Группа"" + ИмяСписка 
			+ ""CоСвоейКоманднойПанелью"",Тип(""ГруппаФормы""),?(ДобавитьВ = """",ЭтаФорма,ЭтаФорма.Элементы[ДобавитьВ]));
		Иначе
			ГруппаДинамическогоСписка  = ЭтаФорма.Элементы.Вставить(""Группа"" + ИмяСписка 
			+ ""CоСвоейКоманднойПанелью"",Тип(""ГруппаФормы""),?(ДобавитьВ = """",ЭтаФорма,ЭтаФорма.Элементы[ДобавитьВ]),ЭтаФорма.Элементы[ВставитьПеред]);			
		КонецЕсли;
		ГруппаДинамическогоСписка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаДинамическогоСписка.ОтображатьЗаголовок = Ложь;
		ГруппаДинамическогоСписка.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаДинамическогоСписка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		КоманднаяПанельСписка  = ЭтаФорма.Элементы.Добавить(ИмяСписка + ""КоманднаяПанель2"",Тип(""ГруппаФормы""),ГруппаДинамическогоСписка);
		КоманднаяПанельСписка.Вид = ВидГруппыФормы.КоманднаяПанель;			
	КонецЕсли;
									
	//Создаем реквизит формы
	ТипыРеквизита = Новый Массив;                             
	ТипыРеквизита.Добавить(Тип(""ДинамическийСписок""));
	ОписаниеТиповДляРеквизита = Новый ОписаниеТипов(ТипыРеквизита); 
	ДинамическийСписок = Новый РеквизитФормы(ИмяСписка, ОписаниеТиповДляРеквизита,,"""",ЛОЖЬ); //Имя реквизита
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(ДинамическийСписок);        
	
	//Задаем свойства реквизиту
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);        
	РеквизитДинамическийСписок = ЭтаФорма[ИмяСписка]; //Имя реквизита
	Если ТекстЗапроса = """" Тогда
		РеквизитДинамическийСписок.ПроизвольныйЗапрос = ЛОЖЬ;
		РеквизитДинамическийСписок.ОсновнаяТаблица = ТаблицаСписка;
	Иначе
		РеквизитДинамическийСписок.ПроизвольныйЗапрос = ИСТИНА;
		РеквизитДинамическийСписок.ТекстЗапроса = ТекстЗапроса;
		Если ТаблицаСписка <> """" Тогда РеквизитДинамическийСписок.ОсновнаяТаблица = ТаблицаСписка; КонецЕсли;		
	КонецЕсли;
	
	//Заполняем параметры если они были указаны
	Если ПараметрыЗапроса <> Неопределено Тогда
		Для Каждого Параметра из ПараметрыЗапроса Цикл
			РеквизитДинамическийСписок.Параметры.УстановитьЗначениеПараметра(Параметра.Ключ,Параметра.Значение);	
		КонецЦикла;		 
	КонецЕсли;
	
	//Размещаем реквизит на форме
	Если ЛОЖЬ
		ИЛИ ВставитьПеред = """" 
		ИЛИ СвояКоманднаяПанель //Если своя командная панель тогда нет логики уже в параметре ВставитьПеред
		Тогда
		ТаблицаФормы = ЭтаФорма.Элементы.Добавить(ИмяСписка,Тип(""ТаблицаФормы""),
		?(СвояКоманднаяПанель,ГруппаДинамическогоСписка,?(ДобавитьВ = """",ЭтаФорма,ЭтаФорма.Элементы[ДобавитьВ])));
	Иначе
		ТаблицаФормы = ЭтаФорма.Элементы.Вставить(ИмяСписка,Тип(""ТаблицаФормы""),
		?(ДобавитьВ = """",ЭтаФорма,ЭтаФорма.Элементы[ДобавитьВ]),ЭтаФорма.Элементы[ВставитьПеред]);	
	КонецЕсли;		
	ТаблицаФормы.ПутьКДанным = ИмяСписка; //Имя реквизита 
	
	//Если своя панель тогда скрываем стандартную
	Если СвояКоманднаяПанель Тогда
		ЭтаФорма.Элементы[ИмяСписка].ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	КонецЕсли;

	//Создание колонок на основание МассивКолонок
	Для Каждого Элемента Из МассивКолонок Цикл
		ПараметрыКолонки = СтрЗаменить(Элемента,"","",Символы.ПС);
		Если СтрЧислоСтрок(ПараметрыКолонки) > 1 Тогда
			Заголовок = СтрПолучитьСтроку(ПараметрыКолонки, 1);
			ИмяКолонки = СтрПолучитьСтроку(ПараметрыКолонки, 2);
		Иначе
			Заголовок = """";
			ИмяКолонки = ПараметрыКолонки; 
		КонецЕсли;	
		НоваяКолонкаТаблицы = ЭтаФорма.Элементы.Добавить(ИмяСписка + ИмяКолонки, Тип(""ПолеФормы""), ТаблицаФормы);
		Если Заголовок <> """" Тогда НоваяКолонкаТаблицы.Заголовок = Заголовок; КонецЕсли;
		НоваяКолонкаТаблицы.ПутьКДанным = ИмяСписка + ""."" + ИмяКолонки; 	
	КонецЦикла;
	
	//Задаем действия (События) на основание СписокДействий, если он определен
	Если СписокДействий <> Неопределено Тогда 	
		ПереченьСвойств = ""ПриИзменении
						|Выбор
						|ПриАктивизацииСтроки
						|ВыборЗначения
						|ПриАктивизацииПоля
						|ПриАктивизацииЯчейки
						|ПередНачаломДобавления
						|ПередНачаломИзменения
						|ПередУдалением
						|ПриНачалеРедактирования
						|ПередОкончаниемРедактирования
						|ПриОкончанииРедактирования
						|ОбработкаВыбора
						|ПередРазворачиванием
						|ПередСворачиванием
						|ПослеУдаления
						|ПриСменеТекущегоРодителя
						|ОбработкаЗаписиНового
						|ПриСохраненииПользовательскихНастроекНаСервере
						|ПередЗагрузкойПользовательскихНастроекНаСервере
						|ПриЗагрузкеПользовательскихНастроекНаСервере
						|ПриОбновленииСоставаПользовательскихНастроекНаСервере
						|ОбработкаЗапросаОбновления
						|ПриПолученииДанныхНаСервере
						|НачалоПеретаскивания
						|ПроверкаПеретаскивания
						|ОкончаниеПеретаскивания
						|Перетаскивание"";
		Для Счетчик = 1 по 28 Цикл
			ИмяСвойства = СтрПолучитьСтроку(ПереченьСвойств, Счетчик);
			ЭтаФорма.Элементы[ИмяСписка].УстановитьДействие(ИмяСвойства,?(СписокДействий.Свойство(ИмяСвойства),СписокДействий[ИмяСвойства],""""));
		КонецЦикла;
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ПримерИспользованияОбщегоМодуля

&НаСервере
Процедура СозданиеЭлементовФормыЧерезОбщийМодуль()

	//Создание обычной группы без отображения
	ГруппаДатаНомер = проЭлементы.СоздатьОбычнуюГруппуБезОтображения(ЭтаФорма,""ГруппаДатаНомер"",ЭтаФорма,3);
	
	//Создание обычной группы
	ГруппаШапка = проЭлементы.СоздатьОбычнуюГруппу(ЭтаФорма,""ГруппаШапка"",ЭтаФорма,""Основные реквизиты"",1);

	//Создание группы страниц
	ГруппаСтраницы = проЭлементы.СоздатьГруппуСтраницы(ЭтаФорма,""ГруппаСтраницы"",ЭтаФорма,1);
	
	//Создание страниц	
	СтраницаТовары = проЭлементы.СоздатьСтраницу(ЭтаФорма,""СтраницаТовары"",ГруппаСтраницы,""Товары"");
	СтраницаДополнительно = проЭлементы.СоздатьСтраницу(ЭтаФорма,""СтраницаДополнительно"",ГруппаСтраницы,""Дополнительно"");
	
	//Пример создания одного реквизита
	проЭлементы.СоздатьРеквизит(""Комментарий"",проЭлементы.ОписаниеТипаСтрока(200),ЭтаФорма);
	
	//Пример создания нескольких реквизитов
	структураРеквизитов = Новый Структура;
	структураРеквизитов.Вставить(""Номер"",проЭлементы.ОписаниеТипаЧисло(10,0));
	структураРеквизитов.Вставить(""Дата"",проЭлементы.ОписаниеТипаДатаВремя());
	структураРеквизитов.Вставить(""Наименование"",проЭлементы.ОписаниеТипаСтрока(100));
	структураРеквизитов.Вставить(""ПометкаУдаления"",Новый ОписаниеТипов(""Булево""));
	проЭлементы.СоздатьРеквизиты(структураРеквизитов,ЭтаФорма);
	
	//Создание полей
	
	проЭлементы.СоздатьПоле(ЭтаФорма,""Номер"",ГруппаДатаНомер,1,""Номер"");
	
	проЭлементы.СоздатьПоле(ЭтаФорма,""Дата"",ГруппаДатаНомер,1,""Дата"");
	
	СтруктураСвойства = Новый Структура;
	СтруктураСвойства.Вставить(""РастягиватьПоГоризонтали"",ИСТИНА);
	проЭлементы.СоздатьПоле(ЭтаФорма,""Наименование"",ГруппаШапка,1,""Наименование"",СтруктураСвойства);
	
	проЭлементы.СоздатьПоле(ЭтаФорма,""Комментарий"",СтраницаДополнительно,1,""Комментарий"");	
	
	проЭлементы.СоздатьПоле(ЭтаФорма,""ПометкаУдаления"",СтраницаДополнительно,2,""ПометкаУдаления"");	
	
	//Создаем декорацию - отдельная функция для надписи
	проЭлементы.СоздатьДекорациюНадпись(ЭтаФорма,""ЗаголовокТовара"",СтраницаТовары,""Глобус"");
	
	//Создаем декорацию универсальной функцией, картинка
	СтруктураСвойства = Новый Структура;
	СтруктураСвойства.Вставить(""Вид"",ВидДекорацииФормы.Картинка);
	СтруктураСвойства.Вставить(""Картинка"",БиблиотекаКартинок.ГеографическаяСхема);	
	СтруктураСвойства.Вставить(""РазмерКартинки"",РазмерКартинки.Растянуть);
	СтруктураСвойства.Вставить(""Ширина"",20);
	СтруктураСвойства.Вставить(""Высота"",8);
	проЭлементы.СоздатьДекорацию(ЭтаФорма,""КартинкаТовара"",СтраницаТовары,СтруктураСвойства);
	
	//Создаем общую команду
	проЭлементы.СоздатьКоманду(ЭтаФорма,""ОбщаяКоманда"",""Общая команда"",""ОбщееДействие"");
	
	//Создание кнопок
	проЭлементы.СоздатьКнопку(ЭтаФорма,""Кнопка1"",СтраницаТовары,""Привет мир!"",""ОбщаяКоманда"");
	проЭлементы.СоздатьКнопку(ЭтаФорма,""Кнопка2"",СтраницаДополнительно,""Сложить номер"",""ОбщаяКоманда"");
	проЭлементы.СоздатьКнопку(ЭтаФорма,""Кнопка3"",СтраницаДополнительно,""Текущее время"",""ОбщаяКоманда"");
	
КонецПроцедуры

#КонецОбласти"}
},
{0,
{"ГорячиеКлавиши",0,0,"","Кодирование:
Ctrl+Пробел - вызов подсказки
Ctrl+Q - вызов шаблона
Ctrl+F1 - поиск в синтакс-помощнике
Ctrl + L - удалить текущую строку
Alt+Shift+F - отформатировать код
Исследование:
F12 - ставим курсор на процедуре или функции и переходим к определению процедуры или функций.
Ctrl+(минус) - перемещает назад в модуль, из которого ушли через F12
Ctrl+T - найти в дереве конфигурации
Ctrl+F - найти объект метаданных или его реквизит в дереве метаданных.
Отладка:
F5 - начать/продолжить отладку
F9 - установить/снять точку останова
F10 - шагнуть через процедуру или функцию, на следующую строку кода
F11 - идти по порядку с заходом во все процедуры и функции.
Alt+F9 - список точек останова
Shift+F9 - вычислить выражение
Ctrl+Shift+F9 - отк./вкл. точку остан.
Ctrl+Alt+W - открыть табло
Ctrl+Alt+C - открыть стек вызовов
Закладки:
Alt+F2 - установить/снять закладку
F2 - к следующей закладке
Shift+F2 - к предыдущей закладке
Быстрый переход по Процедурам, Функциям, Условиям, Циклам:
Ctrl+[ - перейти назад
Ctrl+] - перейти вперед
Ctlr+G - перемещения к строке кода
Окно сообщений:
Ctrl+Alt+Z - очистить.
Ctrl+Shift+Z - очистить и закрыть


Рассмотрим более подробно:

Глобальные действия
Создать новый документ - Ctrl + N
Открыть существующий документ - Ctrl + O
Активизировать поле поиска в командной панели - Ctrl + D
Открыть ""Глобальный поиск по текстам"" - Ctrl + Shift + F
Открыть ""Результаты глобального поиска по текстам"" - Ctrl + Shift + H
Запустить 1С:Предприятие без отладки - Ctrl + F5
Открыть окно ""Конфигурация"" - Ctrl + Shift + С
Обновить конфигурацию БД - F7
Открыть ""Шаблоны текста"" - Ctrl + Shift + T
Открыть встроенный ""Калькулятор"" системы 1С:Предприятие - Ctrl + F2
Открыть ""Свойства"" - Alt + Enter
Открыть ""Дополнительно"" - Shift + Alt + Enter
Открыть ""Служебные сообщения"" - Ctrl + Alt + O
Закрыть ""Служебные сообщения"" - Ctrl + Shift + Z
Очистить служебные сообщения - Ctrl + Alt + Z
Открыть ""Справку"" - F1
Открыть ""Содержание справки"" - Shift + F1
Открыть ""Индекс справки"" - Shift + Alt + F1
Открыть ""Поиск по справке"" - Ctrl + Alt + F1
Открыть ""Синтакс-Помощник - Ctrl + Shift + F1
Поиск по индексу в ""Синтакс-Помощнике"" - Ctrl + F1

Общие действия
Удалить - Del
Добавить - Ins
Сохранить активный документ - Ctrl + S
Печать активного документа - Ctrl + P
Печать на текущий принтер - Ctrl + Shift + P
Копировать в буфер обмена - Ctrl + C - Ctrl + Ins
Вырезать в буфер обмена - Ctrl + X - Shift + Del
Вставить из буфера обмена - Ctrl + V - Shift + Ins
Добавить к буферу обмена - Shift + Num+
Вычесть из буфера обмена - Shift + Num-
Выделить все - Ctrl + A
Отменить последнее действие - Ctrl + Z - Alt + BackSpace
Вернуть отмененное действие - Ctrl + Y - Shift + Alt + BackSpace
Найти - Ctrl + F
Найти следующий - F3
Найти следующий выделенный - Ctrl + F3
Найти предыдущий - Shift + F3
Найти предыдущий выделенный - Ctrl + Shift + F3
Заменить - Ctrl + H
Найти в дереве - Ctrl + T
Следующий элемент в результатах поиска и окне сообщений - F8
Предыдущий элемент в результатах поиска и окне сообщений - Shift + F8
Развернуть (узел дерева, группу табличного документа, группировку модуля) - Ctrl + Num+
Свернуть (узел дерева, группу табличного документа, группировку модуля) - Ctrl + Num-
Развернуть (узел дерева, группу табличного документа, группировку модуля) и все подчиненные - Ctrl + Alt + Num+
Свернуть (узел дерева, группу табличного документа, группировку модуля) и все подчиненные - Ctrl + Alt + Num-
Развернуть (все узлы дерева, группы табличного документа, группировки модуля)  - Ctrl + Shift + Num+
Свернуть (все узлы дерева, группы табличного документа, группировки модуля) - Ctrl + Shift + Num-
Следующая страница - Ctrl + PgDn - Ctrl + Alt + F
Предыдущая страница - Ctrl + PgUp - Ctrl + Alt + B
Включить/выключить жирность - Ctrl + B
Включить/выключить курсив - Ctrl + I
Включить/выключить подчеркивание - Ctrl + U
Переход к предыдущей главе справки - Alt + Left
Переход к следующей главе справки - Alt + Right

Управление окнами
Закрыть активное окно, модальный диалог или приложение - Alt + F4
Закрыть активное обычное окно - Ctrl + F4
Закрыть активное окно (кроме обычных) - Shift + Esc
Активизировать следующее обычное окно - Ctrl + Tab - Ctrl + F6
Активизировать предыдущее обычное окно - Ctrl + Shift + Tab - Ctrl + Shift + F6
Активизировать следующую секцию окна - F6
Активизировать предыдущую секцию окна - Shift + F6
Вызвать системное меню приложения или модального диалога - Alt + Space
Вызвать системное меню окна (кроме модальных диалогов) - Alt + Hyphen(-) - Alt + Num-
Вызвать главное меню - Alt - F10
Вызвать контекстное меню - Shift + F10

Переход по истории активности окон 
Переместиться назад - Ctrl + ""-""
Переместиться вперед - Ctrl + Shift + ""-""
Вернуть активность обычному окну - Esc

Форма
Перейти к следующему элементу формы/выполнить действие кнопки по умолчанию - Enter
Выполнить действие кнопки по умолчанию - Ctrl + Enter
Перейти к следующему элементу формы - Tab
Вернуться к предыдущему элементу формы - Shift + Tab
Активизировать командную панель, связанную с активным элементом управления/формой - Alt + F10
Открыть ""Список элементов управления формы"" - Ctrl + Shift + L
Перемещение по элементам управления, объединенным в одну группу - Up, Down, Left, Right

Работа со списком и деревом
Открыть - F2
Обновить - Ctrl + Shift + R
Скопировать - F9
Новая группа - Ctrl + F9
Удалить строку - Shift + Del
Перемещение строки вверх  - Ctrl + Shift + Up
Перемещение строки вниз - Ctrl + Shift + Down
Перенести элемент в другую группу - Ctrl + Shift + M
Перейти на уровень вниз с одновременным раскрытием группы - Ctrl + Down
Перейти на уровень вверх (к ""родителю"") - Ctrl + Up
Закончить редактирование - Shift + F2
Развернуть узел дерева - Num+ - Ctrl + Num+
Свернуть узел дерева - Num- - Ctrl + Num-
Развернуть узел дерева и все подчиненные - Num* - Ctrl + Alt + Num+
Свернуть узел дерева и все подчиненные - Ctrl + Alt + Num-
Развернуть все узлы дерева (выполняется в любом месте дерева) - Ctrl + Shift + Num+
Свернуть все узлы дерева (выполняется в любом месте дерева) - Ctrl + Shift + Num-
Изменение флажка - Пробел

Поле ввода
Переключить режим вставки/замены - Ins
Кнопка выбора - F4
Кнопка открытия - Ctrl + Shift + F4
Очистить поле - Shift + F4
Удалить символ слева от курсора - BackSpace
Удалить символ справа от курсора - Del
Удалить слово слева от курсора - Ctrl + BackSpace
Удалить слово справа от курсора - Ctrl + Del
Перейти в начало строки - Home
Перейти в конец строки - End

Поле картинки
Увеличить масштаб - Num+
Уменьшить масштаб - Num-
Прокрутить - Up, Down, Left, Right
Прокрутить на размер окна вверх - Page Up
Прокрутить на размер окна вниз - Page Down
Прокрутить на размер окна влево - Alt + PgUp
Прокрутить на размер окна вправо - Alt + PgDn



Редактор управляемых форм
Переключиться на закладку ""Форма"" - Alt + 1
Переключиться на закладку ""Модуль"" - Alt + 2
Переключиться на закладку ""Форма"" и активизировать закладку ""Элементы"" - Alt + 3
Переключиться на закладку ""Форма"" и активизировать закладку ""Реквизиты"" - Alt + 4
Переключиться на закладку ""Форма"" и активизировать закладку ""Команды"" - Alt + 5
Переключиться на закладку ""Форма"" и активизировать закладку ""Командный интерфейс"" - Alt + 6
Переключиться на закладку ""Форма"" и активизировать закладку ""Параметры"" - Alt + 7
Переключиться на закладку ""Форма"" и активизировать окно предварительного просмотра формы - Alt + 8

Редактор форм
Протестировать форму - Ctrl + R
Переместить элемент управления - Up, Down, Left, Right
Копировать элемент управления - Ctrl + (Up, Down, Left, Right)
Копировать элемент управления с инверсией выравнивания по сетке - Ctrl + Alt + (Up, Down, Left, Right)
Изменить размер элемента управления - Shift + (Up, Down, Left, Right)
Изменить размер элемента управления с инверсией выравнивания по сетке - Shift + Alt + (Up, Down, Left, Right)
Инверсия использования сетки - Alt + (Up, Down, Left, Right)
Открыть окно ""Привязка границ для элемента…"" - Ctrl + Shift + S
Начало редактирования - F2

Редактор табличных документов
Перейти к ячейке - Ctrl + G
Перемещение по ячейкам - Up, Down, Left, Right
Перемещение по ячейкам к следующей заполненной или пустой - Ctrl + (Up, Down, Left, Right)
Перемещение по ячейкам к следующей заполненной или пустой с выделением ячеек - Ctrl + Shift + (Up, Down, Left, Right)
Выделение ячеек - Shift + (Up, Down, Left, Right)
Выделение ячеек от текущей до начала строки - Shift + Home
Выделение ячеек от текущей до конца строки - Shift + End
Выделение строк - Alt + Shift + (Up, Down)
Выделение строк до следующей заполненной или пустой ячейки - Ctrl + Alt + Shift + (Up, Down)
Выделение колонок - Alt + Shift + (Left, Right)
Выделение колонок до следующей заполненной или пустой ячейки - Ctrl + Alt + Shift + (Left, Right)
Выделение ячеек от текущей до начала документа - Ctrl + Shift + Home
Выделение ячеек от текущей до конца документа - Ctrl + Shift + End
Прокрутить на страницу вверх - PgUp
Прокрутить на страницу вниз - PgDn
Прокрутить на страницу влево - Alt + PgUp
Прокрутить на страницу вправо - Alt + PgDn
Перейти к редактированию содержимого ячейки - Enter
Переключение режима редактирования/ввода в ячейке - F2
Перейти в начало строки - Home
Перейти в конец строки - End
Перейти в начало текста - Ctrl + Home
Перейти в конец текста - Ctrl + End
Установка имени текущей области - Ctrl + Shift + N

Редактор текстовых документов и модулей
Переключить режим вставки/замены - Ins
Перейти в начало строки - Home
Перейти в конец строки - End
Выделить до начала строки - Shift + Home
Выделить до конца строки - Shift + End
Перейти в начало текста - Ctrl + Home
Перейти в конец текста - Ctrl + End
Выделить до начала текста - Ctrl + Shift + Home
Выделить до конца текста - Ctrl + Shift + End
Прокрутить на одну строку вверх - Ctrl + Up
Прокрутить на одну строку вниз - Ctrl + Down
Перейти к началу предшествующего слова - Ctrl + Left
Перейти к началу следующего слова - Ctrl + Right
Выделить слово - Ctrl + W
Выделить предшествующее слово - Ctrl + Shift + Left
Выделить следующее слово - Ctrl + Shift + Right
Прокрутить на страницу вверх - PgUp
Прокрутить на страницу вниз - PgDn
Выделить предыдущую страницу текста - Shift + PgUp
Выделить следующую страницу текста - Shift + PgDn
Снять выделение - Esc
Перейти к строке - Ctrl + G
Удалить символ слева от курсора - BackSpace
Удалить символ справа от курсора - Del
Удалить слово слева от курсора - Ctrl + BackSpace
Удалить слово справа от курсора - Ctrl + Del
Установить/снять закладку - Alt + F2
Следующая закладка - F2
Предыдущая закладка - Shift + F2
Удалить текущую строку - Ctrl + L
Форматировать блок - Shift + Alt + F
Добавить комментарий - Ctrl + Num/
Удалить комментарий - Ctrl + Shift + Num/
Cдвинуть блок вправо - Tab
Сдвинуть блок влево - Shift + Tab
Синтаксический контроль - Ctrl + F7
Процедуры и функции модуля - Ctrl + Alt + P
Перейти к объявлению процедуры или переменной - F12
Контекстная подсказка - Ctrl + Пробел
Свернуть группу (курсор может быть в любом месте группы) - Ctrl + Num -
Развернуть группу (курсор может быть в любом месте группы) - Ctrl + Num +
Cвернуть все группы - Ctrl + Shift + Num -
Развернуть все группы - Ctrl + Shift + Num +
Обновить группировки - Ctrl+ Shift + R
Активизация шаблона - Ctrl + Q
Перейти по операторным скобкам назад - Ctrl + [
Перейти по операторным скобкам вперед - Ctrl + ]
Перейти по операторным скобкам назад с выделением текста - Ctrl + Shift + [
Перейти по операторным скобкам вперед с выделением текста - Ctrl + Shift + ]

Отладчик
Начать/продолжить отладку - F5
Перезапуск приложения для отладки - Ctrl + Shift + F5
Прекратить отладку - Shift + F5
Шагнуть в - F11
Шагнуть через - F10
Шагнуть из - Shift + F11
Идти до курсора - Shift + F10
Установить/снять точку останова - F9
Отключить/включить точку останова - Ctrl + Shift + F9
Список точек останова - Alt + F9
Вычислить выражение - Shift + F9
Открыть табло - Ctrl + Alt + W
Открыть стек вызовов - Ctrl + Alt + C

Редактор картинок
Переключение картинка/коллекция - Ctrl + K
Параметры картинки/коллекции - Shift + Alt + P
Отразить слева направо - Ctrl + H
Отразить сверху вниз - Ctrl + Shift + H
Выделение прямоугольником - Shift + Alt + S
Масштаб - Ctrl + M
Ластик - Ctrl + Shift + E
Заливка - Ctrl + Shift + F
Карандаш - Ctrl + Shift + I
Кисть - Ctrl + Shift + B
Линия - Ctrl + Shift + L
Кривая - Shift + Alt + С
Аэрограф - Ctrl + Shift + A
Текст - Shift + Alt + T
Увеличение масштаба - Ctrl + Num+
Уменьшение масштаба - Ctrl + Num-

Палитра свойств
Сохранить свойства - Enter
Восстановить значения свойства - Esc
Раскрыть категорию свойств - Num+
Закрыть категорию свойств - Num-
Перейти в начало палитры - Home
Перейти в конец палитры - End
Перейти к предыдущему свойству - Up
Перейти к следующему свойству - Down
Прокрутить на страницу вверх - PgUp
Прокрутить на страницу вниз - PgDn
Перейти к предыдущей категории - Ctrl + PgUp
Перейти к следующей категории - Ctrl + PgDn

Редактор карты маршрута
Перейти на следующий элемент карты - Tab
Перейти на предыдущий элемент карты - Shift + Tab
Уменьшить ширину элемента карты - Shift + (Left)
Увеличить ширину элемента карты - Shift + (Right)
Уменьшить высоту элемента карты - Shift + (Up)
Увеличить высоту элемента карты - Shift + (Down)
Перемещение выделенного варианта вверх (только при выделенном варианте в  - Ctrl + (Up)
элементе ""Выбор варианта"")
Перемещение выделенного варианта вниз (только при выделенном варианте в  - Ctrl + (Down)
элементе ""Выбор варианта"")
Поиск - Ctrl + F
Найти следующий - F3
Найти предыдущий - Shift + F3
Замена - Ctrl + H

Конфигурация
Открыть конфигурацию - Alt + К + Enter
Поиск во всех текстах - Alt + К + Т
Объединение конфигураций - Alt + К + О
Загрузить измененную конфигурацию - Alt + K + З
Конвертирование данных - Alt + К + Е

Администрирование
Пользователи - Alt + А + П
Сохранить данные - Alt + А + Х
Восстановить данные - Alt + А + В
Выгрузить данные - Alt + А + Ы
Загрузить данные - Alt + А + Г
Настройка журнала регистрации - Alt + А + Н
Распределенная ИБ - Alt + А + Р
Управление - Alt + А + Р + У
Автообмен - Alt + А + Р + А

Действия
Открыть в отладчике - Alt + Д + Т
Синтаксический контроль запросов - Alt + Д + К
Синтаксический контроль - Alt + Д + И
Процедуры и функции модуля - Alt + Д + Р

Файл
Новый - Ctrl + N
Открыть - Ctrl + O
Сохранить - Ctrl + S
Печать - Ctrl + P
Сравнить файлы - Alt + Ф + Р
Закрыть - Alt + Ф + З
Просмотр - Alt + Ф + Р + Р + Enter
Параметры страницы - Alt + Ф + М

Работа с закладками
Предыдущая закладка - Shift + F2
Закладка - Alt + F2
Следующая закладка - F2

Работа с блоком
Форматировать - Ctrl + Shift +F
Сдвинуть вправо - Tab
Сдвинуть влево - Shift + Tab
Добавить комментарий - Ctrl + Num /
Удалить комментарий - Ctrl + Shift + Num /

Окна
Закрыть окно - Ctrl + F4
Следующее окно - Ctrl + Shift + F6
Предыдущее окно - Ctrl + F6
Каскадом - Alt + О + К
Закрыть окно сообщений - Ctrl + Shift + z
Следующая страница - Ctrl + Alt + F
Предыдущая страница - Ctrl + Alt + B
Разделить окно - Alt + О + Р

Поиск и замена
Заменить - Ctrl + Shift + F3
Искать - Ctrl + F3
Повторить поиск - F3
Искать назад - Alt + F3
Искать вперед - Shift + F3
Переход к строке - Ctrl + Shift + L

Сервис
Калькулятор - Ctrl + F2
Синтаксис помощник - Alt + С + С
Настройка шаблонов - Alt + С + Н
Временная блокировка - Alt + С + В
Запуск предприятия - F11
Запуск отладчика - F12

Помощь
Помощь - F1
Содержание - Shift + F1
Поиск в Синтакс-Помощнике - Ctrl + F1
О программе - Alt + П + О

Общие
Свойства - Alt + Enter
Выход - Alt + F4"}
},
{0,
{"Дополнительные_Реквизиты",0,0,"","//ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	ТДРеквизиты.Ссылка КАК Ссылка,
//	МАКСИМУМ(ВЫБОР
//		КОГДА ТДРеквизиты.Свойство.имя = ""ОсновныеСредстваПлощадь_багз"" ТОГДА
//			Значение
//		ИНАЧЕ
//		   NULL
//	КОНЕЦ) КАК Площадь,
//	МАКСИМУМ(ВЫБОР
//		КОГДА ТДРеквизиты.Свойство.имя = ""КадастровыйНомер_875bf7aa0fd841bab22a3c207e087dff"" ТОГДА
//			Значение
//		ИНАЧЕ
//			NULL
//	КОНЕЦ) КАК КадастровыйНомер
//	ПОМЕСТИТЬ ВТОС
//ИЗ
//	Справочник.ОсновныеСредства.ДополнительныеРеквизиты КАК ТДРеквизиты
//ГДЕ
//	ТДРеквизиты.Ссылка.ГруппаОС = ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ЗемельныеУчастки)
//СГРУППИРОВАТЬ ПО
//	ТДРеквизиты.Ссылка
	
Функция ПолучитьЗначениеДополнительногоРеквизитаОбъекта(ДоговорыКонтрагентовСсылка, ИмяДопРеквизита)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Значение
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты
	|ГДЕ
	|		Свойство.Имя = &ИмяДополнительногоРеквизита
	|		И Ссылка = &ДоговорыКонтрагентовСсылка"";
	
	Запрос.УстановитьПараметры(""ИмяДополнительногоРеквизита"",	ИмяДопРеквизита);
	Запрос.УстановитьПараметры(""ДоговорыКонтрагентовСсылка"",	ДоговорыКонтрагентовСсылка);
	
	ЗапросРезультат = Запрос.Выполнить();	
	Выборка = ЗапросРезультат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Значение;
	КонецЕсли;
	
	Возврат """";
	
КонецФункции"}
},
{0,
{"УстановитьТекущееЗнчОбластиТабДок",0,0,"УстановитьТекущееЗнчОбластиТабДок_Кистанов","// Установить фокус на ячейку -> Устанавливаем область Элементу, а получаем область у Реквизита формы!!!
Элементы.ТабличныйДокумент.ТекущаяОбласть = ЭтаФорма.ТабличныйДокумент.Область(ИмяТекОбласти);"}
},
{0,
{"УОбъектаЕСТЬРеквизит",0,0,"УОбъектаЕСТЬРеквизит_Кистанов","// Приминимо только для ""Реквизиты"" (для проверки стандартных реквизитов не подходит)
Документ.Метаданные().Реквизиты.Найти(""Код"")

// Если стандартные реквизиты тогда проверим является объект справочником:
Метаданные.Справочники.Найти(Документ.Метаданные().Имя)"}
},
{0,
{"SINGLE_USER_SQL_изменить",0,0,"SINGLE_USER_SQL_изменить_Кистанов","-- Start in master
USE MASTER;

-- Add users
ALTER DATABASE [DBName] SET MULTI_USER
GO"}
},
{0,
{"РАСШИРЕНИЕ_ВместоСКонтролем",0,0,"РАСШИРЕНИЕ_ВместоСКонтролем_Кистанов","#Удаление
#КонецУдаления

#Вставка
#КонецВставки
"}
},
{0,
{"РазрывСтраницы_ЕслиВыводимыеОбластиРазрываетНаРазныеСтраницы",0,0,"РазрывСтраницы_ЕслиВыводимыеОбластиРазрываетНаРазныеСтраницы","        МассивОбластей = Новый Массив;
		МассивОбластей.Добавить(ОбластьЗаголовок);
		
		ТаблицаДокумента = СведенияОДокументе.Товары;
		Для Каждого Строка Из ТаблицаДокумента Цикл
			
			// Разрыв страницы +++
			Если НЕ ПервыйДокумент Тогда
			МассивОбластей.Очистить();
			КонецЕсли;	        
			// Разрыв страницы ---
			
			// Заголовок для каждой строки ТЧ
			ОбластьЗаголовокДокумента = Макет.ПолучитьОбласть(""ЗаголовокДокумента"");
			// ТабличныйДокумент.Вывести(ОбластьЗаголовокДокумента);
			МассивОбластей.Добавить(ОбластьЗаголовокДокумента);

			
			ОбластьДанные = Макет.ПолучитьОбласть(""Данные"");			
			ОбластьДанные.Параметры.Заполнить(ДанныеШапкиДокумента);			
			ОбластьДанные.Параметры.Заполнить(Строка);
			
			ОбластьДанные.Параметры.Контрагент = ДанныеШапкиДокумента.Контрагент;
			
			// ТабличныйДокумент.Вывести(ОбластьДанные);
			МассивОбластей.Добавить(ОбластьДанные);
			
			// Подвал для каждой строки ТЧ
			ПараметрыПодвал = Новый Структура;
			ПараметрыПодвал.Вставить(""ФИО"");
		
			ПараметрыПодвал.ФИО = """";
		
			ОбластьПодвал = Макет.ПолучитьОбласть(""Подвал"");
			ОбластьПодвал.Параметры.Заполнить(ПараметрыПодвал);
			ОбластьПодвал.Параметры.СкладОтветственный = СкладОтветственный;
			
			// ТабличныйДокумент.Вывести(ОбластьПодвал);
			МассивОбластей.Добавить(ОбластьПодвал);
			
			// Разрыв страницы +++        
			Если Не ТабличныйДокумент.ПроверитьВывод(МассивОбластей) Тогда    
			    ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			    МассивОбластей.Очистить();
			КонецЕсли;
			// Разрыв страницы ---
			
			ТабличныйДокумент.Вывести(ОбластьЗаголовокДокумента);
			ТабличныйДокумент.Вывести(ОбластьДанные);
			ТабличныйДокумент.Вывести(ОбластьПодвал);			
			
		КонецЦикла;	
"}
},
{0,
{"ОбщаяТочкаВхода_ФормированияОтчетов",0,0,"","// БП
БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет"}
},
{0,
{"ЗаписьВЖурналРегистрации",0,0,"ЗаписьВЖурналРегистрации_Кистанов","ЗаписьЖурналаРегистрации(""ОбменБП_УАТ.Синхронизация"", УровеньЖурналаРегистрации.Информация,
Метаданные.Документы.ПеремещениеТоваров, ВыборкаДокументов.Ссылка,
""Документ перемещения товаров синхронизирован с 1С УАТ"");
"}
},
{0,
{"МодульФормированияОтчетовТиповойКонфигурации",0,0,"","БП - ОбщийМодуль.БухгалтерскиеОтчетыВызовСервера.ПодготовитьОтчет (Функция ПодготовитьОтчет(ПараметрыОтчета) Экспорт)
ЗУП - (не точно, но см.) ОбщийМодуль.ЗарплатаКадрыОтчеты.ВывестиВКоллекциюПечатнуюФорму(...) Экспорт"}
},
{0,
{"ПрограммноДобавитьКолонкуВТаблицуФормы",0,0,"","
&НаСервере
Процедура ДобавитьКолонкуНаСервере()
	
	//нРеквизиты = Новый Массив;
    //нРеквизиты.Добавить(Новый РеквизитФормы(""Тест3"", Новый ОписаниеТипов(""Строка""), ""Объект.Тест"", ""Тест3"", Истина));
    //ИзменитьРеквизиты(нРеквизиты);

	ТаблицаФормыВыполненныеРаботы = ЭтаФорма.Элементы.ВыполненныеРаботы;
	участокМестоВставки = ТаблицаФормыВыполненныеРаботы.ПодчиненныеЭлементы[2];
	
	// Элементы.Добавить - если необходимо расположить последним в таблицу
	// Элементы.Вставить - если необходимо расположить под определенным индексом
	
	нЭлементУчасток = Элементы.Вставить(""Участок"", Тип(""ПолеФормы""), ТаблицаФормыВыполненныеРаботы, участокМестоВставки);
	нЭлементУчасток.Вид = ВидПоляФормы.ПолеВвода; 
	нЭлементУчасток.ПутьКДанным = ""Объект.ВыполненныеРаботы._Участок"";
	
	//нЭлементБригада = Элементы.Добавить(""Участок"", Тип(""ПолеФормы""), ТаблицаФормыВыполненныеРаботы);
	//нЭлементБригада.Вид = ВидПоляФормы.ПолеВвода; 
	//нЭлементБригада.ПутьКДанным = ""Объект.ВыполненныеРаботы._Участок"";
	
КонецПроцедуры"}
},
{0,
{"ЗадатьВопросПослеЧегоВыполнитьЕслиДа",0,0,"","
&НаКлиенте
Процедура КоличествоОбрабатываемыхГаПриИзмененииЗавершениеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	Перем ВыбЗнач;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// ... какой либо код
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДанные(Команда)
	
	ТекстВопроса = ""Табличная часть будет пересчитана. Продолжить?"";
	ОписаниеОповещения = Новый ОписаниеОповещения(""КоличествоОбрабатываемыхГаПриИзмененииЗавершениеВопроса"", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

КонецПроцедуры"}
},
{0,
{"ФормаВладельцаПолучитЗнчВыбранноеВЗакрываемойФорме",0,0,"","&НаКлиенте
Процедура ОткрытьНеМодальнуюФорму(Команда)
	
	ОткрытьФорму(
	""ОбщаяФорма.НемодальнаяФорма"",
	,
	ЭтаФорма,
	,,,
	Новый ОписаниеОповещения(""ПослеЗакрытияФормы"",ЭтаФорма),
	РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормы(ПараметрЗакрытия, ДополнительныеПараметры) Экспорт 
	
  Если ПараметрЗакрытия = Неопределено Тогда
    Возврат;
  ИначеЕсли ТипЗнч(ПараметрЗакрытия) = Тип(""Строка"") Тогда
      Сообщить(""Параметр из немодальной формы: "" + ПараметрЗакрытия);
  Иначе
      Сообщить(""Получен произвольный параметр"");
  КонецЕсли;
  
КонецПроцедуры"}
},
{0,
{"ПрограммноИзменитьВидимостьКомандыФормы",0,0,"","ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Найти(""ФормаСоздатьЗаказПоставщику"").Видимость = Ложь"}
},
{0,
{"ЗУП_КолРабочихДнейПоГрафикуРабот",0,0,"","#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ИТТ579_РассчитатьДниПослеНаСервере(Организация, Сотрудник, ДатаГраница)
	
	_результатРасчетаДней = Неопределено;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТабСотрудники.Сотрудник,
	|	ТабСотрудники.ГрафикРаботы,
	|	ТабГрафики.ДлительностьРабочейНедели,
	|	ТабГрафики.РабочихДнейВНеделе
	|ИЗ
	|	РегистрСведений.ГрафикРаботыСотрудниковИнтервальный КАК ТабСотрудники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ТабГрафики
	|	ПО ТабСотрудники.ГрафикРаботы = ТабГрафики.Ссылка
	|ГДЕ
	|	Сотрудник = &Сотрудник
	|	//И ГоловнаяОрганизация = &Организация
	|	И ДатаОкончания >= &ДатаГраница"";
	
	//Запрос.УстановитьПараметр(""Организация"", 	Организация);
	Запрос.УстановитьПараметр(""Сотрудник"", 		Сотрудник);
	Запрос.УстановитьПараметр(""ДатаГраница"", 	ДатаГраница);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// _результатРасчетаДней = ВыборкаДетальныеЗаписи.РабочихДнейВНеделе * КолРабочихДнейПоПроизводственномуКалендарю
		ДатаН = ДатаГраница;
		ДатаК = ДобавитьМесяц(ДатаН, 3);
		_результатРасчетаДней = КоличествоРабочихДнейПоГрафикуРаботы(ДатаН, ДатаК, ВыборкаДетальныеЗаписи.ГрафикРаботы);
	КонецЕсли;	
	
	Возврат _результатРасчетаДней;
	
КонецФункции

&НаСервереБезКонтекста
Функция КоличествоРабочихДнейПоГрафикуРаботы(ДатаН, ДатаК, ГрафикРаботы)
	
	РабочееВремя = Справочники.ВидыИспользованияРабочегоВремени.РабочееВремя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	""ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК ОсновноеЗначение,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ДополнительноеЗначение,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК ОсновноеЗначениеНорма,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма) КАК ДополнительноеЗначениеНорма
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ГрафикРаботы
	|	И ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &ДатаН И &ДатаК
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &ВидУчетаВремени
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени"";   	
	
	Запрос.УстановитьПараметр(""ГрафикРаботы"", ГрафикРаботы);
	Запрос.УстановитьПараметр(""ДатаК"", ДатаК);
	Запрос.УстановитьПараметр(""ДатаН"", ДатаН);	
	Запрос.УстановитьПараметр(""ВидУчетаВремени"", РабочееВремя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОсновноеЗначение = Выборка.ОсновноеЗначение;
	Иначе
		ОсновноеЗначение = 0;
	КонецЕсли;
	
	Возврат ОсновноеЗначение;
	
КонецФункции

#КонецОбласти"}
},
{0,
{"Попытка_вызвать_ИСКЛЮЧЕНИЕ",0,0,"","
Попытка
	Элементы[_эФормы].АвтоОтметкаНезаполненного = автоОтметкаЗнч;
Исключение
	ВызватьИсключение НСтр(""ru='Расширение ИТТ_619 не удалось получить имя элемента формы!'"");
КонецПопытки;"}
},
{0,
{"ЗУП_КадровыеДанныеСотрудника_БСП",0,0,"","
// Контактная информация:
//Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
//СсылкаИлиОбъект,
//ВидИлиТипКонтактнойИнформации,
//Дата,
//ТолькоПредставление);

/////////////////////////////////////////////////////////////////////////+++
ФамилияИО = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(""Иванов Иван Иванович""); // Иванов И.И.
/////////////////////////////////////////////////////////////////////////---



Сотрудник			= СведенияОДокументе;
ИменаПолей			= ""ФамилияИО, Подразделение, Должность"";
ДатаПолученияДанных	= ТекущаяДата();


//	Список полей, допустимых в параметре КадровыеДанные см. КадровыйУчетВнутренний.ЗапросВТКадровыеДанныеФизическихЛиц.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица значений, содержащая обязательные поля ФизическоеЛицо, Период поля запрошенных
//						 кадровых данных.
//
//Функция КадровыеДанныеФизическихЛиц(ТолькоРазрешенные, СписокФизическихЛиц, КадровыеДанные, ДатаПолученияДанных = '00010101', ПоляОтбораПериодическихДанных = Неопределено) Экспорт

КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудника(
Истина,
Сотрудник,
ИменаПолей,
ДатаПолученияДанных);
		
ЗаполнитьЗначенияСвойств(ОбластьЗаголовокДокумента.Параметры, КадровыеДанныеСотрудника);


#Область ГлавныйМетодТиповой

// Возвращает данные сотрудника, перечисленные в параметре КадровыеДанные.
//
// Параметры:
//  ТолькоРазрешенные - Булево
//  Сотрудник         - СправочникСсылка.Сотрудники
//  КадровыеДанные    - Строка - Имена полей перечисленные через запятую.
//    См. комментарий к КадровыйУчетВнутренний.ЗапросВТКадровыеДанныеСотрудников
//    и КадровыйУчетВнутренний.ЗапросВТКадровыеДанныеФизическихЛиц,
//    а также имена реквизитов справочника Сотрудники и ФизическиеЛица.
//  ДатаПолученияДанных - Дата - Дата на которую необходимо получить данные сотрудников.
//
// Возвращаемое значение:
//   Неопределено - Кадровые данные не найдены.
//   СтрокаТаблицыЗначений - Запрошенные данные.
//
//Функция КадровыеДанныеСотрудника(ТолькоРазрешенные, Сотрудник, КадровыеДанные, ДатаПолученияДанных)
//
//КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудника(Истина, Сотрудник, ИменаПолей, Дата);
//Если КадровыеДанныеСотрудника = Неопределено Тогда
//	Возврат Неопределено;
//КонецЕсли;
//
//
//
//КадровыйУчет.КадровыеДанныеСотрудника(Истина, Сотрудник, 
//""ФизическоеЛицо, Подразделение, Должность, ФОТ, СпособРасчетаАванса, Аванс,
//Фамилия,Имя,Отчество,ФИОПолные,ИОФамилия,ФамилияИО,Пол,
//ГоловнаяОрганизация,Организация,ФизическоеЛицо,ДатаПриема,ОформленПоТрудовомуДоговору,ДатаЗавершенияРаботы,
//СтраховойНомерПФР,
//ДолжностьПоШтатномуРасписанию,
//СеверныйСтажВид,СеверныйСтажЛет,СеверныйСтажМесяцев,СеверныйСтажДней,
//ДатаПриема,ДатаЗавершенияРаботы,ГрафикРаботы,
//Подразделение,Должность,ДатаПриема,ДатаУвольнения,
//ДатаПриема,ДатаЗавершенияРаботы,ДоляНеполногоРабочегоВремени,
//ПриказОПриеме,ОформленПоТрудовомуДоговору,ЯвляетсяПрокурором, ЯвляетсяВоеннослужащим, РаботаетВСтуденческомОтряде, ДатаПриема, ДатаУвольнения,
//ТабельныйНомер,ДатаРождения,ФизическоеЛицо, ИНН, Фамилия, Имя, Отчество, ДатаРождения, МестоРождения, ДокументВид, ДокументДатаВыдачи, ДокументКемВыдан, 
//ДокументСерия, ДокументНомер, ДокументКемВыдан, ДокументСтранаВыдачи,
//ПочтовыйИндексМестаРегистрации, ПропискаУлица, ПропискаДом, ПропискаКорпус, ПропискаСтроение, ПропискаКвартира, РабочийТелефон, Факс, ИНН, МобильныйТелефон
//Организация,ФизическоеЛицо,Подразделение,ВидЗанятости,КоличествоСтавок,
//ТекущееПодразделение, ТекущаяТерритория,ДолжностьПоШтатномуРасписанию,КоличествоСтавок,
//ГоловнойСотрудник,ФизическоеЛицо,НазначениеПодработки,
//ФизическоеЛицо,ФИОПолные,ТабельныйНомер,Подразделение,Должность,ВидЗанятости,СуммированныйУчетРабочегоВремени,
//ТрудовойДоговорНомер, ТрудовойДоговорДата, Должность,ФИОПолные, Пол, АдресПоПропискеПредставление, ДокументВид, ДокументСерия, ДокументНомер,
//ДокументПредставление,
//ВоинскийУчетЗвание,ВоинскийУчетСостав,ВоинскийУчетВУС,ВоинскийУчетГодность,ВоинскийУчетНаличиеМобпредписания,ВоинскийУчетНомерКомандыПартии,
//ВоинскийУчетПунктПеречня,
//ПриказОПриемеВидДоговора,ПриказОПриемеТрудовойДоговорНомер,ПриказОПриемеТрудовойДоговорДата"",
//ТекущаяДата());

//ИменаПолей = Документы.ИсходящееСообщениеОСтраховомСлучаеФСС.ИменаПолейТребуемыхКадровыхДанных();
//Функция ИменаПолейТребуемыхКадровыхДанных() Экспорт
//	ИменаПолей = 
//	""ГоловнаяОрганизация,
//	|Организация,
//	|ФизическоеЛицо,
//	|Фамилия,
//	|Имя,
//	|Отчество,
//	|СтраховойНомерПФР,
//	|ДатаРождения,
//	|Страна"";
//	Возврат ИменаПолей;
//КонецФункции

//ИменаПолей = Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.ИменаПолейТребуемыхКадровыхДанных();
//Функция ИменаПолейТребуемыхКадровыхДанных() Экспорт
//	Возврат
//	""ГоловнаяОрганизация,
//	|Организация,
//	|Фамилия,
//	|Имя,
//	|Отчество,
//	|СтраховойНомерПФР,
//	|ИНН,
//	|ДатаРождения,
//	|Страна,
//	|ДокументВид,
//	|ДокументСерия,
//	|ДокументНомер,
//	|ДокументДатаВыдачи,
//	|ДокументКемВыдан,
//	|ДокументСрокДействия,
//	|ФизическоеЛицо"";
//КонецФункции

//ИменаПолей = Документы.ОтветНаЗапросФССДляРасчетаПособия.ИменаПолейТребуемыхКадровыхДанных();
//Функция ИменаПолейТребуемыхКадровыхДанных() Экспорт
//	ИменаПолей = 
//	""ФизическоеЛицо,
//	|Фамилия,
//	|Имя,
//	|Отчество,
//	|ДатаРождения,
//	|Страна,
//	|Пол,
//	|ИНН,
//	|СтраховойНомерПФР,
//	|ДокументВид,
//	|ДокументСерия,
//	|ДокументНомер,
//	|ДокументДатаВыдачи,
//	|ДокументКемВыдан,
//	|ДокументСрокДействия,
//	|СтатусНалогоплательщика,
//	|ВидЗанятости,
//	|РайонныйКоэффициентРФ,
//	|ЛьготаПриНачисленииПособий,
//	|ОтношениеКОсобойЗоне,
//	|ВидОсобойЗоны"";
//	Если ОбщегоНазначения.ПодсистемаСуществует(""ЗарплатаКадрыРасширеннаяПодсистемы"") Тогда
//		ИменаПолей = ИменаПолей + 
//		"",
//		|ДатаНачала,
//		|ДатаОкончания,
//		|ДоляНеполногоРабочегоВремени,
//		|СрочныйДоговор"";
//	КонецЕсли;
//	
//	Возврат ИменаПолей;
//КонецФункции

//ИменаПолей = Документы.СведенияОЗастрахованномЛицеФСС.ИменаПолейТребуемыхКадровыхДанных();
//Функция ИменаПолейТребуемыхКадровыхДанных() Экспорт
//	Возврат
//	""ФизическоеЛицо,
//	|Фамилия,
//	|Имя,
//	|Отчество,
//	|ДатаРождения,
//	|ДатаУвольнения,
//	|Страна,
//	|Пол,
//	|ИНН,
//	|СтраховойНомерПФР,
//	|ДокументВид,
//	|ДокументСерия,
//	|ДокументНомер,
//	|ДокументДатаВыдачи,
//	|ДокументКемВыдан,
//	|ДокументСрокДействия,
//	|СтатусНалогоплательщика,
//	|ВидЗанятости,
//	|ЛьготаПриНачисленииПособий,
//	|ОтношениеКОсобойЗоне,
//	|ВидОсобойЗоны"";
//КонецФункции

//ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(МенеджерВременныхТаблиц, ""ВТФизическиеЛица"");
//КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, ""Фамилия, Имя, Отчество, СтраховойНомерПФР, Страна, ИНН, ДатаРождения,
//ВидЗастрахованногоЛица"");
//ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ""ВТФизическиеЛица"");


//Информация о рабочем месте.
//			- РабочееМестоПериодРегистрации	- Дата
//			- РабочееМестоРегистратор		- ДокументСсылка
//			- Организация 					- СправочникСсылка.Организации
//			- Подразделение 				- СправочникСсылка.ПодразделенияОрганизаций
//			- Должность 					- СправочникСсылка.Должности
//			- ВидЗанятости 					- ПеречисленияСсылка.ВидыЗанятости
//			- ВидСобытия 					- ПеречисленияСсылка. ВидыКадровыхСобытий
//			- КоличествоСтавок				- Число, в этой конфигурации всегда 1.
//			- РайонныйКоэффициент			- Число
//			- РайонныйКоэффициентРФ			- Число
//
//			Информация о свойствах рабочего места.
//			- ЯвляетсяЧленомЛетногоЭкипажа 			- Булево (Ложь)
//			- ЯвляетсяШахтером 						- Булево (Ложь)
//			- ЯвляетсяФармацевтом 					- Булево (Ложь)
//			- ЯвляетсяРаботникомСДосрочнойПенсией 	- ПеречислениеСсылка.ВидыРаботСДосрочнойПенсией
//														(Перечисления.ВидыРаботСДосрочнойПенсией.ПустаяСсылка).
//			- ЯвляетсяЧленомЭкипажаСуднаПодФлагомРФ - Булево (Ложь).
//			- ПрименяемыйЛьготныйТерриториальныйТариф - СправочникСсылка.ВидыТарифовСтраховыхВзносов.
//                                                      (СправочникСсылка.ВидыТарифовСтраховыхВзносов.ПустаяСсылка)
//
//			Информация об оплате труда.
//			- ОплатаТрудаПериодЗаписи	- Дата
//			- ОплатаТрудаРегистратор	- ДокументСсылка
//			- ТарифнаяСтавка 			- Число
//			- ФОТ 			 			- Число
//			- Надбавка 		 			- Число, в этой конфигурации всегда 0.
//
//			- АвансПериодРегистрации- Дата
//			- АвансРегистратор		- ДокументСсылка
//			- СпособРасчетаАванса	- ПеречислениеСсылка.СпособыРасчетаАванса
//			- Аванс					- Число.
//
//			- ЗарплатныйПроектДатаОткрытияЛицевогоСчета	- Дата
//			- ЗарплатныйПроектРегистратор				- ДокументСсылка.ПодтверждениеОткрытияЛицевыхСчетовСотрудников
//			- ЗарплатныйПроект							- СправочникСсылка.ЗарплатныеПроекты
//			- НомерЛицевогоСчета						- Строка.
//
//			Информация об учете затрат.
//			- УчетЗатратПериодРегистрации		- Дата
//			- СтатьяФинансирования 				- СправочникСсылка.СтатьиФинансированияЗарплата
//			- СпособОтраженияЗарплатыВБухучете 	- СправочникСсылка.СпособыОтраженияЗарплатыВБухУчете
//			- ОтношениеКЕНВД 					- ПеречислениеСсылка.ОтношениеКЕНВДЗатратНаЗарплату
//			- УчетЗатратДокументОснование 		- ДокументСсылка.ПриемНаРаботу.
//			
//			Информация о классах условий труда по результатам специальной оценки на рабочем месте.
//			- КлассУсловийТрудаПериодРегистрации		- Дата
//			- КлассУсловийТруда							- ПеречислениеСсылка.КлассыУсловийТрудаПоРезультатамСпециальнойОценки
//			- КлассУсловийТрудаДатаРегистрацииИзменений	- Дата.
//		
//			Информация о заявлениях о выборе способа ведения трудовых книжек.
//			- ЗаявленияОПредоставленииСведенийОТрудовойДеятельности			- ДокументСсылка.ЗаявленияОПредоставленииСведенийОТрудовойДеятельности
//			- ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиДата		- Дата
//			- ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиВид		- ПеречислениеСсылка.ВидыЗаявленийОПредоставленииСведенийОТрудовойДеятельности
//			- ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиПередано	- Булево
//			- ЗаявленияОПредоставленииСведенийОТрудовойДеятельностиОтозвано	- Булево.

// Формирует временную таблицу, содержащую поля с запрашиваемыми кадровыми данными  носящими периодический характер.
// Содержит обязательные поля ФизическоеЛицо и Период.
//
// Параметры:
//	ТолькоРазрешенные 	- Булево, если Истина то текст запроса будет построен с использованием
//						  ключевого слова РАЗРЕШЕННЫЕ.
//	ОписательВременнойТаблицыОтборов - структура, описывающая временную таблицу, служащую фильтром
//						  по физическим лицам для получения кадровых данных 
//						  см. КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц.
//	КадровыеДанные - Строка, перечисление имен кадровых данных, разделенных запятыми.
//				   - Массив, содержащий строки имен кадровых данных.
//	ИсточникиДанных	- Соответствие, содержит служебную информацию об используемых в построении запроса
//						источниках данных
//  ИмяВТПостоянныеКадровыеДанныеФизическихЛиц - Строка, указывает оригинальное имя временной таблицы,
//						  формируемой методом.
//
//	Список полей, допустимых в параметре КадровыеДанные, если сведений в базе данных нет, возвращается
//  		NULL, исключения приведены в скобках, поле указания типа кадровых данных.
//
//			- Все имена кадровых данных, разрешенных для метода ЗапросВТПостоянныеКадровыеДанныеФизическихЛиц.
//
//			Информация о гражданстве
//			- ГражданствоПериодРегистрации	- Дата
//			- Страна						- СправочникСсылка.СтраныМира (Справочники.СтраныМира.Россия)
//			- ИННВСтранеГражданства			- Строка.
//
//			Информация о документе, удостоверяющем личность.
//			- ДокументПериодРегистрации	- Дата
//			- ДокументВид 				- СправочникСсылка.ВидыДокументовФизическихЛиц
//			- ДокументКодМВД 			- Строка
//			- ДокументСерия 			- Строка
//			- ДокументНомер 			- Строка
//			- ДокументДатаВыдачи 		- Дата
//			- ДокументСрокДействия 		- Дата
//			- ДокументКемВыдан 			- Строка
//			- ДокументКодПодразделения 	- Строка
//			- ДокументСтранаВыдачи 		- СправочникСсылка.СтраныМира
//			- ДокументПредставление 	- Строка.
//
//			Информация о фамилии, имени, отчестве.
//			- ФИОПериодРегистрации	- Дата
//			- Фамилия 				- Строка;
//			- Имя 					- Строка;
//			- Отчество 				- Строка;
//			- ФИОПолные 			- Строка, полные фамилия имя отчество;
//			- ФамилияИО 			- Строка, фамилия и инициалы;
//			- ИОФамилия 			- Строка, инициалы и фамилия;
//			- Инициалы				- Строка, инициалы имени отчества.
//
//			Информация о сведениях об инвалидности.
//			- ИнвалидностьПериодРегистрации		- Дата
//			- Инвалидность 						- Булево
//			- ИнвалидностьДатаВыдачи 			- Дата
//			- ИнвалидностьГруппаИнвалидности 			- Строка (""1"", ""2"", ""3"")
//			- ИнвалидностьСерияСправки 					- Строка
//			- ИнвалидностьНомерСправки 					- Строка
//			- ИнвалидностьПроцентПотериТрудоспособности	- Число(5.2)
//			- ИнвалидностьСрокДействияСправки 	- Дата.
//
//			- СтатусНалогоплательщикаПериодРегистрации	- Дата
//			- СтатусНалогоплательщика 					- СправочникСсылка.СтатусыНалогоплательщиковПоНДФЛ
//															(Справочники.СтатусыНалогоплательщиковПоНДФЛ.Резидент).
//
//			- ВидЗастрахованногоЛицаПериодРегистрации	- Дата
//			- ВидЗастрахованногоЛица 					- ПеречислениеСсылка.ВидыЗастрахованныхЛицОбязательногоСтрахования
//															(Перечисления.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ).

// Формирует временную таблицу, содержащую поля с запрашиваемыми кадровыми данными  носящими периодический характер.
// Содержит обязательные поля ФизическоеЛицо и Период.
//
// Параметры:
//	ТолькоРазрешенные 	- Булево, если Истина то текст запроса будет построен с использованием
//						  ключевого слова РАЗРЕШЕННЫЕ.
//	ОписательВременнойТаблицыОтборов - структура, описывающая временную таблицу, служащую фильтром
//						  по физическим лицам для получения кадровых данных 
//						  см. КадровыйУчет.ОписаниеВременнойТаблицыОтборовФизическихЛиц.
//	КадровыеДанные - Строка, перечисление имен кадровых данных, разделенных запятыми.
//				   - Массив, содержащий строки имен кадровых данных.
//	ИсточникиДанных	- Соответствие, содержит служебную информацию об используемых в построении запроса
//						источниках данных
//  ИмяВТПостоянныеКадровыеДанныеФизическихЛиц - Строка, указывает оригинальное имя временной таблицы,
//						  формируемой методом.
//
//	Список полей, допустимых в параметре КадровыеДанные, если сведений в базе данных нет, возвращается
//  		NULL, исключения приведены в скобках, поле указания типа кадровых данных.
//
//			- Все имена кадровых данных, разрешенных для метода ЗапросВТПостоянныеКадровыеДанныеФизическихЛиц.
//
//			Информация о гражданстве
//			- ГражданствоПериодРегистрации	- Дата
//			- Страна						- СправочникСсылка.СтраныМира (Справочники.СтраныМира.Россия)
//			- ИННВСтранеГражданства			- Строка.
//
//			Информация о документе, удостоверяющем личность.
//			- ДокументПериодРегистрации	- Дата
//			- ДокументВид 				- СправочникСсылка.ВидыДокументовФизическихЛиц
//			- ДокументКодМВД 			- Строка
//			- ДокументСерия 			- Строка
//			- ДокументНомер 			- Строка
//			- ДокументДатаВыдачи 		- Дата
//			- ДокументСрокДействия 		- Дата
//			- ДокументКемВыдан 			- Строка
//			- ДокументКодПодразделения 	- Строка
//			- ДокументСтранаВыдачи 		- СправочникСсылка.СтраныМира
//			- ДокументПредставление 	- Строка.
//
//			Информация о фамилии, имени, отчестве.
//			- ФИОПериодРегистрации	- Дата
//			- Фамилия 				- Строка;
//			- Имя 					- Строка;
//			- Отчество 				- Строка;
//			- ФИОПолные 			- Строка, полные фамилия имя отчество;
//			- ФамилияИО 			- Строка, фамилия и инициалы;
//			- ИОФамилия 			- Строка, инициалы и фамилия;
//			- Инициалы				- Строка, инициалы имени отчества.
//
//			Информация о сведениях об инвалидности.
//			- ИнвалидностьПериодРегистрации		- Дата
//			- Инвалидность 						- Булево
//			- ИнвалидностьДатаВыдачи 			- Дата
//			- ИнвалидностьГруппаИнвалидности 			- Строка (""1"", ""2"", ""3"")
//			- ИнвалидностьСерияСправки 					- Строка
//			- ИнвалидностьНомерСправки 					- Строка
//			- ИнвалидностьПроцентПотериТрудоспособности	- Число(5.2)
//			- ИнвалидностьСрокДействияСправки 	- Дата.
//
//			- СтатусНалогоплательщикаПериодРегистрации	- Дата
//			- СтатусНалогоплательщика 					- СправочникСсылка.СтатусыНалогоплательщиковПоНДФЛ
//															(Справочники.СтатусыНалогоплательщиковПоНДФЛ.Резидент).
//
//			- ВидЗастрахованногоЛицаПериодРегистрации	- Дата
//			- ВидЗастрахованногоЛица 					- ПеречислениеСсылка.ВидыЗастрахованныхЛицОбязательногоСтрахования
//															(Перечисления.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ).
//
//Функция ЗапросВТКадровыеДанныеФизическихЛиц
	
#КонецОбласти
"}
},
{0,
{"БП_ДанныеОрганизации_БСП",0,0,"","
СведенияОбОрганизацииСписокПоказателей = Новый Массив;
СведенияОбОрганизацииСписокПоказателей.Добавить(""ФИОБух"");

главногоБухгалтераФИОПолное = РегламентированнаяОтчетностьБП.ПолучитьСведенияОбОрганизации(
Выборка.Организация, Выборка.ДатаАктаСверки, СведенияОбОрганизацииСписокПоказателей);"}
}
},
{1,
{"Стандарты1С",1,0,"",""},
{7,
{"СоглашенияПриНаписанииКода",1,0,"",""},
{0,
{"ОбщееОписание",0,0,""," Заголовок модуля представляет собой комментарий в самом начале модуля.
 В заголовке модуля приводится его краткое описание и условия применения.
 Например:
////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры и функции общего назначения:
// - для работы со списками в формах;
// - для работы с журналом регистрации;
// - для обработки действий пользователя в процессе редактирования
//   многострочного текста, например комментария в документах;
// - прочее.
//  
////////////////////////////////////////////////////////////////////////////////


Для модулей форм в заголовке рекомендуется размещать описание параметров формы."}
},
{0,
{"СтандартОписанияМодуляФормы",0,0,"СтандартОписанияМодуляФормы_Кистанов","<?>
// 1. «ОбработчикиСобытийФормы» процедуры-обработчики событий формы:
// ПриСозданииНаСервере, ПриОткрытии и т.п.

// 2. «ОбработчикиСобытийЭлементовШапкиФормы» процедуры-обработчики элементов,
// расположенных в основной части формы (все, что не связано с таблицами на форме).

// 3. «ОбработчикиСобытийЭлементовТаблицыФормы <имя таблицы формы>» процедуры-обработчики
//  таблиц формы и элементов таблиц. Для процедур-обработчиков каждой таблицы должен быть создан свой раздел.

// 4. «ОбработчикиКомандФормы» процедуры-обработчики команд формы
// (имена которых задаются в свойстве Действие команд формы).

// 5. «СлужебныеПроцедурыИФункции» процедуры и функции, составляющие внутреннюю реализацию модуля.

// ( В тех случаях, когда модуль является частью некоторой функциональной подсистемы,
// в этом разделе также могут быть размещены служебные экспортные процедуры и функции,
// предназначенные только для вызова из других объектов данной подсистемы )

#Область ОписаниеПеременных
#КонецОбласти

#Область ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>
#КонецОбласти

#Область ОбработчикиКомандФормы
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
#КонецОбласти"}
},
{0,
{"СтандартОписанияОбщегоМодуля",0,0,"СтандартОписанияОбщегоМодуля_Кистанов","Для объемных общих модулей рекомендуется разбивать этот раздел на подразделы, по функциональному признаку.
Например:
//#Область ОбновлениеИнформационнойБазы
//    Код процедур и функций
//#КонецОбласти

#Область ПрограммныйИнтерфейс
    // Такие процедуры и функции предназначены для использования другими объектами конфигурации 
	// или другими программами (например, через внешнее соединение).
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
    // В нем должны быть размещены экспортные процедуры и функции, которые допустимо вызывать только
	// из других функциональных подсистем этой же библиотеки. (например: у объекта есть две формы (А,Б)
	// где форма А содержит ""СлужебныйПрограммныйИнтерфейс"" который вызывает форма Б (подсистем этой же библиотеки).
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти"}
},
{0,
{"СтандартОписания_МодулейОбк_МенеджеровНаборовЗаписей_Обработок_Отчетов",0,0,"СтандартОписания_МодулейОбк_МенеджеровНаборовЗаписей_Обработок_Отчетов_Кистанов","
#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс
    // Такие процедуры и функции предназначены для использования другими объектами конфигурации 
	// или другими программами (например, через внешнее соединение).
#КонецОбласти

#Область ОбработчикиСобытий
    // Содержит обработчики событий модуля объекта (ПриЗаписи, ПриПроведении и др.)
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
    // В нем должны быть размещены экспортные процедуры и функции, которые допустимо вызывать только
	// из других функциональных подсистем этой же библиотеки. (например: у объекта есть две формы (А,Б)
	// где форма А содержит ""СлужебныйПрограммныйИнтерфейс"" который вызывает форма Б (подсистем этой же библиотеки).
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
    // Код процедур и функций
#КонецОбласти

#Область Инициализация

#КонецОбласти"}
},
{0,
{"СтандартОписанияМодулейКоманд",0,0,"СтандартОписанияМодулейКоманд_Кистанов","
#Область ОбработчикиСобытий
    // Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
    // Код процедур и функций
#КонецОбласти"}
},
{0,
{"СтандартОписанияПеременныхМодуля",0,0,"СтандартОписанияПеременныхМодуля_Кистанов","Все переменные модуля должны быть снабжены комментарием, достаточным для понимания их назначения.
Комментарий рекомендуется размещать в той же строке, где объявляется переменная.
Пример:                                                                                          

#Область ОписаниеПеременных

Перем ВалютаУчета;
Перем АдресПоддержки;
...

#КонецОбласти"}
},
{0,
{"СтандартОписанияИнициализацияМодуля_Объекта_Формы",0,0,"СтандартОписанияИнициализацияМодуля_Объекта_Формы_Кистанов","Раздел инициализации содержит операторы, инициализирующие переменные модуля или объект (форму).
Например:

#Область Инициализация

АдресПоддержки = ""v8@1c.ru""; 
ВыполнитьИнициализацию();
...

#КонецОбласти"}
}
}
},
{28,
{"Редкие",1,0,"",""},
{0,
{"Роль_ДоступнаБСП",0,0,"Роль_ДоступнаБСП_Кистанов","
#Область ДоступРазлешен

// Процедура - Пользователь обладает ролью
//
// Параметры:
//  мИменаРолей	 - Массив Из Строка - имена ролей. Пример: [..., Метаданные.Роли.КонтрольПометкиУдаленияНоменклатуры.Имя]
//
// Пример использования:
//	_мИменаРолей			= Новый Массив;	
//	_АдминистраторСистемы	= Метаданные.Роли.АдминистраторСистемы;
//	_мИменаРолей.Добавить(_АдминистраторСистемы.Имя);
// 	_Результат = ITTЕстьРоль_Доступ.ТекущийПользовательОбладаетНаборомРолей(_мИменаРолей);
//
//	Если _Результат Тогда
//		Отказ = _Результат;
//		Возврат;
//	КонецЕсли;
//
&НаСервере
Функция ТекущийПользовательОбладаетНаборомРолей(мИменаРолей) Экспорт

	_Пользователь	= Пользователи.ТекущийПользователь();	
	_РолиНайдены	= РольПрисвоеннаПользователюВИнтерактивномРежиме(мИменаРолей, _Пользователь);

	Возврат _РолиНайдены;

КонецФункции

#КонецОбласти

#Область РольПрисвоеннаПользователюВИнтерактивномРежиме

// Функция - Роль присвоенна пользователю в интерактивном режиме
//
// Параметры:
//  мИменаРолей	 - Массив Из Строка - имена ролей. Пример: [..., Метаданные.Роли.КонтрольПометкиУдаленияНоменклатуры.Имя].
//  Пользователь - Пользователи	 - Пользователи.ТекущийПользователь().
//  ИскатьВсе	 - Булево - Результат = Истина Если Найдены все ИЛИ хотябы одна роль.
// 
// Возвращаемое значение:
//  Булево - ИскатьВсе = Истина Тогда Результат = Истина Если пользователю выдали все проверяемые роли.
//
&НаСервере
Функция РольПрисвоеннаПользователюВИнтерактивномРежиме(мИменаРолей, _Пользователь, ИскатьВсе = Ложь)
	
	_Результат = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	ГруппыДоступаПользователи.Ссылка.Профиль КАК Профиль
		|ПОМЕСТИТЬ ПрофилиПользователя
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|ГДЕ
		|	ГруппыДоступаПользователи.Пользователь = &Пользователь
		|
		|СГРУППИРОВАТЬ ПО
		|	ГруппыДоступаПользователи.Ссылка.Профиль
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрофилиПользователя.Профиль КАК Профиль,
		|	ПрофилиГруппДоступаРоли.Роль КАК Роль
		|ИЗ
		|	ПрофилиПользователя КАК ПрофилиПользователя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ПрофилиПользователя.Профиль = ПрофилиГруппДоступаРоли.Ссылка
		|ГДЕ
		|	ПрофилиГруппДоступаРоли.Роль.Имя В (&мИменаРолей)"";
	
	Запрос.УстановитьПараметр(""мИменаРолей"", 	мИменаРолей);
	Запрос.УстановитьПараметр(""Пользователь"", 	_Пользователь);		
	
	РезультатЗапроса 		= Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	Если ИскатьВсе Тогда
		_Результат = ВыборкаДетальныеЗаписи.Количество() = мИменаРолей;
	Иначе
		_Результат = ВыборкаДетальныеЗаписи.Следующий();
	КонецЕсли;
	
	Возврат _Результат;

КонецФункции // РольПрисвоеннаПользователюВИнтерактивномРежиме()

#КонецОбласти"}
},
{0,
{"ОтправитьПочтовоеСообщение",0,0,"ОтправитьПочтовоеСообщение_Кистанов","
#Область ПрограммныйИнтерфейс_Модуля
<?>

// Зависимости:
//   ТекущаяОбласть - ПрофильПочтыМассаднраРУ, ПолучитьПароль
//
// Параметры:
// 	ОписаниеПисьма - Структура:
//		* ОтправительИмя - Строка - имя (адрес) отправителя письма (app1C@massandra.ru)
//		* Получатели - Массив Из Строка - адреса разделенные запятой (it@massandra.su, it@massandra.ru)
//		* Тема - Строка - тема письма
//		* Текст - Строка - текст в тело письма
//		* ТипТекста - ТипТекстаПочтовогоСообщения - Тип текстовых данных письма
//		* ФайлыВложения - Любой файл (бинарные данные)
//
// Возвращаемое значение:
//   Булево - Истина, если письмо успешно отправленно
//
Функция ОтправитьПочтовоеСообщение(ОписаниеПисьма) Экспорт

	Если ОписаниеПисьма.Получатели.Количество() = 0 Тогда
		Сообщить(""Укажите получателя письма!"");
		Возврат Ложь;
	КонецЕсли;
	
	logApp1C = ОписаниеПисьма.ПользовательSMTP;
	pasApp1C = ПолучитьПароль(logApp1C);
	Профиль  = ПрофильПочтыМассаднраРУ(logApp1C, pasApp1C);
	Письмо 	 = Новый ИнтернетПочтовоеСообщение;	
	Текст 	 = Письмо.Тексты.Добавить(ОписаниеПисьма.Текст, ?(ОписаниеПисьма.ТипТекста = Неопределено, 
									ТипТекстаПочтовогоСообщения.ПростойТекст, ОписаниеПисьма.ТипТекста) );
	
	ИтераторВложений = 0;
	Для Каждого Файл Из ОписаниеПисьма.ФайлыВложения Цикл
		Если ЗначениеЗаполнено(Файл.Путь) И ЗначениеЗаполнено(Файл.Имя) Тогда
			ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолныйПуть);			
						
			Письмо.Вложения.Добавить(ДвоичныеДанные, Файл.Имя);
			Письмо.Вложения[ИтераторВложений].ТипСодержимого = Файл.ТипMIME;
			Письмо.Вложения[ИтераторВложений].Кодировка = ""utf-8"";
				
			ИтераторВложений = ИтераторВложений + 1;
		КонецЕсли;
	КонецЦикла;
	
	Письмо.Тема 			= ОписаниеПисьма.Тема; 
	Письмо.Отправитель 		= профиль.Пользователь;
	Письмо.ИмяОтправителя 	= ОписаниеПисьма.ОтправительИмя;
	
	ИтераторПолучателей = 0;
	Для Каждого получатель ИЗ ОписаниеПисьма.Получатели Цикл
		Если ИтераторПолучателей > 0 Тогда
			Письмо.Копии.Добавить(получатель);
		Иначе
			Письмо.Получатели.Добавить(получатель) ;
		КонецЕсли;
		ИтераторПолучателей = ИтераторПолучателей + 1;
	КонецЦикла;
	
	Письмо.СпособКодированияНеASCIIСимволов = СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.MIME;
	
	Почта = Новый ИнтернетПочта;	
	Попытка
		Почта.Подключиться(Профиль);
		Почта.Послать(Письмо, ОбработкаТекстаИнтернетПочтовогоСообщения.Обрабатывать, ПротоколИнтернетПочты.SMTP);
	Исключение
		Возврат ЛОЖЬ;
	КонецПопытки;
	
	Почта.Отключиться();
	
	Возврат ИСТИНА;
	
КонецФункции

#Область ДополнительныеПараметрыПисьма

// Функция - Новый описание интернет почта письма
// 
// Возвращаемое значение:
//  ОписаниеПисьма - Структура:
//		* ПользовательSMTP - Строка - ИнтернетПочтовыйПрофиль.Пользователь
//		* ОтправительИмя - Строка - имя (адрес) отправителя письма (app1C@massandra.ru)
//		* Получатели - Массив Из Строка - адреса разделенные запятой (it@massandra.su, it@massandra.ru)
//		* Тема - Строка - тема письма
//		* Текст - Строка - текст в тело письма
//		* ТипТекста - ТипТекстаПочтовогоСообщения - Тип текстовых данных письма
//		* ФайлыВложения - Любой файл (бинарные данные)
//
Функция НовыйОписаниеИнтернетПочтаПисьма() Экспорт
	
	ФайлыВложения 	= Новый Массив;
	ОписаниеПисьма 	= Новый Структура;
	
	ОписаниеПисьма.Вставить(""ПользовательSMTP"");
	ОписаниеПисьма.Вставить(""ОтправительИмя"");
	ОписаниеПисьма.Вставить(""Получатели"",		Новый Массив);	
	ОписаниеПисьма.Вставить(""Тема"");
	ОписаниеПисьма.Вставить(""Текст"");
	ОписаниеПисьма.Вставить(""ТипТекста"",		Неопределено);
	ОписаниеПисьма.Вставить(""ФайлыВложения"",	ФайлыВложения);
	
	Возврат ОписаниеПисьма;

КонецФункции // НовыйОписаниеИнтернетПочтаПисьма()

// Функция - Новый файл вложения
//
// Параметры:
// 	Путь - Строка - абсолютный путь к файлу
//  Имя - Строка - Имя файла
//  Расширение - Строка - DOCX, HTML, ODS, PDF, TXT, XLS, XLSX
// 
// Возвращаемое значение:
//  Вложение - Структура
//
Функция НовыйФайлВложения(Путь, Имя, расширениеФайла) Экспорт

	CommonMIMEtypes = Новый Соответствие;
	
	CommonMIMEtypes.Вставить(""DOCX"", 	""application/vnd.openxmlformats-officedocument.wordprocessingml.document"");
	CommonMIMEtypes.Вставить(""HTML"", 	""text/html"");
	CommonMIMEtypes.Вставить(""ODS"", 	""application/vnd.oasis.opendocument.spreadsheet"");
	CommonMIMEtypes.Вставить(""PDF"", 	""application/pdf"");
	CommonMIMEtypes.Вставить(""TXT"", 	""text/plain"");
	CommonMIMEtypes.Вставить(""XLS"", 	""application/vnd.ms-excel"");
	CommonMIMEtypes.Вставить(""XLSX"", 	""application/vnd.ms-excel"");
		
	MIMEtypes 	= CommonMIMEtypes.Получить(расширениеФайла);
	MIMEtypes 	= ?(MIMEtypes = Неопределено, """", MIMEtypes);
	
	ПолныйПуть 	= Путь + Имя;
	Вложение 	= Новый Структура;
	
	Вложение.Вставить(""ПолныйПуть"", 	ПолныйПуть);
	Вложение.Вставить(""Путь"",			Путь);
	Вложение.Вставить(""Имя"",			Имя);
	Вложение.Вставить(""ТипMIME"", 		MIMEtypes);
	Вложение.Вставить(""Расширение"", 	расширениеФайла);
	
	Возврат Вложение;

КонецФункции // НовыйФайлВложения()

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс_Модуля

#Область КонфигПочтовогоКлиента

// Функция - Профиль почты массаднра РУ
//
// Параметры:
//  Пользователь - Строка - ИнтернетПочтовыйПрофиль.Пользователь
//  Пароль		 - Строка - ИнтернетПочтовыйПрофиль.Пароль
// 
// Возвращаемое значение:
//  профиль - ИнтернетПочтовыйПрофиль
//
Функция ПрофильПочтыМассаднраРУ(Пользователь, Пароль) Экспорт

	профиль = Новый ИнтернетПочтовыйПрофиль;
	
	профиль.АдресСервераSMTP 	= ""mail.massandra.ru"";
    профиль.ПортSMTP 			= 465;
	профиль.Пользователь 		= Пользователь;
	профиль.Пароль 				= Пароль;
	профиль.ПользовательSMTP 	= Пользователь;
	профиль.ПарольSMTP 			= Пароль;	
	профиль.АутентификацияSMTP 	= СпособSMTPАутентификации.Login;

	Возврат профиль;
	
КонецФункции

// Зависимости:
//   ВнешнийРесурс - php сервер который отвечает паролем на переданный логин
//   так мы централизованно храним пароль что позволяет поменять его в одном
//   месте (при его замене) и защищает пароль от выкладывания кода во внешний мир
//
// Функция - Получить пароль
//
// Параметры:
//  ИмяПользователя	 - Строка - Логин по которому будет получен пароль
// 
// Возвращаемое значение:
//  результат - Строка - пароль для запрашиваемого логина
//
Функция ПолучитьПароль(ИмяПользователя) Экспорт
	
	Соединение 		= Новый HTTPСоединение(""192.168.171.150"");		
	СтрокаЗапроса	= ""/Honeywell/q/passport/ps-mdYA-nfkTFMqq-azpPDardapqb.php?Login="" + ИмяПользователя;	
	Запрос 			= Новый HTTPЗапрос(СтрокаЗапроса); 
	Ответ 			= Соединение.Получить(Запрос);
	результат 		= Неопределено;
	
	Если Ответ.КодСостояния = 200 Тогда
		результат = Ответ.ПолучитьТелоКакСтроку(); 	
	КонецЕсли;
	
	Возврат результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти"}
},
{0,
{"НовыйСообщитьПользователю",0,0,"НовыйСообщитьПользователю_Кистанов","#Область СообщитьПользователю

#Область СервернаяФункция
// 1) Серверная функция (вызывается с сервера)
//    Выводит сообщение на экран пользователя.
//
// Рекомендация использовать с:
//   НовыйСообщитьПользователю
//
// Зависимости:
//   ТекущаяОбласть - СообщитьПользователюКлиентСервер
//
// Параметры:
//   ТекстСообщенияПользователю - Строка - текст сообщения.
//   КлючДанных - Ссылка на объект, Ссылка на объект информационной базы,
//                к которому это сообщение относится, или ключ записи.
//   Поле - Строка - Содержит путь к реквизиту формы, для которого было
//                   выведено сообщение, или к данным объекта.
//                  (Например, путь к реквизиту Номенклатура в строке
//                   с индексом 10 табличной части документа, в которой
//   				 произошла ошибка: ТабличнаяЧастьСоставДокумента[10].Номенклатура.
//   Отказ - Ссылка - ссылка на Отказ который присутствует в обработчиках объектов.
//
// Пример:
//	  МассивТекста = Новый Массив;
//	  МассивТекста.Добавить(""Привет сервер!"");
//	  МассивТекста.Добавить(""Это массив текста."");
//	  Сообщение = СтрСоединить(МассивТекста, ""-"");
//	  СообщитьПользователюНаСервере(Сообщение); = ""Привет сервер! - Это массив текста.""
//
&НаСервере
Процедура СообщитьПользователюНаСервере(Знач ТекстСообщенияПользователю, Знач КлючДанных = Неопределено, Знач Поле = """", Отказ = Ложь) Экспорт
 
 ЭтоОбъект = Ложь;
 Если КлючДанных <> Неопределено
  И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
  
  ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
  ЭтоОбъект = СтрНайти(ТипЗначенияСтрокой, ""Object."") > 0;
 КонецЕсли;
 
 ОбщегоНазначенияСлужебныйКлиентСервер.СообщитьПользователюКлиентСервер(ТекстСообщенияПользователю, КлючДанных, Поле, Отказ, ЭтоОбъект);
 
КонецПроцедуры

#КонецОбласти

#Область КлиентскаяФункция
// 2) Клиентская функция (вызывается на клиенте)
//    Выводит сообщение на экран пользователя.
//
// Рекомендация использовать с:
//   
//
// Зависимости:
//   ТекущаяОбласть - СообщитьПользователюКлиентСервер
//
// Параметры:
//   ТекстСообщенияПользователю - Строка - текст сообщения.
//   КлючДанных - Ссылка на объект, Ссылка на объект информационной базы,
//                к которому это сообщение относится, или ключ записи.
//   Поле - Строка - Содержит путь к реквизиту формы, для которого было
//                   выведено сообщение, или к данным объекта.
//                  (Например, путь к реквизиту Номенклатура в строке
//                   с индексом 10 табличной части документа, в которой
//   				 произошла ошибка: ТабличнаяЧастьСоставДокумента[10].Номенклатура.
//   Отказ - Ссылка - ссылка на Отказ который присутствует в обработчиках объектов.
//
// Пример:
//	  МассивТекста = Новый Массив;
//	  МассивТекста.Добавить(""Привет сервер!"");
//	  МассивТекста.Добавить(""Это массив текста."");
//	  Сообщение = СтрСоединить(МассивТекста, ""-"");
//	  СообщитьПользователюНаКлиенте(Сообщение); = ""Привет сервер! - Это массив текста.""
//
&НаКлиенте
Процедура СообщитьПользователюНаКлиенте(Знач ТекстСообщенияПользователю, Знач КлючДанных = Неопределено, Знач Поле = """", Отказ = Ложь) Экспорт
 
 ОбщегоНазначенияСлужебныйКлиентСервер.СообщитьПользователюКлиентСервер(ТекстСообщенияПользователю, КлючДанных, Поле, Отказ);
 
КонецПроцедуры

#КонецОбласти

#Область СлужебнаяКлиентСерверная
// 3) Общая служебная клиент-серверная реализация в модуле ОбщегоНазначенияСлужебныйКлиентСервер:
//    Выводит сообщение на экран пользователя. (общий модуль с галочками: Сервер, ВызовСервера).
//
// Рекомендация использовать с:
//   СообщитьПользователюНаСервере, СообщитьПользователюНаКлиенте
//
// Зависимости:
//
//
// Параметры:
//   ТекстСообщенияПользователю - Строка - текст сообщения.
//   КлючДанных - Ссылка на объект, Ссылка на объект информационной базы,
//                к которому это сообщение относится, или ключ записи.
//   Поле - Строка - Содержит путь к реквизиту формы, для которого было
//                   выведено сообщение, или к данным объекта.
//                  (Например, путь к реквизиту Номенклатура в строке
//                   с индексом 10 табличной части документа, в которой
//   				 произошла ошибка: ТабличнаяЧастьСоставДокумента[10].Номенклатура.
//   Отказ - Ссылка - ссылка на Отказ который присутствует в обработчиках объектов.
//
// Пример:
//	  СообщитьПользователюКлиентСервер(Сообщение);
//
&НаСервере
Процедура СообщитьПользователюКлиентСервер(Знач ТекстСообщенияПользователю, Знач КлючДанных, Знач Поле, Отказ = Ложь, ЭтоОбъект = Ложь) Экспорт
 
 Сообщение = Новый СообщениеПользователю;
 Сообщение.Текст = ТекстСообщенияПользователю;
 Сообщение.Поле = Поле;
 
 Если ЭтоОбъект Тогда
   Сообщение.УстановитьДанные(КлючДанных);
 Иначе
   Сообщение.КлючДанных = КлючДанных;
 КонецЕсли;
 
 Сообщение.Сообщить();
 Отказ = Истина;
 
КонецПроцедуры

#КонецОбласти

#КонецОбласти"}
},
{0,
{"ДинамическийВыводТаблицыЗначенийНаФорму",0,0,"ДинамическийВыводТаблицыЗначенийНаФорму_Кистанов","#Область ДинамическийВыводТаблицыЗначенийНаФорму
<?>
// Создаем только Реквизит формы ТЗ (например: ""ТЧ1""), (новаяТЗначений, ""ТЧ1"", ""ТЧ1"")
//
// На форме есть реквизит с Типом ТаблицаЗначений у которой не созданы колонки,
// необходимо программно на лету создавать колонки и заполнять произвольными данными.
//
// Рекомендация использовать с:
//   НовыйТаблицаЗначений, ОписаниеКолонокТаблицыЗначенийСтруктурой
//
// Зависимости:
//   Шаблоны - НовыйЗапрос, ТекстЗапросаПрограммно, ПоляЗапросаСхемыКомпоновкиДанных
//
// Параметры:
//   ИсточникДанных - ТаблицаЗначений - имя типа метаданный в единственном числе (Документ).
//   ЭтаФормаИмяПриемника - Строка - имя расположенной на форме таблицы значений (которой надо добавить колонки).
//   ЭлементыИмяПриемника - Строка - имя элемента формы путь к данных которого является ЭтаФормаИмяПриемника.
//
// Пример:
//   ВывестиТаблицуЗначенияВТаблицуНаФорме(Выборка.Выгрузить(), ""ТаблицаОстатки"", ""ЭлементТаблицаОстатки"");
//
&НаСервере
Процедура ВывестиТаблицуЗначенияВТаблицуНаФорме(ИсточникДанных, ЭтаФормаИмяПриемника, ЭлементыИмяПриемника = Неопределено)
	Если ЭлементыИмяПриемника = Неопределено Тогда
		ЭлементыИмяПриемника = ЭтаФормаИмяПриемника;
	КонецЕсли; 
	
	// Собирается инофрмация по добавленным ранее элементам формы и реквизитам, на которые элементы формы ссылаются.
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеЭлементы = Новый Массив;
	Для каждого Эл Из ЭтаФорма.Элементы[ЭлементыИмяПриемника].ПодчиненныеЭлементы Цикл
		УдаляемыеРеквизиты.Добавить(Эл.ПутьКДанным);
		УдаляемыеЭлементы.Добавить(Эл);
	КонецЦикла; 
	Для каждого Эл Из УдаляемыеЭлементы Цикл
		ЭтаФорма.Элементы.Удалить(Эл);
	КонецЦикла; 
	
	// Добавляются колонки из ТаблицыЗначений в реквизит таблицы ЭтаФормаИмяПриемника
	НовыеРеквизиты = Новый Массив;
	Для Каждого Колонка Из ИсточникДанных.Колонки Цикл
		НовыйРеквизит = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ЭтаФормаИмяПриемника, Колонка.Заголовок);
	   	НовыеРеквизиты.Добавить(НовыйРеквизит);
	КонецЦикла;

    //Удаляются старые и устанавливаются новые реквизиты
	ЭтаФорма.ИзменитьРеквизиты(НовыеРеквизиты, УдаляемыеРеквизиты);
	
    // Добавляются колонки из ТаблицыЗначений в элементы ЭлементыИмяПриемника со ссылкой на колонки в ЭтаФормаИмяПриемника
    Для Каждого Колонка Из ИсточникДанных.Колонки Цикл
        НовыйЭлемент = ЭтаФорма.Элементы.Добавить( ЭтаФормаИмяПриемника + ""_"" + Колонка.Имя, Тип(""ПолеФормы""), ЭтаФорма.Элементы[ЭлементыИмяПриемника]);
        НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи; //Или ПолеВвода, или что-то другое;
        НовыйЭлемент.ПутьКДанным = ЭтаФормаИмяПриемника + ""."" + Колонка.Имя;
    КонецЦикла;
 
 	// В созданный реквизит загружается ТЗ
	ЭтаФорма[ЭтаФормаИмяПриемника].Загрузить(ИсточникДанных);
КонецПроцедуры

#КонецОбласти"}
},
{0,
{"ОписаниеКолонокТаблицыЗначенийСтруктурой",0,0,"ОписаниеКолонокТаблицыЗначенийСтруктурой_Кистанов","#Область ОписаниеКолонокТаблицыЗначенийСтруктурой

// Зависимости:
//   Шаблоны - НовыйТаблицаЗначенийОбщая
//
// Массив Из Структур в ТаблицуЗначений
// 
// Возвращаемое значение:
//  ОписаниеКолонок - Массив Из Структура, описывает колонки Тбалицы значений.
//
&НаКлиенте
Функция ОписаниеКолонокТаблицыЗначенийСтруктурой<?ИмяСтруктуры>()
	ОписаниеКолонок = Новый Массив;
	
	ТипТип 			= Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(150));
	ТипИмя 			= Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(150));
	ТипСценарий 	= Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(150));
	ТипРоль 		= Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(150));
	ТипУровень 		= Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(150));
	ТипПревышает 	= Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(150));
	
	КолонкаТип 			= 
	Новый Структура(""Имя,Тип,Заголовок,СоставнойТип,Ширина"", ""Тип"",       ТипТип,       ""Тип"", 		 Ложь, Неопределено);
	КолонкаИмя 			= 
	Новый Структура(""Имя,Тип,Заголовок,СоставнойТип,Ширина"", ""Имя"",       ТипИмя,       ""Имя"",    	 Ложь, Неопределено);
	КолонкаСценарий 	= 
	Новый Структура(""Имя,Тип,Заголовок,СоставнойТип,Ширина"", ""Роль"", 	  ТипСценарий,  ""Роль"", 	 Ложь, Неопределено);
	КолонкаРоль 		= 
	Новый Структура(""Имя,Тип,Заголовок,СоставнойТип,Ширина"", ""Сценарий"",  ТипРоль,      ""Сценарий"",  Ложь, Неопределено);
	КолонкаУровень 		= 
	Новый Структура(""Имя,Тип,Заголовок,СоставнойТип,Ширина"", ""Уровень"",   ТипУровень,   ""Уровень"",   Ложь, Неопределено);
	КолонкаПревышает 	= 
	Новый Структура(""Имя,Тип,Заголовок,СоставнойТип,Ширина"", ""Превышает"", ТипПревышает, ""Превышает"", Ложь, Неопределено);
	
	ОписаниеКолонок.Добавить(КолонкаТип);
	ОписаниеКолонок.Добавить(КолонкаИмя);
	ОписаниеКолонок.Добавить(КолонкаСценарий);
	ОписаниеКолонок.Добавить(КолонкаРоль);
	ОписаниеКолонок.Добавить(КолонкаУровень);
	ОписаниеКолонок.Добавить(КолонкаПревышает);
	
	Возврат ОписаниеКолонок;
КонецФункции

#КонецОбласти"}
},
{0,
{"ПроверитьЭтоРабочаяБазаДанных",0,0,"ПроверитьЭтоРабочаяБазаДанных_Кистанов","
#Область ПроверитьЭтоРабочаяБазаДанных

// Возвращаемое значение:
// Булево - Истина = Рабочая
//
Функция ЭтоРабочаяБазаДанных() Экспорт
	
	ЭтоРабочая = Ложь;
	ИмяРабочей = ""ZUP"";

	ИмяСвоейБазы = Макс(НСтр(СтрокаСоединенияИнформационнойБазы(),""Ref""),НСтр(СтрокаСоединенияИнформационнойБазы(),""File""));	
    Если ВРег(ИмяСвоейБазы) = ИмяРабочей Тогда
	   ЭтоРабочая = Истина;
    КонецЕсли;
	
	Возврат ЭтоРабочая;
	
КонецФункции

#КонецОбласти
"}
},
{0,
{"ХранениеФайловНаПримереКартинки",0,0,"ХранениеФайловНаПримереКартинки_Кистанов","
#Область ПоказатьТекущуюКартинку

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	АдресКартинки = ПолучитьНавигационнуюСсылку(Объект.Ссылка, ""Изображение"");

КонецПроцедуры

#КонецОбласти

#Область СохранениеКартинку

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если ЭтоАдресВременногоХранилища(АдресКартинки) Тогда
		ТекущийОбъект.Изображение	= Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресКартинки));
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗагрузитьКартинку

&НаКлиенте
Процедура ЗагрузитьКартинку(Команда)

	Оповещение = Новый ОписаниеОповещения(""ЗагрузитьКартинкуЗавершение"", ЭтотОбъект);
	НачатьПомещениеФайла(Оповещение, , , Истина, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКартинкуЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;

	ДатаЗагрузки		= ТекущаяДата();
	АдресКартинки		= Адрес;
	Модифицированность	= Истина;

КонецПроцедуры

#КонецОбласти

#Область УдалитьКартинку

Процедура УдалитьКартинку()
	ЭтаФорма.АдресКартинки = """";
	// А также, необходимо на сервере очистить ХЗнч	
	// Объект.Изображение = Неопределено;
	// Например в событии ""ПередЗаписьюНаСервере""
	// при условии что, Если ЭтаФорма.АдресКартинки = """" Тогда
КонецПроцедуры

#КонецОбласти"}
},
{0,
{"Добавить_РЕКВИЗИТ_наФормуПрограммно",0,0,"ДобавитьРеквизитаНаФормуПрограммно_Кистанов","#Область ДобавитьРеквизитНаФорму

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
#Область ДобавлениеРеквизитовФормы
	
    // Массив для новых реквизитов
    ДобавляемыеРеквизиты	= Новый Массив;
		
    // Опишем ревизиты формы
    Реквизит_ЯчейкаХранения = Новый РеквизитФормы(""ЯчейкаХранения"",	Новый ОписаниеТипов(""СправочникСсылка.ЯчейкиХранения""),	, ""Ячейка"");
    Реквизит_ТекущийОстаток = Новый РеквизитФормы(""ТекущийОстаток"",	Новый ОписаниеТипов(""Число"", , , Новый КвалификаторыЧисла(10, 3)), , ""Остаток"");
	
    // Для наглядности заполним массив после описания реквизитов формы
    ДобавляемыеРеквизиты.Добавить(Реквизит_ЯчейкаХранения);
    ДобавляемыеРеквизиты.Добавить(Реквизит_ТекущийОстаток);
	
    // Добавим новые реквизиты в форму
    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
#КонецОбласти
	
#Область ДобавлениеЭлементовФормы
	
    // Горизонтальная группа без отображения на форме
    ГруппаФормы = Элементы.Добавить(""Группа_СправочныеДанные"", Тип(""ГруппаФормы""));
    ГруппаФормы.Вид                        = ВидГруппыФормы.ОбычнаяГруппа;
    ГруппаФормы.Отображение                = ОтображениеОбычнойГруппы.Нет;
    ГруппаФормы.ОтображатьЗаголовок        = Ложь;
    ГруппаФормы.Группировка                = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
    // Элементы
	
    НовыйЭлемент = Элементы.Добавить(""ЯчейкаХранения"", Тип(""ПолеФормы""), ГруппаФормы);
    НовыйЭлемент.ПутьКДанным                  = ""ЯчейкаХранения"";
    НовыйЭлемент.Вид                          = ВидПоляФормы.ПолеВвода;
    НовыйЭлемент.ТолькоПросмотр               = Истина;
	
    НовыйЭлемент = Элементы.Добавить(""ТекущийОстаток"", Тип(""ПолеФормы""), ГруппаФормы);
    НовыйЭлемент.ПутьКДанным                  = ""ТекущийОстаток"";
    НовыйЭлемент.Вид                          = ВидПоляФормы.ПолеВвода;
    НовыйЭлемент.ТолькоПросмотр               = Истина;
	НовыйЭлемент.УстановитьДействие(""ПриИзменении"", ""ЭтоИмяФункцииВыполнитьДействиеПриИзмененииДанных"");
	
#КонецОбласти
	
#Область ЗаполнениеДанных
	
    //  Имитируем заполнение данных
    ЭтаФорма.ЯчейкаХранения = ПредопределенноеЗначение(""Справочник.ЯчейкиХранения.Распаковка"");
    ЭтаФорма.ТекущийОстаток = 12;
	
#КонецОбласти
	
КонецПроцедуры

#Область УдалениеРеквизитовФормы
	
    // Массив удаляемых реквизитов
    УдаляемыеРеквизиты = Новый Массив;
    УдаляемыеРеквизиты.Добавить(""ЯчейкаХранения"");
    УдаляемыеРеквизиты.Добавить(""ТекущийОстаток"");
	
    // Удалим реквизиты формы
    ИзменитьРеквизиты( , УдаляемыеРеквизиты);
	
#КонецОбласти

#Область ДобавлениеРеквизитаТЧ
	
    // Массив для новых реквизитов
    ДобавляемыеРеквизиты = Новый Массив;
	
    // Опишем ревизиты формы
    Реквизит_Ячейка = Новый РеквизитФормы(""Ячейка"",	Новый ОписаниеТипов(""СправочникСсылка.ЯчейкиХранения""),	""Объект.Комплектация"", ""Ячейка"");
	
    // Для наглядности заполним массив после описания реквизитов формы
    ДобавляемыеРеквизиты.Добавить(Реквизит_Ячейка);
	
    // Добавим новые реквизиты в форму
    ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
    НовыйЭлемент = Элементы.Добавить(""КомплектацияЯчейка"", Тип(""ПолеФормы""), Элементы.Комплектация);
    НовыйЭлемент.ПутьКДанным    = ""Объект.Комплектация.Ячейка"";
    НовыйЭлемент.Вид            = ВидПоляФормы.ПолеВвода;
	
#КонецОбласти
	

#Область СТипомПроизвольный
    ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(""Реквизит"", Новый ОписаниеТипов("""")));
#КонецОбласти

#КонецОбласти"}
},
{0,
{"ДобавитьСвязку_Группу_Элемент_Реквизит_ПоБыстрому_Кистанов",0,0,"ДобавитьСвязку_Группу_Элемент_Реквизит_ПоБыстрому","&НаСервере
Процедура ДобавитьСвязку_Группу_Элемент_Реквизит_ПоБыстрому()

#Область ДобавлениеГруппыФормы	
	ГруппаФормыАвтор1 				= ЭтаФорма.Элементы.Добавить(""ГруппаФормыАвтор1"", Тип(""ГруппаФормы""),	ЭтаФорма);
	ГруппаФормыАвтор1.Вид 			= ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФормыАвтор1.Группировка 	= ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
#КонецОбласти
	
#Область ДобавлениеРеквизитовФормы
	// Массив для новых реквизитов
	ДобавляемыеРеквизиты = Новый Массив;
		
	// Опишем ревизиты формы
	Реквизит_АвторНаименование = Новый РеквизитФормы(
	""Автор1"",
	Новый ОписаниеТипов(""Строка"",,, Новый КвалификаторыСтроки(150))
	,,
	""Автор Тест1"");
		
	// Заполним массив после описания реквизитов формы
	ДобавляемыеРеквизиты.Добавить(Реквизит_АвторНаименование);
		
	// Добавим новые реквизиты в форму
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
#КонецОбласти
	
#Область ДобавлениеЭлементовФормы
	ИмяЭлемента = ""АвторНаименование"";
	
	// ГруппаФормыАвтор1 - группа в которую будет помещен реквизит
	ЭлементФормы = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип(""ПолеФормы""), ГруппаФормыАвтор1);        
	ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
	ЭлементФормы.ПутьКДанным = ""Автор1""; //Тип строка, Объект.ИмяРеквизита или имяРеквизита если это рек. формы
#КонецОбласти
		
#Область ЗаполнениеДанных
	ЭтаФорма.Автор1 = ""Hello world""; // устанавливаем значение реквизита
#КонецОбласти

КонецПроцедуры

//&НаСервере
//Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//    ДобавляемыеРеквизиты = Новый Массив();
//    РеквизитТестовый = Новый РеквизитФормы(""НазваниеРеквизита"",Новый ОписаниеТипов(""Булево"")); 
//    ДобавляемыеРеквизиты.Добавить(РеквизитТестовый);
//    ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
//    НовЭлемент = Элементы.Добавить(""Тест"", Тип(""ПолеФормы""));
//    НовЭлемент.Вид = ВидПоляФормы.ПолеФлажка;    
//    НовЭлемент.Заголовок = ""Получилось!""; 
//    НовЭлемент.ПутьКДанным = ""НазваниеРеквизита"";   
//    НовЭлемент.Видимость = Истина; 
//КонецПроцедуры"}
},
{0,
{"СКД_ВЫЧИСЛЯНМЫЕ_Поля",0,0,"СКДВычисляемыеПоля_Кистанов","// Полный синтаксис имплементации функции следующий:
// ВычислитьВыражение(Выражение, Группировка, ТипРасчета, Начало, Конец, Сортировка, ИерархическаяСортировка, ОбработкаОдинаковыхЗначенийПорядка)



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// МИНИМАЛЬНОЕ ЗНАЧЕНИЕ ИТОГОВ    (подходит если знч уникальный инкремент, например ОДОМЕТР)
//
// Так как нельзя использовать вложенные агрегатные функции, поэтому:
//
// 1. На закладке ""Вычисляемые поля"" добавляем выдуманное поле ""СпидометрМинимум"" и устанавливаем ему выражение:
Сумма(ВЫЧИСЛИТЬВыражениесгруппировкоймассив(""Минимум(СпидометрВыезда)"", ""ТранспортноеСредство""))
// СпидометрВыезда      - это поле отчета
// ТранспортноеСредство - это поле отчета по которому мы группируем
//  *СпидометрМинимум   - это поле мы придумали и оно будет содержать результат выражения
//
// 2. Переходим на закладку ""ресурсы"" и добавляем поле ""СпидометрВыезда"" с выражением:
Сумма(ВЫЧИСЛИТЬВыражениесгруппировкоймассив(""СпидометрМинимум"", ""ТранспортноеСредство""))
//
// В колонку ""Расчитать по.."" указываем ""Общий итог"".
// В результате мы получим сумму поля ""СпидометрВыезда"" для минимальных значений в разрезе поля ""ТранспортноеСредство""
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// МИНИМАЛЬНАЯ ПОЗИЦИЯ ИТОГОВ    (подходит если знч НЕ уникальный инкремент, например РасходТопливаЗаПериод)
//
// 1. Что бы получить первую строку значение в группировке необходимо в запросе добавить доп. выборку
//  
    ЛЕВОЕ СОЕДИНЕНИЕ (
        ВЫБРАТЬ 
            ТранспортноеСредство,
            МИНИМУМ(ПутевойЛист) КАК ПервыйПЛ
        ИЗ 
            ВТРезультат
        СГРУППИРОВАТЬ ПО
        	ТранспортноеСредство) КАК ТГСМПриВозвращенииПервыйПоказатель
    ПО ТРезультат.ПутевойЛист = ТГСМПриВозвращенииПервыйПоказатель.ПервыйПЛ
    И  ТРезультат.ТранспортноеСредство = ТГСМПриВозвращенииПервыйПоказатель.ТранспортноеСредство
//
// 2. Обработать выборку нужного поля И ВАЖНО привести к формату числа (иначе ИТОГОВАЯ сумма будет не совпадать с суммой группировки!)
//
    ВЫБОР
    	КОГДА ТРезультат.ПутевойЛист = ТГСМПриВозвращенииПервыйПоказатель.ПервыйПЛ
    	И ТРезультат.ТранспортноеСредство = ТГСМПриВозвращенииПервыйПоказатель.ТранспортноеСредство ТОГДА
    		ВЫРАЗИТЬ(ЕСТЬNULL(ОстатокГСМПриВыезде, 0) КАК ЧИСЛО(15, 2))
    	ИНАЧЕ
    		0
    КОНЕЦ КАК ОстатокГСММин
//
// ВЫЧИСЛЯЕМЫЕ ПОЛЯ:
// 3. Для вывода в группировку только первых строк: На закладке ""Вычисляемые поля"" создаем поле ""Минимум.ГСМ"" с выражением:
//
ВычислитьВыражение(""Максимум(ОстатокГСММин)"", ""ТранспортноеСредство"")
//
// 4. Для вывода в ИТОГИ суммы только знч группировок (первых строк): На закладке ""Вычисляемые поля"" создаем поле ""Минимум.ГСМИТОГ"" с выражением:
//
ВЫЧИСЛИТЬВыражениесгруппировкоймассив(""Максимум(ОстатокГСММин)"", ""ТранспортноеСредство"")
//
// 4. Для вывода в ИТОГИ суммы только знч группировок (первых строк): На закладке ""Вычисляемые поля"" создаем поле ""Минимум.ГСМИТОГ"" с выражением:
//
// РЕСУРСЫ:
// 5. Для вывода в группировку только первых строк: На закладке ""Ресурсы"" добавляем первичное поле ""ОстатокГСМПриВыезде"" и выражение пишем:
//
Минимум.ГСМ
// 5.1 ВЫЖНО: Добавляем для данного поля ""Расчитывать по .."" (это поля по которому выполняется группировка):
ТранспортноеСредство
//
// 6. Для вывода в ИТОГИ знч группировок (только первых строк): На закладке ""Ресурсы"" добавляем первичное поле ""ОстатокГСМПриВыезде"" и выражение пишем:
//
Сумма(ВЫЧИСЛИТЬВыражениесгруппировкоймассив(""Сумма(Минимум.ГСМИТОГ)"", ""ТранспортноеСредство""))
// 6.1 ВЫЖНО: Добавляем для данного поля ""Расчитывать по .."" (это поля по которому выполняется группировка):
Общий итог
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////








///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ВычислитьВыражение(""ОстатокПриВыезде"",    ""ТранспортноеСредство"", ,""Текущая"", ""Текущая"")
ВычислитьВыражение(""ОстатокГСМПриВыезде"", ""ТранспортноеСредство"", ""Группировка"")


// ПОЛЯ ГРУППЫ В МАССИВ Создаем вычисляемое поле:
ВычислитьВыражениеСГруппировкойМассив(""ОстатокГСМПриВозвращении"")
// Добавляем Ресурс и просто поляВычисляемое с ""Расчитать по..."" поле группировки

// МИНИМАЛЬНОЕ ЗНАЧЕНИЕ (не мин позиция, а мин значение в группе ""ТранспортноеСредство"")
ВычислитьВыражение(""Минимум(ОстатокГСМПриВыезде)"", ""ТранспортноеСредство"", ""Группировка"")

// Пошаговое наращивание суммы по колонке
ВычислитьВыражение(""СУММА(ОстатокПриВыезде)"",,""Группировка"",""Первая"",""Текущая"")


// Доп. информация, я добавил свой макет и для обычных знч. использовал отдельные строки макета, для вычисляемых тоже отдельные,
// так как я хотел выводить минимум и максимум соответственно исключительно в итоговых показателях.


Первая – первая группировка или детальная запись в наборе, возможно указать смещение «Первая(2)»,
Последняя - последняя группировка или детальная запись в наборе, возможно указать смещение «Последняя(2)»,
Предыдущая – предыдущая от текущей группировки или детальной записи в наборе, возможно указать смещение «Предыдущая(2)»,
Последующая - следующая от текущей группировки или детальной записи в наборе, возможно указать смещение «Следующая(2)»,
Текущая – текущая группировка или детальная запись,
ОграничивающееЗначение – ограничение по конкретному значению, которое можно указать в скобках. Ограничивающее значение применяется к первому полю упорядочивания.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////"}
},
{0,
{"Вопрос",0,0,"Вопрос_Кистанов","&НаКлиенте
Процедура Заполнить(Команда)
	
	Оповещение = Новый ОписаниеОповещения(""ПослеЗакрытияВопроса"", ЭтотОбъект);
	
	ВопросУточнение 	= ?(Объект.Номенклатура.ЭтоГруппа, ""Всем элементам в выбранной группе"", ""Выбранному элементу"");
	ВопросТекст		= СтрШаблон(""Вы точно хотите заменить Код продукции   %1?"", ВопросУточнение);
	
	ПоказатьВопрос(
	Оповещение,
	ВопросТекст,
	РежимДиалогаВопрос.ОКОтмена,
	0, // таймаут в секундах
	КодВозвратаДиалога.Отмена, // (необ.) кнопка по умолчанию
	""ВНИМАНИЕ:"" // (необ.) заголовок
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Сообщить(""Ок"");
	КонецЕсли;	
	
КонецПроцедуры
"}
},
{0,
{"АсинхронноСоздатьИЗаписатьФайл_Кистанов",0,0,"АсинхронноСоздатьИЗаписатьФайл","
&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	
	Адрес	= СоздатьXML(ПараметрКоманды);
	Ссылка	= ПараметрКоманды;
	
	Диалог = новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Фильтр = ""Документ XML (*.xml)|*.xml""; 	// Строка с файловыми фильтрами
  	Диалог.Заголовок = ""Выберите документ XML""; 	// Текст заголовка окна выбора
	
	Оповещение = новый ОписаниеОповещения(""ОповещениеПослеВыбораФайлаДляЗаписи"", ЭтотОбъект, Ссылка);	 
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПослеВыбораФайлаДляЗаписи(ВыбранныеФайлы, ДопПараметры)Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип(""Массив"")	Тогда

		Адрес 				= СоздатьXML(ДопПараметры);		
		двоичныеДанные 		= ПолучитьИзВременногоХранилища(Адрес);
		ПолныйПутьКФайлу 	= ВыбранныеФайлы[0];

		двоичныеДанные.Записать(ПолныйПутьКФайлу);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция СоздатьXML(ПараметрКоманды) Экспорт
	
	Путь 	= ПолучитьИмяВременногоФайла();
	Запись 	= Новый ЗаписьXML;

	Запись.ОткрытьФайл(Путь, ""UTF-8""); 
	Запись.ЗаписатьОбъявлениеXML();	
	
	// Начало --->
	Запись.ЗаписатьНачалоЭлемента(""Произведения"");
	
	// Атрибут первого элемента с датой формирования файла
	Запись.ЗаписатьАтрибут(""generated"", Формат(ТекущаяДата(), ""ДФ=гггг-ММ-ddThh:mm:ss; ДЛФ=DT""));
	
	// Записываем элемент для каждого документа конфигурации. В текст помещаем имя документа.
	//Для Каждого Док Из Метаданные.Документы Цикл
	//	Запись.ЗаписатьНачалоЭлемента(""Документ"");       		
	//	Запись.ЗаписатьТекст(Док.Имя);				
	//	Запись.ЗаписатьКонецЭлемента();
	//КонецЦикла;
	
	// <--- Конец
	Запись.ЗаписатьКонецЭлемента();

	// ЗакрытьФайл!
	Запись.Закрыть();
	
	// Получаем двоичные данные файла и помещаем их во временное хранилище
	ДвоичныеДанные = Новый ДвоичныеДанные(Путь);
	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
	
	Возврат Адрес; // Возвращаем адрес файла в хранилище
	
КонецФункции
"}
},
{0,
{"АсинхронноПрочитатьФайл_Кистанов",0,0,"АсинхронноПрочитатьФайл","
&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)

	Ссылка	= ПараметрКоманды;
	
	Диалог = новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Фильтр 		= НСтр(""ru = 'Документ'; en = 'Document'"") + "" XML (*.xml)|*.xml"";
  	Диалог.Заголовок 	= НСтр(""ru = 'Укажите путь и имя для сохранения'; en = 'Specify the path and name to save'"");
	
	Оповещение = новый ОписаниеОповещения(""ОповещениеПослеВыбораФайлаДляЧтения"", ЭтотОбъект, Ссылка);	 
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПослеВыбораФайлаДляЧтения(ВыбранныеФайлы, ДопПараметры)Экспорт
	Если ТипЗнч(ВыбранныеФайлы) = Тип(""Массив"")	Тогда
		ОписаниеФайла = новый ОписаниеПередаваемогоФайла();
		ОписаниеФайла.Имя = ВыбранныеФайлы[0];
		ПомещаемыеФайлы = новый Массив;
		ПомещаемыеФайлы.Добавить(ОписаниеФайла);
		Оповещение = новый ОписаниеОповещения(""ОповещениеПомещениеФайла"", ЭтотОбъект, ДопПараметры);		
		НачатьПомещениеФайлов(Оповещение, ПомещаемыеФайлы,, Ложь, ДопПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПомещениеФайла(ПомещенныеФайлы, ДопПараметры)Экспорт
	Если ТипЗнч(ПомещенныеФайлы) = Тип(""Массив"") Тогда
		СсылкаСозданного = ОбработкаПереданногоФайлаНаСервере(ПомещенныеФайлы[0].Хранение, ДопПараметры);
	КонецЕсли; 	
КонецПроцедуры

&НаСервере 
Функция ОбработкаПереданногоФайлаНаСервере(Знач АдресХранилища, Знач Ссылка)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);	
	Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();	
	Файл = новый ЧтениеXML;
	Файл.ОткрытьПоток(Поток);
	
	Пока Файл.Прочитать() Цикл
		
		// Проверить тип узла.		
		Если Файл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда			
			//Сообщение.Текст = Файл.Имя;			
			//Сообщение.Сообщить();						
			
			// Прочитать атрибуты.			
			Пока Файл.ПрочитатьАтрибут() Цикл				
				//Сообщение.Текст = ""атрибут:"" + Файл.Имя + ""="" + Файл.Значение;				
				//Сообщение.Сообщить();				
			КонецЦикла;			
		КонецЕсли;    		
				
		Если Файл.ТипУзла = ТипУзлаXML.Текст Тогда			
			//Сообщение.Текст = Файл.Значение;			
			//Сообщение.Сообщить();			
		КонецЕсли;    				
		
		Если Файл.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда			
			//Сообщение.Текст = ""/"" + Файл.Имя;
			//Сообщение.Сообщить();			
		КонецЕсли; 
		
	КонецЦикла;	
	
	Файл.Закрыть();	
	Поток.Закрыть();	
	
	Возврат Ссылка;
	
КонецФункции "}
},
{0,
{"АсинхронноВыборФайлаИСохранитьЧерез_XDTO_Кистанов",0,0,"АсинхронноВыборФайлаИСохранитьЧерез_XDTO","
&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)

	Ссылка	= ПараметрКоманды;	
	Диалог	= новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Фильтр 		= НСтр(""ru = 'Документ'; en = 'Document'"") + "" XML (*.xml)|*.xml"";
  	Диалог.Заголовок 	= НСтр(""ru = 'Укажите путь и имя для сохранения'; en = 'Specify the path and name to save'"");
	
	Оповещение = новый ОписаниеОповещения(""ОповещениеПослеВыбораФайлаДляЗаписи"", ЭтотОбъект, Ссылка);	 
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПослеВыбораФайлаДляЗаписи(ВыбранныеФайлы, Ссылка)Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип(""Массив"")	Тогда
		
		выбранныйФайл 	= ВыбранныеФайлы[0];		
		ОбъектXDTO 		= ОбкПроизведениеВXDTO(Ссылка);
		
		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.ОткрытьФайл(выбранныйФайл);
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьБезОбработки(ОбъектXDTO);
		
		ЗаписьXML.Закрыть();

	КонецЕсли;
	
	ИнфСообщение = НСтр(""ru = 'Выгрузка выполнена!'; en = 'Unload done!'"");
	Сообщить(ИнфСообщение);
	
КонецПроцедуры 

// ЗаполнитьЗначенияСвойств(ПроизведениеXDTO, Обк); // Не подходит так как есть объектный тип (а именно ТЧ ""Тело"")
// ВНИМАНИЕ: Только Если ""ПроизведениеXDTO.ref"" имеет Тип СТРОКА!	
// ПроизведениеXDTO.ref 			= СериализаторXDTO.XMLСтрока(Обк.Ссылка);
&НаСервере
Функция ОбкПроизведениеВXDTO(Обк) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML();
    ЗаписьXML.УстановитьСтроку();	
	
	ТипXDTOПроизведение = ФабрикаXDTO.Тип(""http://www.main-app-structurev1.org"", ""CatalogObject.Произведения"");
	ПроизведениеXDTO 	= ФабрикаXDTO.Создать(ТипXDTOПроизведение);
	
	ПроизведениеXDTO.DeletionMark 			= Обк.ПометкаУдаления;
	ПроизведениеXDTO.Description 			= Обк.Наименование;
	ПроизведениеXDTO.Дата 					= Обк.Дата;
	ПроизведениеXDTO.Автор 					= Обк.Автор;
	ПроизведениеXDTO.Подсказка 				= Обк.Подсказка;
	ПроизведениеXDTO.Коммент 				= Обк.Коммент;	
	ПроизведениеXDTO.СодержитКартинку 		= ЗначениеЗаполнено(Обк.Визуализация);
	
	Если ПроизведениеXDTO.СодержитКартинку Тогда
		ТипXDTOКартинка = ФабрикаXDTO.Тип(""http://www.main-app-structurev1.org"", ""CatalogObject.Картинка"");
		КартинкаXDTO 	= ФабрикаXDTO.Создать(ТипXDTOКартинка);
		
		ЗаполнитьЗначенияСвойств(КартинкаXDTO, Обк.Визуализация);		
		ПроизведениеXDTO._Визуализация = КартинкаXDTO;
	КонецЕсли;
	
	// ТЧ это объектный тип и его надо отдельно создавать, наполнять и присваивать основному объекту!
	ТипТЧТело 	= ФабрикаXDTO.Тип(""http://www.main-app-structurev1.org"", ""CatalogObject.Произведения.Тело"");
	ТЧТелоXDTO	= ФабрикаXDTO.Создать(ТипТЧТело);
		
	ТипСтрокаТЧТело = ФабрикаXDTO.Тип(""http://www.main-app-structurev1.org"", ""CatalogObject.Произведения.Тело.Row"");
	Для каждого СтрТЧ Из Обк.Тело Цикл	
		СтрокаТЧТелоXDTO = ФабрикаXDTO.Создать(ТипСтрокаТЧТело);		
		ЗаполнитьЗначенияСвойств(СтрокаТЧТелоXDTO, СтрТЧ);		
		
		// Наполняем временный объект ТЧ
		ТЧТелоXDTO.Row.Добавить(СтрокаТЧТелоXDTO);
	КонецЦикла;
	
	// Присваиваем временный ТЧ основному объекту!
	ПроизведениеXDTO.ТЧТело = ТЧТелоXDTO;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ПроизведениеXDTO);
	
	Возврат ЗаписьXML.Закрыть();

КонецФункции"}
},
{0,
{"АсинхронноВыборФайлаДляПолучитьЧерез_XDTO_Кистанов",0,0,"АсинхронноВыборФайлаДляПолучитьЧерез_XDTO","
&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)

	Ссылка	= ПараметрКоманды;	
	Диалог	= новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Диалог.МножественныйВыбор 	= Ложь;
	Диалог.Фильтр 				= НСтр(""ru = 'Документ'; en = 'Document'"") + "" XML (*.xml)|*.xml"";
  	Диалог.Заголовок 			= НСтр(""ru = 'Укажите путь и имя для сохранения'; en = 'Specify the path and name to save'"");
	
	Оповещение = новый ОписаниеОповещения(""ОповещениеПослеВыбораФайлаДляЧтения"", ЭтотОбъект, Ссылка);	 
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПослеВыбораФайлаДляЧтения(ВыбранныеФайлы, Ссылка)Экспорт
	Если ТипЗнч(ВыбранныеФайлы) = Тип(""Массив"")	Тогда
		ОписаниеФайла 		= новый ОписаниеПередаваемогоФайла();
		ОписаниеФайла.Имя 	= ВыбранныеФайлы[0];
		ПомещаемыеФайлы 	= новый Массив;
		ПомещаемыеФайлы.Добавить(ОписаниеФайла);
		Оповещение 			= новый ОписаниеОповещения(""ОповещениеПрочитатьФайл"", ЭтотОбъект);		
		НачатьПомещениеФайлов(Оповещение, ПомещаемыеФайлы,, Ложь, Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПрочитатьФайл(ПомещенныеФайлы, ЭтотОбъект)Экспорт

	ИнфСообщение = ОбщийОписаниеОшибокНаКлиенте.текстОшибкиВыгрузкиЭлементаВФайл();

	Если ТипЗнч(ПомещенныеФайлы) = Тип(""Массив"") Тогда
		Чтение = Новый ЧтениеXML;
		Чтение.ОткрытьФайл(ПомещенныеФайлы[0].ПолноеИмя);
		ДанныеXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение);
		
		ДанныеСтруктура = ОбщегоНазначенияСервер.ПолучитьСтруктуруСправочникаПроизведения();
		ЗаполнитьЗначенияСвойств(ДанныеСтруктура, ДанныеXDTO);	
		
		Для каждого СтрДанных Из ДанныеXDTO.ТЧТело.Row Цикл
			
			ОписаниеСтрокиТЧ = Новый Структура;
			ОписаниеСтрокиТЧ.Вставить(""СтрокаДанных"");
			ОписаниеСтрокиТЧ.Вставить(""Подсказка"");
			ЗаполнитьЗначенияСвойств(ОписаниеСтрокиТЧ, СтрДанных);
			ДанныеСтруктура.Тело.Добавить(ОписаниеСтрокиТЧ);			
		
		КонецЦикла;
		
		Если ДанныеXDTO.СодержитКартинку Тогда
			КартинкаСтруктура = ОбщегоНазначенияСервер.ПолучитьСтруктуруСправочникаКартинка();
			ЗаполнитьЗначенияСвойств(КартинкаСтруктура, ДанныеXDTO._Визуализация);
			
			ДанныеСтруктура.КартинкаСтруктура = КартинкаСтруктура;
		КонецЕсли;
		
		СоздатьЭлементыНаОсновеДанныхФайлаXML(ДанныеСтруктура);
		
		ИнфСообщение = НСтр(""ru = 'Загрузка выполнена!'; en = 'Download done!'"");
	КонецЕсли;
	
	Сообщить(ИнфСообщение);
	
КонецПроцедуры

// ВНИМАНИЕ: Метод позволяет получить типизированное знч - XMLЗначение(Тип(""ХранилищеЗначения""), знчXML)
&НаСервере
Процедура СоздатьЭлементыНаОсновеДанныхФайлаXML(ДанныеСтруктура)
	
	ПроизведениеСсылка = Справочники.Произведения.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ПроизведениеСсылка, ДанныеСтруктура);
	ПроизведениеСсылка.Дата = XMLЗначение(Тип(""Дата""), ДанныеСтруктура.Дата);
	
	Если ДанныеСтруктура.СодержитКартинку Тогда		
		КартинкаСсылка 			= Справочники.Картинки.СоздатьЭлемент();		
		ЗаполнитьЗначенияСвойств(КартинкаСсылка, ДанныеСтруктура.КартинкаСтруктура);
		КартинкаСсылка.ДатаЗагрузки = XMLЗначение(Тип(""Дата""), ДанныеСтруктура.КартинкаСтруктура.ДатаЗагрузки);
		
		// Преобразование ХЗнч, записанное средствами XDTO в xml, из xml обратно в ХранилищеЗначений.
		Хранилище = XMLЗначение(Тип(""ХранилищеЗначения""), ДанныеСтруктура.КартинкаСтруктура.Данные);
		КартинкаСсылка.Данные = Хранилище;
		
		КартинкаСсылка.Записать();
		ПроизведениеСсылка.Визуализация = КартинкаСсылка.Ссылка;
	КонецЕсли;
	
	Для каждого СтрТЧ Из ДанныеСтруктура.Тело Цикл
	
		НоваяСтрТЧ = ПроизведениеСсылка.Тело.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрТЧ, СтрТЧ);
	
	КонецЦикла;
	
	ПроизведениеСсылка.Записать();

КонецПроцедуры"}
},
{0,
{"СлучайноеЧисло_Кистанов",0,0,"СлучайноеЧисло","// Функция - Получить случайное число
//
// Параметры:
//  Мин	 - Число - Минимальное знч диапазона случайных чисел
//  Макс - Число - Максимальное знч диапазона случайных чисел
//  Разрядов - Число - Количество разрядов если необходимо получить число с дробной частью
// 
// Возвращаемое значение:
//  Число - Случайное число из заданного диапазона
//
Функция ПолучитьСлучайноеЧисло(Мин, Макс, Разрядов = 0) Экспорт

   Коэффициент 		= POW(10, Разрядов);
   ГСЧ 				= Новый ГенераторСлучайныхЧисел();
   СлучайноеЧисло 	= ГСЧ.СлучайноеЧисло(Мин * Коэффициент, Макс * Коэффициент) / Коэффициент;
	
	Возврат СлучайноеЧисло;

КонецФункции // ПолучитьСлучайноеЧисло()


//Вариант2:
//
//	ДлинаПаролей = 8;
//	Алфавит = ""1234567890_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ#$&!"";
//	
//	ГСЧ = Новый ГенераторСлучайныхЧисел();
//	НовыйПароль = """";
//	Для Б = 1  По ДлинаПаролей Цикл
//		Индекс = ГСЧ.СлучайноеЧисло(1, СтрДлина(Алфавит));
//		НовыйПароль = НовыйПароль + Сред(Алфавит, Индекс, 1);
//	КонецЦикла;"}
},
{0,
{"ФИО_Полное_ВСокращенное_Кистанов",0,0,"ФИО_Полное_ВСокращенное","#Область ПреобразоватьПолноеФИОВСокращенное

// Функция - Фамилия ИО
//
// Параметры:
//  ПолноеФИО	 - Строка - Полное ФИО сотрудника разделенное пробелом
// 
// Возвращаемое значение:
//  Строка - Сокращенное ФИО
//
// Пример обращения:
//	Текст = ""Иванов Иван Иванович"";
//	Сообщить(ФамилияИО(Текст));
// Результат: Выведет - Иванов И. И.
//
Функция ФамилияИО(ПолноеФИО, Разделитель = "" "") Экспорт
	
	ПервПроб = Найти(ПолноеФИО, "" "");
	Если ПервПроб = 0 Тогда
		Возврат ПолноеФИО;
	Иначе
		Фамилия = Лев(ПолноеФИО, ПервПроб);
		ИО 		= Сред(ПолноеФИО, ПервПроб + 1);
		ИО 		= СокрЛ(ИО);
		Имя 	= Лев(ИО, 1);
		ВтПроб 	= Найти(ИО,"" "");
		Если ВтПроб=0 Тогда
			Возврат Фамилия + Имя;
		Иначе
			Возврат Фамилия + Имя + Разделитель + Лев(СокрЛ( Сред(ИО, ВтПроб + 1) ), 1);
		КонецЕсли;
	КонецЕсли;

КонецФункции
	
#КонецОбласти

#КонецОбласти"}
},
{0,
{"ВыбратьВсеЗаписиУказанныхОбъектов_ВЫБРАТЬВСЕ_Кистанов",0,0,"ВыбратьВсеЗаписиУказанныхОбъектов_ВЫБРАТЬВСЕ","
&НаСервере
Функция ЗапросВыбрать(ТекстЗапроса, Парам = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Если Парам <> Неопределено Тогда
		Для Каждого Параметр Из Парам Цикл
			Запрос.УстановитьПараметр(Параметр.Имя, Параметр.Знч);
		КонецЦикла;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции

&НаСервере
Процедура НайтиНаСервере(мОписаниеЗапросов)
	
	Для Каждого ОписаниеЗапроса Из мОписаниеЗапросов Цикл
		ВыборкаБПСогласование = ЗапросВыбрать(ОписаниеЗапроса.ТекстЗапроса, ОписаниеЗапроса.Параметры);
		Сообщить(ВыборкаБПСогласование.Количество());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеЗапросаДляБП(ИмяОбъекта)
	
	ОписаниеЗапроса = Новый Структура;
	
	ОписаниеЗапроса.Вставить(""Параметры"");
	ОписаниеЗапроса.Вставить(""ТекстЗапроса"");
	
	ОписаниеЗапроса.Параметры 		= Новый Массив;
	ОписаниеЗапроса.ТекстЗапроса 	=
	""ВЫБРАТЬ
	|	*
	|ИЗ
	|	БизнесПроцесс."" + ИмяОбъекта
	+ "" 
	|ГДЕ
	|	Дата <= &ДатаТестовыхДок"";
	
	ПараметрДата = Новый Структура;
	ПараметрДата.Вставить(""Имя"", ""ДатаТестовыхДок"");
	ПараметрДата.Вставить(""Знч"", ЭтаФорма.ТестовыеДо);
	
	ОписаниеЗапроса.Параметры.Добавить(ПараметрДата);
	
	Возврат ОписаниеЗапроса;
	
КонецФункции

&НаКлиенте
Процедура НайтиДокументы(Команда)
	
	Если НЕ ЗначениеЗаполнено(ЭтаФорма.ТестовыеДо) Тогда
		Сообщить(""Укажите дату """"ТестовыеДо""""!"");
		Возврат;
	КонецЕсли;
	
	мОписаниеЗапросов = Новый Массив;
	ОписаниеЗапросаБПСогласование 					= ПолучитьОписаниеЗапросаДляБП(""Согласование"");
	ОписаниеЗапросаБПУтверждение 					= ПолучитьОписаниеЗапросаДляБП(""Утверждение"");
	ОписаниеЗапросаБПРешениеВопросовВыполненияЗадач	= ПолучитьОписаниеЗапросаДляБП(""РешениеВопросовВыполненияЗадач"");
	ОписаниеЗапросаБПРегистрация					= ПолучитьОписаниеЗапросаДляБП(""Регистрация"");
	ОписаниеЗапросаБПРассмотрение					= ПолучитьОписаниеЗапросаДляБП(""Рассмотрение"");
	ОписаниеЗапросаБППриглашение					= ПолучитьОписаниеЗапросаДляБП(""Приглашение"");
	ОписаниеЗапросаБППоручение						= ПолучитьОписаниеЗапросаДляБП(""Поручение"");
	ОписаниеЗапросаБПОзнакомление					= ПолучитьОписаниеЗапросаДляБП(""Ознакомление"");
	ОписаниеЗапросаБПОбработкаИсходящегоДокумента	= ПолучитьОписаниеЗапросаДляБП(""ОбработкаИсходящегоДокумента"");
	ОписаниеЗапросаБПОбработкаВходящегоДокумента	= ПолучитьОписаниеЗапросаДляБП(""ОбработкаВходящегоДокумента"");
	ОписаниеЗапросаБПОбработкаВнутреннегоДокумента	= ПолучитьОписаниеЗапросаДляБП(""ОбработкаВнутреннегоДокумента"");
	ОписаниеЗапросаБПКомплексныйПроцесс				= ПолучитьОписаниеЗапросаДляБП(""КомплексныйПроцесс"");
	ОписаниеЗапросаБПИсполнение						= ПолучитьОписаниеЗапросаДляБП(""Исполнение"");
	
	мОписаниеЗапросов.Добавить(ОписаниеЗапросаБПСогласование);
	мОписаниеЗапросов.Добавить(ОписаниеЗапросаБПУтверждение);
	мОписаниеЗапросов.Добавить(ОписаниеЗапросаБПРешениеВопросовВыполненияЗадач);
	мОписаниеЗапросов.Добавить(ОписаниеЗапросаБПРегистрация);
	мОписаниеЗапросов.Добавить(ОписаниеЗапросаБПРассмотрение);
	мОписаниеЗапросов.Добавить(ОписаниеЗапросаБППриглашение);
	мОписаниеЗапросов.Добавить(ОписаниеЗапросаБППоручение);
	мОписаниеЗапросов.Добавить(ОписаниеЗапросаБПОзнакомление);
	мОписаниеЗапросов.Добавить(ОписаниеЗапросаБПОбработкаИсходящегоДокумента);
	мОписаниеЗапросов.Добавить(ОписаниеЗапросаБПОбработкаВходящегоДокумента);
	мОписаниеЗапросов.Добавить(ОписаниеЗапросаБПОбработкаВнутреннегоДокумента);
	мОписаниеЗапросов.Добавить(ОписаниеЗапросаБПКомплексныйПроцесс);
	мОписаниеЗапросов.Добавить(ОписаниеЗапросаБПИсполнение);
	
	НайтиНаСервере(мОписаниеЗапросов);
	
КонецПроцедуры"}
},
{0,
{"ЗаменаОбходяДатуЗапрета",0,0,"","Набор.ОбменДанными.Загрузка = Истина;
    Набор.Записать();
Набор.ОбменДанными.Загрузка = Ложь;"}
},
{0,
{"ОбратитьсяКМетодуМодуляВнешнегоОтчетаИзФормы",0,0,"ОбратитьсяКМетодуМодуляВнешнегоОтчетаИзФормы_Кистанов","// Вызов в типовой 1С:БП
//
// ОбъектОтчета(ЭтаФорма.ИмяФормы).ВыполнитьТестовоеНаполнениеДанных(ЭтаФорма);

// Обрпщение в типовой 1С:БП
//
&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

// Реализация в типовой 1С:БП
//
//Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
//	
//	Если СтрНайти(ЭтаФормаИмя, ""Внешний"") > 0 Тогда
//		ФормаИмя = СтрЗаменить(ЭтаФормаИмя, ""Внешний"", """");
//		Попытка
//			Возврат ВнешниеОтчеты.Создать(Сред(Лев(ФормаИмя, СтрНайти(ФормаИмя, "".Форма."") - 1), 7));
//		Исключение
//			Возврат ВнешнийОтчетВФоновомЗадании(Сред(Лев(ФормаИмя, СтрНайти(ФормаИмя, "".Форма."") - 1), 7));
//		КонецПопытки;
//	ИначеЕсли СтрНачинаетсяС(ЭтаФормаИмя, ""Документ"") Тогда
//		Возврат Документы[Сред(Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, "".Форма."") - 1), 10)].СоздатьДокумент();
//	Иначе
//		Возврат Отчеты[Сред(Лев(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, "".Форма."") - 1), 7)].Создать();
//	КонецЕсли;
//	
//КонецФункци"}
},
{0,
{"ДниВыбранногоПериода",0,0,"ДниВыбранногоПериода_Кистанов","ВЫБРАТЬ
	НАЧАЛОПЕРИОДА(Даты.Дата, ДЕНЬ) КАК День,
	1 КАК ПолеДляСоединения
ИЗ
(ВЫБРАТЬ
 Месяцы.Номер КАК Номер,
 ТаблицаДней.Дни КАК Дни,
 ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ДатаНачала, ГОД), МЕСЯЦ, Месяцы.Номер - 1), ДЕНЬ, ТаблицаДней.Дни - 1) КАК Дата
ИЗ
 (ВЫБРАТЬ
 1 КАК Дни

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 2

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 3

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 4

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 5

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 6

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 7

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 8

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 9

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 10

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 11

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 12

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 13

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 14

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 15

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 16

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 17

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 18

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 19

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 20

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 21

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 22

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 23

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 24

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 25

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 26

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 27

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 28

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 29

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 30

 ОБЪЕДИНИТЬ

 ВЫБРАТЬ
 31) КАК ТаблицаДней,
 (ВЫБРАТЬ
 1 КАК Номер

 ОБЪЕДИНИТЬ ВСЕ

 ВЫБРАТЬ
 2

 ОБЪЕДИНИТЬ ВСЕ

 ВЫБРАТЬ
 3

 ОБЪЕДИНИТЬ ВСЕ

 ВЫБРАТЬ
 4

 ОБЪЕДИНИТЬ ВСЕ

 ВЫБРАТЬ
 5

 ОБЪЕДИНИТЬ ВСЕ

 ВЫБРАТЬ
 6

 ОБЪЕДИНИТЬ ВСЕ

 ВЫБРАТЬ
 7

 ОБЪЕДИНИТЬ ВСЕ

 ВЫБРАТЬ
 8

 ОБЪЕДИНИТЬ ВСЕ

 ВЫБРАТЬ
 9

 ОБЪЕДИНИТЬ ВСЕ

 ВЫБРАТЬ
 10

 ОБЪЕДИНИТЬ ВСЕ

 ВЫБРАТЬ
 11

 ОБЪЕДИНИТЬ ВСЕ

 ВЫБРАТЬ
 12) КАК Месяцы) КАК Даты
ГДЕ
	Даты.Дата МЕЖДУ &ДатаНачала И &ДатаОкончани"}
},
{0,
{"МенеджерИзОбъекта",0,0,"МенеджерИзОбъекта_Кистанов","//Функция ПолучитьИмяТипаОбъекта(_Обк, Множ = Ложь) Экспорт

//	ТипЗначения = ТипЗнч(_Обк);
//	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
//	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
//		Возврат ""Справочник"" + ?(Множ, ""и"", """");
//	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
//		Возврат ""Документ"" + ?(Множ, ""ы"", """");
//	КонецЕсли;
//	
//КонецФункции

// СсылкаТип - ""Справочник"", СсылкаИмя - ""Номенклатура""
//Новый(Тип( СтрШаблон(""%1Менеджер.%2"", СсылкаТип, СсылкаИмя) ));
//СсылкаУИД	= Новый УникальныйИдентификатор( Ссылка.УникальныйИдентификатор() );
//Ссылка	= МенеджерОбк.ПолучитьСсылку(СсылкаУИД);

Новый( Тип( ""Менеджер.Справочник.Номенклатура"") );"}
},
{0,
{"ПолучитьЗнчДопРеквизита_1СБП",0,0,"ПолучитьЗнчДопРеквизита_1СБП_Кистанов","// Получить значение дополнительного реквизита 1С:БП
ОрганизацияНоменклатуры = УправлениеСвойствами.ЗначениеСвойства(Стр.Номенклатура, ""ОрганизацияНоменклатурыБагз"");"}
},
{0,
{"ОткрытьФормуСуществующегоОбъектаПоСсылке",0,0,"ОткрытьФормуСуществующегоОбъектаПоСсылке_Кистанов","// Данная реализация открывает ссылку из формы списка другого объекта
// (если нажать на конкретное поле иначе как обычно откроется объект которому пренадлежит форма списка)
//
// Для ТЧ добавим эту процедуру обработчику ""Выбор""
&НаКлиенте
Procedure СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТД = Элементы[Элемент.Имя].ТекущиеДанные;
	естьСвойствоДокументОснование = ТД.Свойство(""ДокументОснование"");
	
	ПолеДокументОснование = (Поле.Имя = ""ДокументОснование"");
	
	Если естьСвойствоДокументОснование И ПолеДокументОснование Тогда
		Если ТД.ДокументОснование.Пустая() Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура(""Ключ"", ТД.ДокументОснование);
		ОткрытьФорму(""Document.ПеремещениеТоваров.ObjectForm"", ПараметрыФормы);
	КонецЕсли;

EndProcedure




//Как открыть форму существующего объекта?
//При открытии формы существующего объекта необходимо кроме имени формы указать также и на тот объект, форма которого должна быть открыта. Для этого используется параметр формы Ключ и ссылка на интересующий нас объект.

//Например, если из формы списка организаций нужно открыть форму той организации, на которой находится курсор, сделать это можно следующим способом:

//Копировать в буфер обмена
//СсылкаНаЭлементСправочника = Элементы.Список.ТекущаяСтрока;
//ПараметрыФормы = Новый Структура(""Ключ"", СсылкаНаЭлементСправочника);
//ОткрытьФорму(""Справочник.Организации.ФормаОбъекта"", ПараметрыФормы);
//Ссылку на интересующий элемент справочника мы получаем через текущую строку списка:

//Копировать в буфер обмена
//СсылкаНаЭлементСправочника = Элементы.Список.ТекущаяСтрока;

//Параметры формы передаем в виде структуры, где имя элемента структуры соответствует имени параметра формы, а значение - это то значение, в которое мы хотим установить параметр формы.

//Если требуется открыть не основную, а произвольную форму объекта, созданную в конфигураторе, вместо стандартного имени основной формы (ФормаОбъекта) указывается слово Форма и через точку за ним - имя формы, созданной в конфигураторе. Например:

//Копировать в буфер обмена
//СсылкаНаЭлементСправочника = Элементы.Список.ТекущаяСтрока;
//ПараметрыФормы = Новый Структура(""Ключ"", СсылкаНаЭлементСправочника);
//ОткрытьФорму(""Справочник.Организации.Форма.УниверсальнаяФормаОбъекта"", ПараметрыФормы);
//Следует заметить, что в том случае, когда кроме ссылки на объект никакие параметры в открываемую форму передавать не нужно и нужна именно основная форма существующего объекта, можно использовать более простой способ – открывать форму с помощью функции глобального контекста ОткрытьЗначение():

//Копировать в буфер обмена
//ОткрытьЗначение(Элементы.Список.ТекущаяСтрока);
//Такой способ обладает меньшей универсальностью, но в некоторых случаях он экономит время и силы. Например, в рассмотренном случае одна такая строка может заменить всю написанную нами ранее процедуру из трех строк.

//Однако нужно внимательно относиться к использованию этого метода. В некоторых случаях он может вызывать дополнительные обращения к серверу, например, когда нужно открыть форму элемента иерархического справочника. При использовании этого метода платформа будет выполнять дополнительное обращение к серверу для того, чтобы определить, является ли элемент группой или нет, так как для элемента и для группы нужно открывать разные формы.

//В то же время эта информация может быть заранее известна разработчику внутри его алгоритма, и, используя метод ОткрытьФорму(), разработчик может открывать нужную форму без дополнительных обращений к серверу, сразу же указывая стандартное имя основной формы.
"}
},
{0,
{"НоваяТаблицаЗначенийДляКвалификаторСтроки",0,0,"","//ОписаниеКолонок - Массив Из Структура
//	*КолонкаИмя - Строка без пробела
//	*КолонкаСиноним - Строка
//	*КолонкаДлинаСтроки - Число - Макс. длина строкоого значения колонки
//
//Пример использования:
//
// ОписаниеКолонок = Новый Массив;
// КолонкаЗнчАМ = Новый Структура(""КолонкаИмя,КолонкаСиноним,КолонкаДлинаСтроки"", ""знчИзТСД"",""знчИзТСД"",200);
// ОписаниеКолонок.Добавить(КолонкаЗнчАМ);
// табДанныеИзТСД = НоваяТаблицаЗначенийДляКвалификаторСтроки(ОписаниеКолонок);
//
//Использование данной таблицы как параметр запроса:
//(ПЕРВЫМ ДЕЛОМ ВО ВРЕМЕННУЮ ТАБЛИЦУ И ТОЛЬКО ПОСЛЕ МОЖНО ЛЮБЫЕ ДЕЙСТВИЯ!)
//
//|ВЫБРАТЬ РАЗЛИЧНЫЕ
//|	табДанныеИзТСД.знчИзТСД КАК знчИзТСД
//|	ПОМЕСТИТЬ ВТДанныеИзТСД
//|ИЗ
//|	&табДанныеИзТСД КАК табДанныеИзТСД""
&НаСервере
Функция НоваяТаблицаЗначенийДляКвалификаторСтроки(ОписаниеКолонок)
	
	ТабДанные = Новый ТаблицаЗначений;
	
	Для Каждого э Из ОписаниеКолонок Цикл
		Если ТабДанные.Колонки.Найти(э.КолонкаИмя) = Неопределено Тогда
			КвалификаторыСтроки = Новый КвалификаторыСтроки(э.КолонкаДлинаСтроки);
			ОписаниеСтроки = Новый ОписаниеТипов(""Строка"", ,КвалификаторыСтроки);	
			ТабДанные.Колонки.Добавить(э.КолонкаИмя, ОписаниеСтроки, э.КолонкаСиноним);
		КонецЕсли;		
	КонецЦикла;
	
	Возврат ТабДанные;
	
КонецФункции

//// Процедура - Данные файла в выборку на сервере
////
//// Параметры:
////  ОписаниеКолонок	 - Массив Из Структура
////	*КолонкаИмя - Строка БЕЗ пробела!
////	*КолонкаСиноним - Строка
////	*КолонкаДлинаСтроки - Число (длина строкового значения колонки)
////
////  ОписаниеДанных -  - 
////
//&НаСервере
//Процедура ДанныеФайлаВТабЗначНаСервере(ОписаниеКолонок, ОписаниеДанных)
//	
//	ТаблицаДанныеExcel = НоваяТаблицаЗначенийДляКвалификаторСтроки(ОписаниеКолонок);	
//	
//	Для Каждого Данные Из ОписаниеДанных Цикл  // НС указываем с какой строки начинать обработку
//		
//		НоваяСтрока = ТаблицаДанныеExcel.Добавить();		
//			
//		ИтераторКолонок = 0;
//		Для Каждого э Из ОписаниеКолонок Цикл
//			//заполняем строку значениями
//			ИмяКолонки = э.КолонкаИмя;
//			НоваяСтрока[ИмяКолонки] = Данные[ИмяКолонки];			
//		КонецЦикла;
//		
//	КонецЦикла;
//	
//	
//	
//	// Таблица значений ""ТаблицаДанныеExcel"" - наполнена данными Excel!
//	// работа с ""ТаблицаДанныеExcel"" ...
//	
//КонецПроцедуры


//1.
//ОписаниеКолонок = Новый Массив;
//
//Цикл ...
//  КолонкаЗнчАМ = Новый Структура(
//  ""КолонкаИмя,КолонкаСиноним,КолонкаДлинаСтроки"",
//  СтрШаблон(""%1%2"", ПрефиксКолонки, ИмяБезПробелов),
//  ИмяКолонки,
//  200);
//		
//ОписаниеКолонок.Добавить(КолонкаЗнчАМ);
//
//2.
//ЗначенияСтроки = Новый Структура();
//Для Каждого э Из ОписаниеКолонок Цикл		
//  ЗначенияСтроки.Вставить(э.КолонкаИмя);
//КонецЦикла;
//
//ИтераторКолонок = 1;
//Для Каждого э Из ОписаниеКолонок Цикл
//
//  ИмяКолонки = ОписаниеКолонок[ИтераторКолонок-1].КолонкаИмя;
//  ЗначенияСтроки[ИмяКолонки] = ТекущееЗначение;
//
//  ИтераторКолонок = ИтераторКолонок + 1;
//КонецЦикла;
//		
//ОписаниеДанных.Добавить(ЗначенияСтроки);
//
//3. ДанныеФайлаВТабЗначНаСервере(ОписаниеКолонок, ОписаниеДанных);"}
},
{0,
{"ОбработкаЗаполненияОбъекта_МодульФормы",0,0,"","// Для внешних обработок типа ""Заполнение объекта"" должна быть форма в модуле которой
// обязательно должна быть данная процедура:
&НаКлиенте 
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначенияМассив) Экспорт


	Для каждого Элемент из ОбъектыНазначенияМассив Цикл
		
		// Можно перейти в другую форму +++
		ФормаОбъекта = ПолучитьФорму(""Документ."" + ОбъектНазначенияИмя + "".Форма.ФормаДокумента"", Новый Структура(""Ключ"", Элемент));

		Если ФормаОбъекта = Неопределено Тогда
			Сообщить(""Не удалось заполнить документ!"");
			Возврат;
		КонецЕсли;
	
		ОбъектСсылки = ФормаОбъекта.Объект;
	
		параметрыФормы = Новый Структура(""ДокументСсылка"", ОбъектСсылки.Ссылка);
		ОткрытьФорму(""ВнешняяОбработка.ЗагрузкаШтрихкодовИзТСДВРозницу.Форма.ФормаПодбораФайлов"",,ОбъектСсылки);
		// Можно перейти в другую форму ---
		
		ФормаОбъекта.Модифицированность = Истина;
		

	КонецЦикла;

КонецПроцедуры"}
},
{0,
{"FastInfoSetОбъектДляПередачиXMLКакДвоичныеДанные",0,0,"","&НаСервере
Процедура Команда1НаСервере()

// Получение истории изменения данных 
Запрос = Новый Запрос;
Запрос.Текст = 
""ВЫБРАТЬ Первые 10
| Объект, НомерВерсии, АвторВерсии, ДатаВерсии, ВерсияОбъекта, РазмерДанных, Комментарий 
|ИЗ 
|    РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
|ГДЕ 
|    ТипЗначения(Объект)=  ТИП(Справочник.ВидыРаботСотрудников) и ЕстьДанныеВерсии"";

Выборка = Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
  ТекущийОбъект = Выборка.Объект;
  ВерсияОбъекта = Выборка.ВерсияОбъекта.получить();

  ЧтениеFastInfoSet = Новый ЧтениеFastInfoSet; // FastInfoSet придуман для обмена xml бинарником
  ЧтениеFastInfoSet.УстановитьДвоичныеДанные(ВерсияОбъекта.Объект);

  Пока ЧтениеFastInfoSet.Прочитать() Цикл
    // в объекте ""ЧтениеFastInfoSet"" на каждой итерации появляются прочитанные данные.
  КонецЦикла; 

КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура Команда1(Команда)
  Команда1НаСервере();
КонецПроцедуры    "}
},
{0,
{"ОповеститьВлияниеИзОдногоОбкНаДругой",0,0,"","
// Обк 1:
Оповестить(""ОбновитьФормуСпискаПодборАкцизныхМарок"");

// Обк 2 - событие формы ""ОбработкаОповещения"":
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = ""ОбновитьФормуСпискаПодборАкцизныхМарок"" Тогда
		// ...
	КонецЕсли;
КонецПроцедуры"}
}
},
{6,
{"ЗапросЗапроса",1,0,"",""},
{0,
{"НовыйЗапрос",0,0,"НовыйЗапрос_Кистанов","#Область НовыйЗапрос
<?>
// Банальное создание объекта Запрос, но в одном месте, а не повторяясь.
//
// Рекомендация использовать с:
//   НовыйПараметры, ТекстЗапроса, УстановитьПараметрыЗапрос
//
// Зависимости:
//   Шаблоны - УстановитьПараметрыЗапрос
//
// Параметры:
//   текстЗапроса - Строка - наименование обк метаданных (РеализацияТоваровУслуг).
//   ПараметрыЗапрос - Массив Из из Структура:
//     * имя - Строка - всегда содержит фиксированный ключ ""имя"", имя параметра (""Номер"")
//     * знч - Любой - всегда содержит фиксированный ключ ""знч"", значение параметра (""000000001"")
//     * условие - Строка - Не обязательный, только для программно сформированного запроса, 
//                        для раздела ГДЕ в запросе и содержит фиксированный набор условий (""="", ""<>"", ""В"", ""Подобно"").
//   менеджерВТ - Массив Из Строка - поля выборки запроса (Ссылка,Номер,Дата).
//
// Возвращаемое значение:
//   Запрос - Запрос
//
// Пример:
//   Запрос = НовыйЗапрос(ПараметрыЗапросНоменклатура, текстЗапросаНоменклатура);
//
&НаСервереБезКонтекста
Функция НовыйЗапрос(текстЗапроса = неопределено, ПараметрыЗапрос = Неопределено, менеджерВТ = Неопределено)
    Запрос = Новый Запрос;
	
	Если ПараметрыЗапрос <> Неопределено Тогда
		УстановитьПараметрыЗапрос(Запрос, ПараметрыЗапрос);	
	КонецЕсли;	
	
	Запрос.Текст = ?(текстЗапроса = Неопределено, Запрос.Текст, текстЗапроса);
	
	Если менеджерВТ <> Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = менеджерВТ;
	КонецЕсли;
	
    Возврат Запрос;
КонецФункции

#КонецОбласти"}
},
{0,
{"ТекстЗапроса",0,0,"ТекстЗапроса_Кистанов","#Область ТекстЗапроса
<?>
// Рекомендация использовать с:
//   НовыйЗапрос
//
// Возвращаемое значение:
//   ТекстЗапроса - Строка - описание запроса.
//
// Пример:
//   текстЗапросаНоменклатура = ТекстЗапросаНоменклатура();
//
&НаСервереБезКонтекста
Функция ТекстЗапроса<?""ИмяЗапроса"">()
	ТекстЗапроса = """";
	
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти"}
},
{0,
{"ТекстЗапросаПрограммно",0,0,"ТекстЗапросаПрограммно_Кистанов","#Область ТекстЗапросаПрограммно
<?>
// Банальное создание объекта Запрос, но в одном месте, а не повторяясь.
//
// Рекомендация использовать с:
//   НовыйЗапрос, НовыйПараметры, УстановитьПараметрыЗапрос
//
// Параметры:
//   ТипОбк - Строка - имя типа метаданный в единственном числе (Документ).
//   ИмяОбк - Строка - наименование обк метаданных (РеализацияТоваровУслуг).
//   ВыбратьРеквизиты - Массив Из Строка
//     * Элемент - Строка - Наименование ""колонки"" в выборке, будет добавлена в массив структур.
//   ПараметрыГде - Массив Из из Структура:
//     * имя - Строка - всегда содержит фиксированный ключ ""имя"", имя параметра (""Номер"")
//     * знч - Любой - всегда содержит фиксированный ключ ""знч"", значение параметра (""000000001"")
//     * условие - Строка - всегда содержит фиксированный ключ ""условие"", 
//                          для раздела ГДЕ в запросе (""="", ""<>"", ""В"", ""Подобно"")
//   ПервыеКол - Число - если больше нуля тогда будет добавлено ключевое слово ПЕРВЫЕ знч.
//
// Возвращаемое значение:
//   текстЗапроса - Строка
//
// Пример:
//   ТекстЗапросаНоменклатура = ТекстЗапросаПрограммно(""Справочник"", ""Номенклатура"", ВыбратьРеквизиты, ПараметрыНоменклатура);
//
&НаСервереБезКонтекста
Функция ТекстЗапросаПрограммно(ТипОбк, ИмяОбк, ВыбратьРеквизиты, ПараметрыГде = Неопределено, ПервыеКол = 0)
	секцияЧто = """";
	секцияИЗ  = "" ИЗ "" + ТипОбк + ""."" + ИмяОбк + "" "" + Символы.ПС;
	секцияГДЕ = """";
	
	Для каждого реквизит Из ВыбратьРеквизиты Цикл
		секцияЧто = секцияЧто + ?(ЗначениеЗаполнено(секцияЧто), "", "", """") + реквизит + "" "" + Символы.ПС;
	КонецЦикла;
	секцияЧто = Символы.ПС + "" "" + ?(ЗначениеЗаполнено(секцияЧто), секцияЧто, "" * "");
		
	Если ПараметрыГде <> Неопределено Тогда
		Для каждого текПараметр Из ПараметрыГде Цикл
			
			ЕстьУсловие = ?(текПараметр.условие = Неопределено, Ложь, Истина);
			этоУсловиеВ = ?(ЕстьУсловие, СтрНайти(текПараметр.условие, ""В""), Ложь);
			условие		= ?(этоУсловиеВ, текПараметр.условие + "" (&"" + текПараметр.имя + "") "", "" &"" + текПараметр.имя);
			
			секцияГДЕ = секцияГДЕ + ?(ЗначениеЗаполнено(секцияГДЕ), "" И "", """") + текПараметр.имя + "" "" + условие + Символы.ПС;
		КонецЦикла;
		секцияГДЕ = Символы.ПС + ?(ЗначениеЗаполнено(секцияГДЕ), "" ГДЕ "" + секцияГДЕ, "" "");
	КонецЕсли;	
	
	текстЗапроса =
	""ВЫБРАТЬ "" + ?(ПервыеКол > 0, ""Первые "" + Строка(ПервыеКол) + "" "", "" "") + "" "" +
	секцияЧто  + "" "" + 
	секцияИЗ   + "" "" + 
	секцияГДЕ;
	
	Возврат текстЗапроса;
КонецФункции

#КонецОбласти"}
},
{0,
{"НовыйПараметры",0,0,"НовыйПараметры_Кистанов","#Область НовыйПараметры
// Универсальный формат параметров используемых во всех методах шаблона.
// Для списка значений необходимо использовать массив как значение ключа ""знч""
//
// Рекомендация использовать с:
//   НовыйЗапрос, УстановитьПараметрыЗапрос, ТекстЗапросаПрограммно, ПреобразоватьВыборкуВJSON
//
// Возвращаемое значение:
//   параметрыМассив - Массив ИЗ Структура:
//     * имя - Строка - всегда содержит фиксированный ключ ""имя"", имя параметра (""Номер"")
//     * знч - Любой - всегда содержит фиксированный ключ ""знч"", значение параметра (""000000001"")
//     * условие - Строка - Не обязательный, только для программно сформированного запроса, 
//                        для раздела ГДЕ в запросе и содержит фиксированный набор условий (""="", ""<>"", ""В"", ""Подобно"").
//
//	ВНИМАНИЕ: Если использовать шаблон ""ВыборкуВJSON"" Тогда через структуру массива ""параметрыМассив""
//     можно задать набор реквизитов которые будут добавлены в JSON (тем самым исключив из JSON ненужные),
//	а в ""ТекстЗапросаПрограммно"" можно указать набор выбираемых реквизитов. Для этого необходимо использовать
//	ключ структуры ""РеквизитыИмя"", а значения Строка разделенная запятой, пример:
//              ПараметрКодНоменклатуры.Вставить(""имя"", ""РеквизитыИмя"");
//		   ПараметрКодНоменклатуры.Вставить(""имя"", ""Код,Наименование"");
//	В итоге в выборку будет добавлена ""колонка"" со значением ""Код,Наименование"".
//
// Пример:
//   ТекстЗапросаНоменклатура = ТекстЗапросаПрограммно(""Справочник"", ""Номенклатура"", ВыбратьРеквизиты, ПараметрыНоменклатура);
//
&НаКлиенте
Функция НовыйПараметры<?""ИмяПараметров"">()
	параметрыМассив = Новый Массив;
	
	<?>
	//СписокЗначенийКодНоменклатуры = Новый Массив;
	//СписокЗначенийКодНоменклатуры.Добавить(""УТ-00001995"");
	//СписокЗначенийКодНоменклатуры.Добавить(""УТ-00001996"");
	//СписокЗначенийКодНоменклатуры.Добавить(""УТ-00002021"");	
	//
	//ПараметрКодНоменклатуры = Новый Структура;
	//ПараметрКодНоменклатуры.Вставить(""имя"", ""Коды"");
	//ПараметрКодНоменклатуры.Вставить(""знч"", СписокЗначенийКодНоменклатуры);
	//ПараметрКодНоменклатуры.Вставить(""условие"", ""В"");	
	
	//параметрыМассив.Добавить(ПараметрКодНоменклатуры);
	
	Возврат параметрыМассив;
КонецФункции

#КонецОбласти"}
},
{0,
{"УстановитьПараметрыЗапрос",0,0,"УстановитьПараметрыЗапрос_Кистанов","#Область УстановитьПараметрыЗапрос
<?>
// Используя массив структур динамически устанавливаются параметры запроса, что позволяет
// не дублируя код использовать данную процедуру в одном мести для всех запросов.
//
// Рекомендация использовать с:
//   НовыйЗапрос, НовыйПараметры, ТекстЗапроса
//
// Параметры:
//   Запрос - Запрос
//   ПараметрыЗапрос - Массив Из из Структура:
//     * имя - Строка - всегда содержит фиксированный ключ ""имя"", имя параметра (""Номер"")
//     * знч - Любой - всегда содержит фиксированный ключ ""знч"", значение параметра (""000000001"")
//     * условие - Строка - Не обязательный, только для программно сформированного запроса, 
//                        для раздела ГДЕ в запросе и содержит фиксированный набор условий (""="", ""<>"", ""В"", ""Подобно"").
//
// Пример:
//   УстановитьПараметрыЗапрос(ЗапросНоменклатура, ПараметрыЗапросаНоменклатура);
//
&НаСервереБезКонтекста
Процедура УстановитьПараметрыЗапрос(Запрос, ПараметрыЗапрос)
	Для Каждого парам Из ПараметрыЗапрос Цикл
		Запрос.УстановитьПараметр(парам.Имя, парам.Знч);
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти"}
},
{4,
{"ТекстЗапроса",1,0,"",""},
{0,
{"ТаблицуЗначенийПоместитьВТТаблицаЗначений",0,0,"ТаблицуЗначенийПоместитьВТТаблицаЗначений_Кистанов","#Область ТаблицуЗначенийПоместитьВТТаблицаЗначений
<?>
// Использовать с шаблоном: ""ТекстЗапроса""
// Можно поместить в менеджер временных таблиц

""ВЫБРАТЬ
|	ДанныеТаблицыЗначений.*
|	ПОМЕСТИТЬ ВТТаблицаЗначений
|ИЗ
|	&ТабЗначений КАК ДанныеТаблицыЗначений""

параметрыЗапроса.Добавить( Новый Структура(""имя,знч"", ""ТабЗначений"", <?""перемТабЗнач"">) );

#КонецОбласти"}
},
{0,
{"РазворотШахматкиВОднуСтроку",0,0,"РазворотШахматкиВОднуСтроку_Кистанов","#Область РазворотШахматкиВОднуСтроку
<?>
// Использовать с шаблоном: ""ТекстЗапроса""

""ВЫБРАТЬ
	<? ""ИмяИсточника"">.<? ""ИмяОбщегоПоляДляГруппировки"">,
    МАКСИМУМ(ВЫБОР 
    	КОГДА <? ""ИмяИсточника"">.Код = ""1"" Тогда
        	<? ""ИмяИсточника"">.Значение
		КОНЕЦ) КАК Знач1Ресурс,
    МАКСИМУМ(ВЫБОР 
    	КОГДА <? ""ИмяИсточника"">.Код = ""2"" Тогда
        	<? ""ИмяИсточника"">.Значение
		КОНЕЦ) КАК Знач2Ресурс,
    МАКСИМУМ(ВЫБОР 
    	КОГДА <? ""ИмяИсточника"">.Код = ""3"" Тогда
        	<? ""ИмяИсточника"">.Значение
		КОНЕЦ) КАК Знач3Ресурс
 ИЗ
	<? ""ИмяИсточника""> КАК <? ""ИмяИсточника"">
 СГРУППИРОВАТЬ ПО
	<? ""ИмяИсточника"">.<? ""ИмяОбщегоПоляДляГруппировки"">"";	

// Исходные данные:
// а 1 0 0
// а 0 2 0
// а 0 0 3
// Результат:
// а 1 2 3

#КонецОбласти"}
},
{0,
{"ШахматкаГдеСложениеСледующего",0,0,"ШахматкаГдеСложениеСледующего_Кистанов","// Задача: Увеличить знч ""СчетчикНаНачало"" каждой строки
// на знч поля ПробегЗаПериод предыдущей строки
// (исключение первая строка знч которой первичное для всех строк)
//
// Пример:
//
// Входные данные:
// ТЧ.Стр1 - СчетчикНаНачало - ПробегЗаПериод
//    1	         142,782	       18.3       // на бензине
//    2	         142,782	       301.7      // на дизеле
//
// Выходные данные:
// ТЧ.Стр1 - СчетчикНаНачало - ПробегЗаПериод
//      1	     142,782	       18.3       // на бензине
//      2	     142,800.3	       301.7      // на дизеле
//
// Подробней:
// ТЧ.Стр1; СчетчикНаНачало                        ; ПробегЗаПериод
// ТЧ.Стр2; (СчетчикНаНачало + Стр1.ПробегЗаПериод); ПробегЗаПериод
//
///////////////////////////////////////////////////////////////////////////////////
// см. ""РазворотШахматкиВОднуСтроку"" ... получаем развернутую таблицу
//
// Было до разворота:
//   Стр1 - ПоказанияСчетчикаНаНачало:142782 - ПробегЗаПериод:18.3
//   Стр2 - ПоказанияСчетчикаНаНачало:142782 - ПробегЗаПериод:301.7
//
// Стало после разворота в ШАХМАТКУ (две строки в одну):
//   Стр1 - ПоказанияСчетчикаНаНачало:142782 - ПробегСтроки1:18.3 - ПробегСтроки2:301.7
//
///////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	142782 КАК ПоказанияСчетчикаНаНачало,
	18.3   КАК ПробегСтроки1,
	301.7  КАК ПробегСтроки2
    ПОМЕСТИТЬ ВТТаблицаСДанными
;

///////////////////////////////////////////////////////////////////////////////////
// Создаем виртуальную таблицу с двумя записями
// (две записи пото му что у нас два вида топлива/только две строки в ТЧ.ГСМ)
//
// Это позволит задвоить развернутую шахматкой таблицу в одну строку
// (задвоить - потому что, у нас два вида топлива/только две строки в ТЧ.ГСМ)
//
// Пример:
// Будут входные данные:
//   Стр1 - ПоказанияСчетчикаНаНачало:142782 - ПробегСтроки1:18.3 - ПробегСтроки2:301.7
//
// Будут выходные данные (задвоение) когда мы соединим с этой виртуальной Таблицей:
//   Стр1 - ПоказанияСчетчикаНаНачало:142782 - ПробегСтроки1:18.3 - ПробегСтроки2:301.7
//   Стр2 - ПоказанияСчетчикаНаНачало:142782 - ПробегСтроки1:18.3 - ПробегСтроки2:301.7
///////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	1 КАК КодТоплива
    ПОМЕСТИТЬ ВТКодыТоплива
	
Объединить  

ВЫБРАТЬ
	2 КАК КодТоплива
;

///////////////////////////////////////////////////////////////////////////////////
// Соединяем ПО Истина что бы задвоить записи
// (задвоить записи пото му что, у нас два вида топлива/только две строки в ТЧ.ГСМ)
//
// Пример соединения (для задвоения):
// Входные данные:
//   Стр1 - ПоказанияСчетчикаНаНачало:142782 - ПробегСтроки1:18.3 - ПробегСтроки2:301.7
//
// Вудут выходные данные (задвоение) когда мы соединим с этой виртуальной Таблицей:
//   Стр1 - ПоказанияСчетчикаНаНачало:142782 - ПробегСтроки1:18.3 - ПробегСтроки2:301.7
//   Стр2 - ПоказанияСчетчикаНаНачало:142782 - ПробегСтроки1:18.3 - ПробегСтроки2:301.7
//
// И этим же шагом производим операцию сложения ""СчетчикНаНачало"" +	""ПробегЗаПериод""
// для каждой следующей строки (первую строку в соответствии с услловием - не меняем)
//
// А также оставляем одно поле ""ПробегСтроки"" для каждой строки с соответствующим знч
// (для бензина знч из ""ПробегСтроки1"", а для дизеля знч из ""ПробегСтроки2"")
//
//
// Пример (полный результат):
// Входные данные:
//   Стр1 - ПоказанияСчетчикаНаНачало:142782 - ПробегСтроки1:18.3 - ПробегСтроки2:301.7
// 
// Результат:
//   КодТоплива	  СчетчикНаНачало	  ПробегЗаПериод
//        1	         142,782	          18.3
//        2	         142,800.3	          301.7
//
// (""СчетчикНаНачало"" у второй записи - увеличился на 18.3 (знч первой записи))
///////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ 
    КодТоплива, 
	ВЫБОР когда КодТоплива = 1 тогда
		ТаблицаСДанными.ПоказанияСчетчикаНаНачало
	Иначе 
		ТаблицаСДанными.ПоказанияСчетчикаНаНачало + ТаблицаСДанными.ПробегСтроки1 
	Конец КАК СчетчикНаНачало,
		
	ВЫБОР когда КодТоплива = 1 тогда
		ТаблицаСДанными.ПробегСтроки1
	Иначе 
		ТаблицаСДанными.ПробегСтроки2 
	КОНЕЦ КАК ПробегЗаПериод	
ИЗ 
    ВТТаблицаСДанными КАК ТаблицаСДанными
    ВНУТРЕННЕЕ Соединение ВТКодыТоплива
	ПО ИСТИНА"}
},
{0,
{"НайтиСвязанныеДокументыЧерезКритерииОтбора",0,0,"НайтиСвязанныеДокументыЧерезКритерииОтбора_Кистанов","// Найдет все документы котороые связанны с  указанным в параметре запроса
ВЫБРАТЬ
	СвязанныеДокументы.Ссылка
ИЗ
   	КритерийОтбора.СвязанныеДокументы(&Документ) КАК СвязанныеДокументы
ГДЕ
    СвязанныеДокументы.Ссылка.Проведен"}
}
}
},
{9,
{"HTTP",1,0,"",""},
{0,
{"HTTPHelp",0,0,"","////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
// ИНСТРУКЦИЯ Apache (https://infostart.ru/1c/articles/646384/):
//
// Скачиваем установщик (х32) со страницы официального сайта 
// https://archive.apache.org/dist/httpd/binaries/win32/
// (файл для скачивания httpd-2.2.25-win32-x86-no_ssl.msi)
// ИЛИ тут: https://www.apachelounge.com/download/
// 
// Не рекомендую использовать 64-битную 1С, потому как,
// с высокой степенью вероятности, возникнут гигантские сложности
// при подключении торгового оборудования, или каких-то других сторонних библиотек.
//
// Установить cd C:\Apache24\bin> httpd -k install
// Удаление службы cd C:\Apache24\bin> httpd -k uninstall
//
// ВНИМАНИЕ: после установки необходимо в C:\Apache24\conf\httpd.conf
// отредактировать строку:
// LoadModule _1cws_module ""C:/Program Files/1cv8/8.3.9.2016/bin/wsap24.dll.
//
// ВНИМАНИЕ:   ДЛЯ   ПУБЛИКАЦИИ   ПРИЛОЖЕНИЕ 1С ЗАПУСКАТЬ   ПОД   АДМИНСКИМИ ПРАВАМИ!
// (при публикации я снял галочку ""Публиковать HTTP сервисы по умолчанию"")
//
// ВНИМАНИЕ:   ПОСЛЕ   ПУБЛИКАЦИИ   НЕОБХОДИМО   ПЕРЕЗАПУСТИТЬ   APACHE!
//
// ! Возможно необходимо дать разрешение на папку Apache пользователю USER1CV8 
//
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//
// формула url:
//   http:// АлиасСервера / ИмяПубликации /hs/ КорневойURL / Шаблон(он же ШаблонURL)
//   Пример: http://localhost/umac/hs/um/workers/
//
//       ИмяПубликации - Имя, задается во время публикации на веб сервер
//       hs - ключевое слово 1С (означает http servic)
//       um - Корневой URL, ОбъектHTTP > Закладка ""Основное"" > КорневойURL
//       Шаблон - ШаблонURL, http url у ОбъектHTTP. У данного шаблона може
//       быть нужное количество обработчиков (они же методы GET, POST, PUT, DELETE и т.д.)
//       (обработчики срабатывают автоматом в зависимости от типа входящего запроса)
//
//    Получается что, ИМЯ которое используется в url: 
//    ""ПубликацияНаВебСервере"".Имя, ОбъектHTTP.КорневойURL и ОбъектHTTP.ШаблонURL
//    ,а ОбъектHTTP.ШаблонURL.Метод - это то что автоматически выбирает платформа 1С (имя не важно)
//
////////////////////////////////////////////////////////////////////////////////////////
//
// Обработчик http запроса методом GET
// ""НовыйШаблонURLПолуить"" - обработчик универсальный для всех шаблонов,
// например: создаем метод HTTP, у него создаем шаблон, этому шаблону
// создаем обработчик (где используем наш универсальный шаблон):
//     ""НовыйШаблонURLПолуитьНоменклатуру"",
//     в шаблоне реализуем получение данных (это может быть Строка или ДвоичныеДанные)
//     с двоичными данными все понятно, а Строка - это может быть выборка преобразованая
//	   в JSON, XML или так и остаться строкой. (шаблон преобразования ""ПреобразоватьВыборкуВJSON"")
//
//
// Обработчик http запроса методом POST
// ""НовыйШаблонURLРедактировать"" - обработчик универсальный для всех шаблонов,
// например: создаем метод HTTP, у него создаем шаблон, этому шаблону
// создаем обработчик (где используем наш универсальный шаблон):
//     ""НовыйШаблонURLПолуитьНоменклатуру"",
//     в шаблоне реализуем получение данных (это может быть Строка или ДвоичныеДанные)
//     с двоичными данными все понятно, а Строка - это может быть выборка преобразованая
//	   в JSON, XML или так и остаться строкой. (шаблон преобразования ""ПреобразоватьВыборкуВJSON"")
//
//
// ТО что увидить пользователь на web странице выполнив какой либо http запрос
// ""НовыйОтветПользователюHTTP"" - это ответ который получит пользователь на выполненый (url) запрос
// (то что отобразиться на его странице (или то что получит в программный ответ) это может быть файл
// для скачивания, может простой текст или в формате JSON, XML и т.д.)
//
//
// ПРОСТО создать прикладной объект в цикле
// СоздатьИзВнешнихДанных - просто создание прикладного объекта на основании массива структур
// данный шаблон создан просто для удобства (используется в шаблоне ""НовыйШаблонURLРедактировать"")
//
//
// КОГДА необходимо ПРОГРАММНО ПОСЛАТЬ HTTP запрос какому либо HTTP серверу
// ""НовыйHTTPСоединение"" - передаем параметром алиас (ip) сервера HTTP
//
//
// ЕСЛИ необходимо ПРОГРАММНО ОПИСАТЬ url запроса HTTP
// ""НовыйHTTPЗапрос"" - описывает строку http запроса
//
//
// ЕСЛИ необходимо ПРОГРАММНО ВЫПОЛНИТЬ url запроса HTTP
// ""ВыполнитьHTTP"" - выполняет http запроса, а также устанавливает тело запроса (Строку или ДвоичныеДанные)
//
//
// Выборку в JSON можно преобразовать используя шаблон ""ПреобразоватьВыборкуВJSON""
//
//"}
},
{0,
{"НовыйШаблонURLПолучить",0,0,"НовыйШаблонURLПолучить_Кистанов","#Область НовыйШаблонURLПолуить
<?>
// Предназначен исключительно для чтения из базы данных
// (HTTP-сервис в роли сервера обрабатывающего запросы)
// Обработчик HTTPМетода GET (который подчинен ШаблонуURL).
//
// Рекомендация использовать с:
//   НовыйЗапрос, НовыйВыборкаПоТипу, НовыйОтветПользователюHTTP
//
// Зависимости:
//   Шаблоны - НовыйОтветПользователюHTTP(желательно расположить в общем модуле),
//             ПреобразоватьВыборкуВJSON
//
// Параметры:
//   Запрос - HTTPСервисЗапрос - Описывает запрос к HTTP-сервису.
//   
//   Для получения пользовательских параметров запроса необходимо использовать:
//     Запрос.ПараметрыURL[""имяПараметра""]
//   Пример строки метода (шаблонаURL):
//     /getproductsByCode/{barcode}
//   Пример строки пользовательского запроса:
//     http://localhost/имяПубликации/hs/имяКаталогаПубликации/имяШаблона/знчПараметра
//     http://localhost/um/hs/umofas/getproductsByCode/000000001
//   
//
// Возвращаемое значение:
//   Ответ - Строка - строка в формате JSON
//
// Пример:
//   Создать объект ""HTTP-сервис, добавить ШаблонURL в котором 
//   создать HTTPМетода и его обработчику назначить этот метод;
//
Функция НовыйШаблонURLПолуить<?""ЧтоПолучить"">(Запрос)
	
	/////////////////////////////////////////////////////////////////////////////////
    // Выборка = ... КАК ОТДЕЛЬНЫЙ МЕТОД КОНКРЕТНОГО ПРИКЛАДНОГО ОБЪЕКТА +
	//Функция ПолучитьСписок(ПараметрыЗапроса) Экспорт	
	//    текстЗапроса = ТекстЗапросаСписокСотрудников();
	//    Запрос = ОбщегоНазначенияСервер.НовыйЗапрос(ПараметрыЗапроса, текстЗапроса);
	//    Выборка = Запрос.Выполнить().Выбрать();
	//    Возврат Выборка;
	//КонецФункции
    // КАК ОТДЕЛЬНЫЙ МЕТОД КОНКРЕТНОГО ПРИКЛАДНОГО ОБЪЕКТА -
	/////////////////////////////////////////////////////////////////////////////////
	
	Данные = ПреобразоватьВыборкуВJSON(Выборка, РеквизитыИмя);
	ТелоОтвета = Новый Структура(""ЭтоСтрока,Данные"", Истина, Данные);
	Ответ = НовыйОтветПользователюHTTP(ТелоОтвета);
	
    Возврат Ответ;
КонецФункции

#КонецОбласти"}
},
{0,
{"НовыйШаблонURLРедактировать",0,0,"НовыйШаблонURLРедактировать_Кистанов","#Область НовыйШаблонURLРедактировать
<?>
// Предназначен для внесения изменений в базу данных
// (HTTP-сервис в роли сервера обрабатывающего запросы)
// Обработчик HTTPМетода POST (который подчинен ШаблонуURL).
//
// Рекомендация использовать с:
//   
//
// Зависимости:
//   Шаблоны - НовыйОтветПользователюHTTP, ПреобразоватьJSONВМассив, СоздатьИзВнешнихДанных 
//
// Параметры:
//   Запрос - HTTPСервисЗапрос - Описывает запрос к HTTP-сервису.
//   
//   Для получения пользовательских параметров запроса необходимо использовать:
//     Запрос.ПараметрыURL[""имяПараметра""]
//   Пример строки метода (шаблонаURL):
//     /getproductsByCode/{barcode}
//   Пример строки пользовательского запроса:
//     http://localhost/имяПубликации/hs/имяКаталогаПубликации/имяШаблона/знчПараметра
//     http://localhost/um/hs/umofas/getproductsByCode/000000001
//   
//
// Возвращаемое значение:
//   Ответ - Строка - строка в формате JSON
//
// Пример:
//   Создать объект ""HTTP-сервис, добавить ШаблонURL в котором 
//   создать HTTPМетода и его обработчику назначить этот метод;
//
Функция НовыйШаблонURLРедактировать<?""ЧтоРедактировать"">(Запрос)	
    СтрокаJSON       = Запрос.ПолучитьТелоКакСтроку();
	ДанныеМассив     = ПреобразоватьJSONВМассив(СтрокаJSON);
	кодОтвета        = ?(ДанныеМассив = Неопределено, 506, 200);	
	
	ОшибкаСоздания   = СоздатьИзВнешнихДанных(ДанныеМассив);
	кодОтвета        = ?(ОшибкаСоздания, 507, 200);	
    Ответ            = НовыйОтветПользователюHTTP(,кодОтвета);
	
    Возврат Ответ;
КонецФункции

#КонецОбласти"}
},
{0,
{"НовыйОтветПользователюHTTP",0,0,"НовыйОтветПользователюHTTP_Кистанов","#Область НовыйОтветПользователюHTTP
<?>
// HTTP ответ для Обработчика HTTPМетода GET (который подчинен ШаблонуURL).
//
// Рекомендация использовать с:
//   НовыйШаблонURLПолучить, НовыйШаблонURLРедактировать
//
// Зависимости:
//   ТекущаяОбласть - ОписаниеОтветаHTTPПоКоду
//
// Параметры:
//   КодСостояния - Число - код ответа возврашаемый http сервером.
//   * ТелоОтвета - Структура:
//        ** ЭтоСтрока  - Булево - для условия установки тела HTTP запроса.
//        ** Данные     - Строка (JSON, XML, произвольная) ИЛИ ДвоичныеДанные
//                             (то что будет установлено в тело HTTP запроса).
//
// Возвращаемое значение:
//   Ответ - Строка - строка в формате JSON
//
// Пример:
//   НовыйОтветПользователюHTTP(Выборка, ""JSON"");
//
Функция НовыйОтветПользователюHTTP(ТелоОтвета = Неопределено, КодСостояния = 200)

	Ответ = Новый HTTPСервисОтвет(КодСостояния);
	Если ТелоОтвета <> Неопределено Тогда
		
	    Если ТелоОтвета.ЭтоСтрока Тогда
			
		  Попытка
			  Ответ.УстановитьТелоИзСтроки(ТелоОтвета.Данные, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.Использовать);			  
		  Исключение          
			  КодСостояния = 508;		      
		  КонецПопытки
		  
	    Иначе
		  
		  Попытка
			  Ответ.УстановитьТелоИзДвоичныхДанных(ТелоОтвета.Данные);
		  Исключение          
			  КодСостояния = 509;		      
		  КонецПопытки
		  
	    КонецЕсли;      	  
	  
	КонецЕсли;
	Ответ.КодСостояния = КодСостояния;
	
    Возврат Ответ;
КонецФункции

// Текст ОШИБКИ для ответа HTTP.
//
// Зависимости:
//   ТекущаяОбласть - НовыйОтветПользователюHTTP - Вызываемый
//
// Параметры:
//   КодСостояния - Число - код ответа возврашаемый http сервером.
//
// Возвращаемое значение:
//   Ответ - Строка - текст ошибки.
//
// Пример:
//   ОписаниеОтветаHTTPПоКоду(404) = ""Упс, ТелоОтвета не выбраны!"";
//
Функция ОписаниеОтветаHTTPПоКоду(КодСостояния)
    Ответ = """";

    ОписаниеОтвета = Новый Соответствие;
	ОписаниеОтвета.Вставить(200, ""ок"");
	ОписаниеОтвета.Вставить(404, ""Ошибка выборка не может быть пустой!"");
	ОписаниеОтвета.Вставить(500, ""Ошибка преобразования выборки в JSON!"");
	ОписаниеОтвета.Вставить(506, ""Ошибка преобразования JSON в массив структур!"");
	ОписаниеОтвета.Вставить(507, ""Ошибка неудалось создать объект!"");
	ОписаниеОтвета.Вставить(508, ""Ошибка установки тела запроса из Строка!"");
	ОписаниеОтвета.Вставить(508, ""Ошибка установки тела запроса из ДвоичныеДанные!"");
		
	ТекстНеНайден = ""Обработчик ошибки не найден :("";
	ТекстОтвета   = ОписаниеОтвета.Получить(КодСостояния);
	Ответ         = ?(ТекстОтвета <> Неопределено, ТекстОтвета, ТекстНеНайден);
	
    Возврат Ответ;
КонецФункции

#КонецОбласти"}
},
{0,
{"СоздатьИзВнешнихДанных",0,0,"СоздатьИзВнешнихДанных_Кистанов","#Область СоздатьИзВнешнихДанных
<?>
// Радактирование БД имея данные в формате СтрокаJSON.
//
// Рекомендация использовать с:
//   НовыйШаблонURLРедактировать
//
// Параметры:
//   ВнешниеДанные - Массив ИЗ Структура - Преобразованные данные строки в формата JSON.
//
// Возвращаемое значение:
//   ОшибкаСоздания - Булево - для формирования код ответа HTTP.
//
// Пример:
//   СоздатьИзВнешнихДанных(ВнешниеДанные);
//
Функция СоздатьИзВнешнихДанных<?""ЧтоСоздать"">(ВнешниеДанные)
	ОшибкаСоздания = ЛОЖЬ;
	
	Для Каждого данные Из ВнешниеДанные Цикл
		// обк = Справочники.ххх.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(обк, данные);
		Попытка
			обк.записать();
		Исключение
	  		ОшибкаСоздания = Истина;
	  		Прервать;
		КонецПопытки;
	КонецЦикла;	
		
	Возврат ОшибкаСоздания;
КонецФункции

#КонецОбласти"}
},
{0,
{"НовыйHTTPСоединение",0,0,"НовыйHTTPСоединение_Кистанов","#Область НовыйHTTPСоединение
<?>
// для взаимодействия по протоколу HTTP.
//
// Рекомендация использовать с:
//   ВыполнитьHTTPЗапрос, НовыйHTTPЗапрос, НовыйСообщитьПользователю
//
// Зависимости:
//    Шаблон - НовыйСообщитьПольщователю (СообщитьПользователюНаКлиенте)
//
// Параметры:
//   АдресСервера - Строка - адрес или алиас сервера (""localhost"") где установлен Apatch 
//   или IIS и опубликован HTTP сервис 1С (в конфиг файле серверной машины можно указать алиас).
//
// Возвращаемое значение:
//   СоединениеHTTP - HTTPConnection - Предназначен для взаимодействия 
//   с внешними системами по протоколу HTTP, в т.ч. для передачи файлов.
//
// Пример:
//   ЛокальныйHTTPСервер = НовыйHTTPСоединение(""localhost"");
//
&НаКлиенте
Функция НовыйHTTPСоединение(АдресСервера)
	СоединениеHTTP = Неопределено;
	
	Попытка
		СоединениеHTTP = Новый HTTPСоединение(АдресСервера);
	Исключение		
		//Сообщение       = Новый СообщениеПользователю;
		//Сообщение.Текст = ОписаниеОшибки();
		//Сообщение.Сообщить();
		ошибка = ИнформацияОбОшибке();
		СообщитьПользователюНаКлиенте(ошибка);
		Возврат;
	КонецПопытки;
	
	Возврат СоединениеHTTP;
КонецФункции

#КонецОбласти"}
},
{0,
{"НовыйHTTPЗапрос",0,0,"НовыйHTTPЗапрос_Кистанов","#Область НовыйHTTPЗапрос
<?>
// (HTTP-сервис в роли сервера обрабатывающего запросы)
// Обработчик HTTPМетода GET (который подчинен ШаблонуURL).
//
// Рекомендация использовать с:
//   ВыполнитьHTTPЗапрос, НовыйHTTPСоединение
//
// Зависимости:
//
//
// Параметры:
//   АдресРесурса - Строка - url ссылка (при необходимости с параметрами)
//   Тело запроса устанавливается отдельно шаблоном ""ВыполнитьHTTP"".
//
// Возвращаемое значение:
//   HTTPЗапрос - HTTPЗапрос - Предназначен для описания HTTP-запросов,
//   отправляемых через объект HTTPСоединение.
//
// Пример:
//   НовыйHTTPЗапрос(""/um/hs/umofas/setproduct/"");
//
&НаКлиенте
Функция НовыйHTTPЗапрос(АдресРесурса)
	HTTPЗапрос   = Неопределено;
	Заголовки    = Новый Соответствие;
	
	Заголовки.Вставить(""Content-Type"", ""text/plain;charset=UTF-8"");
	HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса, Заголовки);
	
	Возврат HTTPЗапрос;
КонецФункции

#КонецОбласти"}
},
{0,
{"ВыполнитьHTTP",0,0,"ВыполнитьHTTPЗапрос_Кистанов","#Область ВыполнитьHTTP
<?>
// Функция выполняет HTTP запрос на заданном сервере 
// и поддерживает исключительно два метода GET и POST.
//
// Рекомендация использовать с:
//   НовыйHTTPСоединение, НовыйHTTPЗапрос, ПреобразоватьВыборкуВJSON, НовыйСообщитьПольщователю
//
// Зависимости:
//    Шаблон - НовыйСообщитьПольщователю (СообщитьПользователюНаКлиенте)
//
// Параметры:
//   HTTPСоединение - HTTPConnection - для взаимодействия по протоколу HTTP.
//   HTTPЗапрос     - HTTPЗапрос - Предназначен для описания HTTP-запросов.
//   ТелоКакСтрока   - Строка - Содержит тело запроса в виде строки 
//                              (xml, JSON или произвольная строка).
//
// Возвращаемое значение:
//   ОтветСервера - HTTPОтвет - Предоставляет доступ к содержимому 
//   ответа HTTP-сервера на запрос.
//   В случае ошибки - функция вернет Неопределено!
//
// Пример:
//   ВыполнитьHTTP(HTTPСоединение, HTTPЗапрос, ВыборкаJSON)
//
&НаКлиенте
Функция ВыполнитьHTTP(HTTPСоединение, HTTPЗапрос, ТелоКакСтрока = Неопределено)
	МетодPOST    = ТелоКакСтрока <> Неопределено;
	ОтветСервера = Неопределено;
	
	Попытка
		
		
		
	    Если МетодPOST Тогда
	        HTTPЗапрос.УстановитьТелоИзСтроки(ТелоКакСтрока, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.Использовать);
			ОтветСервера = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		Иначе
			ОтветСервера = HTTPСоединение.Получить(HTTPЗапрос);
		КонецЕсли;
		
		
		
	Исключение		
		//Сообщение       = Новый СообщениеПользователю;
		//Сообщение.Текст = ОписаниеОшибки();
		//Сообщение.Сообщить();
		ошибка = ИнформацияОбОшибке();
		СообщитьПользователюНаКлиенте(ошибка);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ОтветСервера;	
КонецФункции

#КонецОбласти"}
},
{0,
{"NginxПроксиКакВходБезПароля",0,0,"NginxПроксиКакВходБезПароля_Кистанов","
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] ""$request"" '
    #                  '$status $body_bytes_sent ""$http_referer"" '
    #                  '""$http_user_agent"" ""$http_x_forwarded_for""';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       4000;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

#        location / {
#            root   html;
#            index  index.html index.htm;
#        }

# Все запросы идущие на um сервера 100 - будут перенаправлены на сервер 150 в папку публикации 1С
# Выполнив url: http://192.168.171.100:4000/um/hs/um/employee/ мы получим перенаправление на 150
# та часть которая идет после um будет подставленна к знч proxy то есть:
# http://192.168.171.100:4000/um/hs/um/employee/ => http://192.168.171.150/um/ + hs/um/employee/
# ( um стоящий перед hs - это каталог публикации 1C )
# где hs это зарезервированное слово, um (после hs) - это имя обк HTTP, employee - http метод
        location /um {
            proxy_pass http://192.168.171.150/um/;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            
            # ""Basic U2VydmljZVVzZXI6UjBtYXNoa2E="" - это пароль полученный программой postman
            proxy_set_header Authorization ""Basic U2VydmljZVVzZXI6UjBtYXNoa2E="";
            proxy_pass_header Authorization;
        }

        location /uat/ {
            proxy_pass http://192.168.171.150/uat/;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            
            # ""Basic U2VydmljZVVzZXI6UjBtYXNoa2E="" - это пароль полученный программой postman
            proxy_set_header Authorization ""Basic U2VydmljZVVzZXI6UjBtYXNoa2E="";
            proxy_pass_header Authorization;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}"}
}
},
{2,
{"ОбменДанными",1,0,"",""},
{0,
{"НовыйВебсервисОбработчикОбращенийСервер",0,0,"НовыйВебсервисОбработчикОбращенийСервер_Кистанов","#Область НовыйВебсервисОбработчикОбращенийСервер

// Это СЕРВЕР реагирующий на вызов

// ПРИМЕР ""Сервера"" (ws) принимающего параметр:
// 1. Создаем WS
// 2. Создаем метод и устанавливаем событие ""ПолучитьДанныеОтчета""
// 3. это событие описываем в модуле ws:
//
// Функция ПолучитьДанныеОтчета(ПараметрыОтчета)
//   Возврат ОбменДаннымиСобытияITExchangeService.ПолучитьДанныеОтчета(ПараметрыОтчета);
// КонецФункции

// ПолучитьДанныеОтчета(ПараметрыОтчета); - это метод в общем модуле

 
#Область ПрограммныйИнтерфейс

Функция ПолучитьДанныеОтчета(ПараметрыОтчета) Экспорт 
    Попытка
  		СтруктураРеквизитов = ЗначениеИзСтрокиВнутр(ПараметрыОтчета);
	  	  
	Исключение
	   Возврат ОписаниеОшибки();	
   	КонецПопытки;
   
	Возврат ""OK"";
КонецФункции

Функция ReportParamsWorkVehicle() Экспорт
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить(""ОрганизацииИмя"");
	ПараметрыОтчета.Вставить(""ОрганизацииКод"");
	
	ПараметрыОтчета.Вставить(""ДатаНачалоСтр"");
	ПараметрыОтчета.Вставить(""ДатаКонецСтр"");
	
	ПараметрыОтчета.Вставить(""Наименование"");
	
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти

#КонецОбласти"}
},
{0,
{"НовыйВебсервисИнициаторКлиент",0,0,"НовыйВебсервисИнициаторКлиент_Кистанов","#Область НовыйВебсервисИнициаторКлиент

// ЭТО может быть обработка, регламентное знч или еще что то.
&НаСервере
Процедура ПолучитьДанныеУАТНаСервере()
  
	ИмяСервера = ""http://192.168.88.203:8012/"";
	
	ИмяПубликации = ""uat"";	
	ИмяWS = ""ITExchangeService"";
    ПространствоИмен = ""http://www.itexchangeUAT.com"";
	
	WSОпределение = Новый WSОпределения(ИмяСервера + ИмяПубликации + ""/ws/"" + ИмяWS + "".1cws/?wsdl"");
	Прокси = Новый WSПрокси(WSОпределение, ПространствоИмен, ИмяWS, ИмяWS + ""Soap"");
	
		
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить(""Код"",СокрЛП(ВыборкаДетальныеЗаписи.Ссылка.Код));
	СтруктураРеквизитов.Вставить(""Наименование"",СокрЛП(ВыборкаДетальныеЗаписи.Ссылка.Наименование));
 	СтруктураРеквизитов.Вставить(""Родитель"",СокрЛП(ВыборкаДетальныеЗаписи.Ссылка.Родитель.Наименование));
 	СтруктураРеквизитов.Вставить(""ЭтоГруппа"",ВыборкаДетальныеЗаписи.Ссылка.ЭтоГруппа);
	СтруктураРеквизитов.Вставить(""ГУИД"",СокрЛП(ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор()));
	
	стрСтруктураРеквизитов = ЗначениеВСтрокуВнутр(СтруктураРеквизитов);	
	Результат = Прокси.ЗаписатьВидыРабот(стрСтруктураРеквизитов);
		
	Если Результат = ""OK"" Тогда
		ЗаписьЖурналаРегистрации(""ЗУП_УАТ.Синхронизация"", УровеньЖурналаРегистрации.Информация,
		Метаданные.Справочники.ВидыРаботСотрудников, ВыборкаДетальныеЗаписи.Ссылка,
		""запись ВидыРаботСотрудников синхронизирована с 1С УАТ"")
	Иначе
		ЗаписьЖурналаРегистрации(""ЗУП_УАТ.Синхронизация"", УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.ВидыРаботСотрудников, ВыборкаДетальныеЗаписи.Ссылка,
		Результат)
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеУАТ(Команда)
	// Например команда формы
	ПолучитьДанныеУАТНаСервере();
КонецПроцедуры

#КонецОбласти"}
}
},
{5,
{"ПроцессорКомпоновкиОтчета",1,0,"",""},
{0,
{"СхемаКомпоновкиДанныхОтчета",0,0,"СхемаКомпоновкиДанныхОтчета_Кистанов","#Область СхемаКомпоновкиДанныхОтчета
<?>
// Получить ""ОсновнаяСхемаКомпоновкиДанных"" любого ОТЧЕТА конфигурации по его имени.
//
// Рекомендация использовать с:
//   ЗапросСхемыКомпоновкиДанныхОтчета
//
// Зависимости:
//   Шаблоны - НовыйЗапрос, ТекстЗапросаПрограммно, ПоляЗапросаСхемыКомпоновкиДанных
//
// Параметры:
//   ИмяОтчета - Строка - имя любого отчета в конфигурации.
//
// Возвращаемое значение:
//   СхемаКомпоновкиДанных - СхемаКомпоновкиДанных
//
// Пример:
//   СхемаКомпоновкиДДС = СхемаКомпоновкиДанныхОтчета(""ДвижениеДенежныхСредств"");
//
&НаСервереБезКонтекста
Функция СхемаКомпоновкиДанныхОтчета(ИмяОтчета)

	отчетКонфигурации 		= Отчеты[ИмяОтчета];
	СхемаКомпоновкиДанных 	= отчетКонфигурации.ПолучитьМакет(""ОсновнаяСхемаКомпоновкиДанных"");
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

#КонецОбласти"}
},
{0,
{"ЗапросСхемыКомпоновкиДанныхОтчета",0,0,"ЗапросСхемыКомпоновкиДанныхОтчета_Кистанов","#Область ЗапросСхемыКомпоновкиДанныхОтчета
<?>
// Получить Запрос любой Схемы Компоновки Данных (запрос любого ОТЧЕТА конфигурации).
//
// Рекомендация использовать с:
//   СхемаКомпоновкиДанныхОтчета
//
// Параметры:
//   СхемаКомпоновкиДанных - ОсновнаяСхемаКомпоновкиДанных.
//   имяНабораДанных - Строка - имя набора данных описывающего запрос.
//
// Возвращаемое значение:
//   Запрос - Запрос
//
// Пример:
//   ЗапросОтчетаДДС = ЗапросСхемыКомпоновкиДанныхОтчета(СхемаКомпоновкиДДС, ""НаборДанных1"");
//
&НаСервереБезКонтекста
Функция ЗапросСхемыКомпоновкиДанныхОтчета(СхемаКомпоновкиДанных, имяНабораДанных)
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных[имяНабораДанных].Запрос;
	Запрос = Новый Запрос(ТекстЗапроса);
	Для Каждого ПараметрЗапроса Из СхемаКомпоновкиДанных.Параметры Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Имя, ПараметрЗапроса.Значение);
	КонецЦикла;

	Возврат Запрос;
КонецФункции

#КонецОбласти"}
},
{0,
{"ПоляЗапросаСхемыКомпоновкиДанных",0,0,"ПоляЗапросаСхемыКомпоновкиДанных_Кистанов","#Область ПоляЗапросаСхемыКомпоновкиДанных
<?>
// Получить имена полей (КОЛОНОК) Запроса любой Схемы Компоновки Данных (ОТЧЕТА).
//
// Рекомендация использовать с:
//   СхемаКомпоновкиДанныхОтчета, ПреобразоватьВыборкуВМассивСтруктур
//
// Параметры:
//   СхемаКомпоновкиДанных - ОсновнаяСхемаКомпоновкиДанных.
//   ИмяНабораДанных - Строка - имя набора данных описывающего запрос.
//
// Возвращаемое значение:
//   массивИмен - Массив из Строк
//
// Пример:
//   КолонкиЗапросаВОтчетеДДС = ЗапросСхемыКомпоновкиДанныхОтчета(СхемаКомпоновкиДДС, ""НаборДанных1"");
//
&НаСервереБезКонтекста
Функция ПоляЗапросаСхемыКомпоновкиДанных(СхемаКомпоновкиДанных, ИмяНабораДанных)
	массивИмен = Новый Массив;
	
	Для каждого элемент Из СхемаКомпоновкиДанных.НаборыДанных[ИмяНабораДанных].Поля Цикл	
		массивИмен.Добавть(элемент.Поле);	
	КонецЦикла;
	
	Возврат массивИмен;

КонецФункции

#КонецОбласти"}
},
{0,
{"ПроцессорКомпоновкиДанныхОтчета",0,0,"ПроцессорКомпоновкиДанныхОтчета_Кистанов","#Область ПроцессорКомпоновкиДанныхОтчета
<?>
// ???.
//
// Рекомендация использовать с:
//   НовыйПараметры, ПроцессорКомпоновкиДанныхВТабличныйДокумент
//
// Зависимости:
//   ТекущаяОбласть - УстановитьЗначенияПараметров
//
// Параметры:
//   ИмяОтчета - Строка - имя любого отчета конфигурации.
//   ЗначенияПараметров - Массив из Структур - для формирования данного параметра
//   необходимо использовать функцию шаблона ""НовыйПараметры""
//
// Возвращаемое значение:
//   ПроцессорКомпоновки - ПроцессорКомпоновкиДанных
//
// Пример:
//   ОтчетДДС = ПроцессорКомпоновкиДанныхОтчета(""ДвижениеДенежныхСредств"", ЗначенияПараметров);
//
&НаСервереБезКонтекста
Функция ПроцессорКомпоновкиДанныхОтчета(ИмяОтчета, ЗначенияПараметров)

	отчетКонфигурации 		= Отчеты[ИмяОтчета];	
	СхемаКомпоновкиДанных 	= отчетКонфигурации.ПолучитьМакет(""ОсновнаяСхемаКомпоновкиДанных"");
	
	отчетКонфигурацииОбъект = отчетКонфигурации.Создать();
	ИсточникДоступныхНКД    = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	отчетКонфигурацииОбъект.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНКД);
	отчетКонфигурацииОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ПараметрыОтчета = отчетКонфигурацииОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных;
	УстановитьЗначенияПараметров(ПараметрыОтчета, ЗначенияПараметров);
	
	Настройки = отчетКонфигурацииОбъект.КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки 	= КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, Новый ДанныеРасшифровкиКомпоновкиДанных);
	
	ДанныеРасшифровкиОбъект =  Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	ПроцессорКомпоновки = новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,ДанныеРасшифровкиОбъект,Истина);

	
	Возврат ПроцессорКомпоновки;
	
КонецФункции

// Устанавливает значения &Параметров отчета.
//
// Рекомендация использовать с:
//   НовыйПараметры, ПроцессорКомпоновкиДанныхВТабличныйДокумент
//
// Параметры:
//   ПараметрыОтчета - Структура
//     * Элементы - Массив - параметры задаваемые в отчете (&период и т.д.)
//   ЗначенияПараметров - Массив из Структур - для формирования данного параметра
//   необходимо использовать функцию шаблона ""НовыйПараметры""
//
// Пример:
//   УстановитьЗначенияПараметров(Отчет1.КомпоновщикНастроек.Настройки.ПараметрыДанных, ЗначенияПараметров);
//
&НаСервереБезКонтекста
Процедура УстановитьЗначенияПараметров(ПараметрыОтчета, ЗначенияПараметров);

	итераторА = 0;
	Пока ЗначенияПараметров.Количество() > итераторА Цикл
		текПарам = ПараметрыОтчета.Элементы.Найти(ЗначенияПараметров[итераторА].имя);
		Если (текПарам = Неопределено) Тогда
			итераторА = итераторА + 1;
			Продолжить;
		КонецЕсли;
		текПарам.Значение = ЗначенияПараметров[итераторА].знч;
		текПарам.Использование = Истина;		
		
		итераторА = итераторА + 1;
	КонецЦикла;	

КонецПроцедуры

#КонецОбласти"}
},
{0,
{"ПроцессорКомпоновкиДанныхВТабличныйДокумент",0,0,"ПроцессорКомпоновкиДанныхВТабличныйДокумент_Кистанов","#Область ПроцессорКомпоновкиДанныхВТабличныйДокумент
<?>
//#Область ТочкаВхода
////ТабДокумент = Новый ТабличныйДокумент;
////ПараметрыОтчета = НовыйПараметры<?""ИмяЗапроса"">();
////Сформировать<?""имяОтчета"">(ТабДокумент, ПараметрыОтчета);
////ТабДокумент.Показать();
//#КонецОбласти

//&НаСервереБезКонтекста
//Процедура Сформировать<?""имяОтчета"">(ТабДокумент, ПараметрыОтчета)	
//	ИмяОтчета = <?""имяОтчета"">;
//	ПроцессорКомпоновки = ПроцессорКомпоновкиДанныхОтчета(ИмяОтчета, ПараметрыОтчета);	
//	ПроцессорКомпоновкиДанныхВТабличныйДокумент(ПроцессорКомпоновки, ТабДокумент);
//КонецПроцедуры



// Вывести данные Процессора компоновки (ОТЧЕТА) в табличный документ.
//
// Рекомендация использовать с:
//   ПроцессорКомпоновкиДанныхОтчета, НовыйПараметры
//
// Параметры:
//   ПроцессорКомпоновки - ПроцессорКомпоновкиДанных
//   ТабДокумент - ТабличныйДокумент
//
// Пример:
//   ПроцессорКомпоновкиДанныхВТабличныйДокумент(ОтчетДДС, ТабДокумент);
//
&НаСервереБезКонтекста
Процедура ПроцессорКомпоновкиДанныхВТабличныйДокумент(ПроцессорКомпоновки, ТабДокумент)

	ПроцессорВывода = новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДокумент);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

КонецПроцедуры

#КонецОбласти"}
}
},
{24,
{"Основные",1,0,"",""},
{0,
{"НовыйВыборкаПоТипу",0,0,"НовыйВыборкаПоТипу_Кистанов","#Область НовыйВыборкаПоТипу
<?>
// &НаКлиенте
//
//ПараметрыЗапроса		        = Новый Массив;
//ВыбратьРеквизиты	            = Новый Массив;
//УсловиеОбходаПереопределяемый	= Новый Структура(""ДатаНачала,ДатаКонца,ТолькоОднуЗапись"", 
//                                                Дата(""00010101""), Дата(""00010101""), Истина);
//
//ПараметрЗапросаКод = Новый Структура(""имя,знч,условие"", ""Код"", ""000000001"", ""="");
//ПараметрыЗапроса.Добавить(ПараметрЗапросаКод);
//	
//ВыбратьРеквизиты.Добавить(""Ссылка"");
//ВыбратьРеквизиты.Добавить(""Дата"");

//массивСтруктур = НовыйВыборкаПоТипу(""Документ"", ""уатПутевойЛист"", ВыбратьРеквизиты, 
//                                    ПараметрыЗапроса, УсловиеОбходаПереопределяемый);



// Выбор любых объектов метаданных и необходимый перечень реквизитов,
// а также возможность указать условие выбора. (""Запрос формируемый программно"")
//
// Рекомендация использовать с:
//
//
// Зависимости:
//   Шаблоны - НовыйЗапрос, ТекстЗапросаПрограммно, ПоляЗапросаСхемыКомпоновкиДанных
//
// Параметры:
//   ТипОбк - Строка - имя типа метаданный в единственном числе (Документ).
//   ИмяОбк - Строка - наименование обк метаданных (РеализацияТоваровУслуг).
//   ВыбратьРеквизиты - Массив Из Строка - поля выборки запроса (Ссылка,Номер,Дата).
//   ПараметрыЗапроса - Массив Из из Структура:
//     * имя - Строка - всегда содержит фиксированный ключ ""имя"", имя параметра (""Номер"")
//     * знч - Любой - всегда содержит фиксированный ключ ""знч"", значение параметра (""000000001"")
//     * условие - Строка - всегда содержит фиксированный ключ ""условие"", 
//                          для раздела ГДЕ в запросе (""="", ""<>"", ""В"", ""Подобно"")
//   УсловиеОбходаПереопределяемый - Структура, ФиксированнаяСтруктура - в качестве ключ используется
//                                     знч на усмотрение пользователя так как пользователь должен
//                                     переопределить реализацию сравнения
//
// Возвращаемое значение:
//   Массив - Массив Из Структура, если выборка содержит данные и УсловиеОбходаПереопределяемый
//   не отсеяло все данные.
//
// Пример:
//   массивСтруктур = НовыйВыборкаПоТипу(""Документ"", ""уатПутевойЛист"", ВыбратьРеквизиты, 
//                                       ПараметрыЗапроса, УсловиеОбходаПереопределяемый);
//	
&НаСервереБезКонтекста
Функция НовыйВыборкаПоТипу(ТипОбк, ИмяОбк, ВыбратьРеквизиты, ПараметрыЗапроса, УсловиеОбходаПереопределяемый)
	текстЗапроса 		= ТекстЗапросаПрограммно(ТипОбк, ИмяОбк, ВыбратьРеквизиты, ПараметрыЗапроса);
	Запрос 				= НовыйЗапрос(текстЗапроса, ПараметрыЗапроса);	
	РезультатЗапроса 	= Запрос.Выполнить();	
	пустой 				= РезультатЗапроса.Пустой();
	массивСтруктур		= Новый Массив;
	
	Если НЕ пустой Тогда	
		Выборка   = РезультатЗапроса.Выбрать();
		ИтераторА = 0;
		Пока Выборка.Следующий() Цикл
			// УсловиеОбходаПереопределяемый >
			//Если УсловиеОбходаПереопределяемый.ДатаНачала >= Выборка.Дата И 
			//     УсловиеОбходаПереопределяемый.ДатаКонца <= Выборка.Дата Тогда
		    текущаяЗапись = Новый Структура;
		    текущаяЗапись.Вставить(""НомерСтроки"", ИтераторА + 1);
		    Для каждого реквизит Из ВыбратьРеквизиты Цикл
		        текущаяЗапись.Вставить(реквизит, Выборка[реквизит]);
		    КонецЦикла;
		    массивСтруктур.Добавить(текущаяЗапись);
			//	Если УсловиеОбходаПереопределяемый.ТолькоОднуЗапись Тогда
			//		Прервать;
			//	КонецЕсли;
			//КонецЕсли;
			// УсловиеОбходаПереопределяемый <
			
			ИтераторА = ИтераторА + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат массивСтруктур;
	
КонецФункции

#КонецОбласти"}
},
{0,
{"НовыйТаблицаЗначений",0,0,"НовыйТаблицаЗначений_Кистанов","#Область НовыйТаблицаЗначений

// Рекомендация использовать с:
//	Шаблон - ""ПреобразоватьСтруктуруВТаблицуЗначений""
//
// Параметры:
//   ОписаниеКолонок 	- Массив Из Структура - Описание колонок таблицы:
//   Имя 				- Строка 		   - Имя колонки.
//   Тип 				      - ОписаниеТипов - ""Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(15));"".
//   Заголовок 			- Строка 		   - Текс заголовка колонки.
//   СоставнойТип		- Булево 		   - Когда Тип колонки Составной.
//   Шрина     			- Число 		   - Ширина колонки на форме.
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
// Пример:
//	ОписаниеКолонок = Новый Массив;
//
//	ТипНомер = Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(15));
//
//	ТипДокумент = Новый Массив;
//	ТипДокумент.Добавить( Тип(""СправочникСсылка.Организация"") );
//	ТипДокумент.Добавить( Тип(""СправочникСсылка.Контрагент"") );
//
//	КолонкаНомер = Новый Структура(""Имя,Тип,Заголовок,СоставнойТип,Ширина"", ""Номер"",    ТипНомер,    ""Номер"",    Ложь,   Неопределено);
//	КолонкаДок 	 = Новый Структура(""Имя,Тип,Заголовок,СоставнойТип,Ширина"", ""Документ"", ТипДокумент, ""Документ"", Истина, Неопределено);
//
//  ОписаниеКолонок.Добавить(КолонкаНомер);
//  ОписаниеКолонок.Добавить(КолонкаДок);
//
//  тзНоменклатура 	= НовыйТаблицаЗначенийНоменклатура(ОписаниеКолонок);
//
&НаСервереБезКонтекста
Функция НовыйТаблицаЗначений<?""имяТЗ"">(ОписаниеКолонок) Экспорт
	ТабЗначений = Новый ТаблицаЗначений;	
	Для Каждого Описание Из ОписаниеКолонок Цикл
		ОписаниеТип = ?(Описание.СоставнойТип, Новый ОписаниеТипов(Описание.Тип), Описание.Тип);
		ТабЗначений.Колонки.Добавить(Описание.имя, ОписаниеТип, Описание.Заголовок, Описание.Ширина);
	КонецЦикла;
	
	//составнойТипДанных = Новый Массив;
	//составнойТипДанных.Добавить( Тип(""СправочникСсылка.Организация"") );
	//составнойТипДанных.Добавить( Тип(""СправочникСсылка.Контрагент"") );
	//ОписаниеСоставногоТипа = Новый ОписаниеТипов(составнойТипДанных);
	//ТабЗначений.Колонки.Добавить(""Субконто1"", ОписаниеСоставногоТипа, ""Получатель ТТН"");
	//
	//КвалификаторыСтроки = Новый КвалификаторыСтроки(15);
	//ОписаниеСтрокиИнвентарныйНомер = Новый ОписаниеТипов(""Строка"", ,КвалификаторыСтроки);
	//ТабЗначений.Колонки.Добавить(""ИнвентарныйНомер"", ОписаниеСтрокиИнвентарныйНомер, ""ИнвентарныйНомер"");
	
	Возврат ТабЗначений;
КонецФункции

#КонецОбласти"}
},
{0,
{"ВывестиВТабличныйДокумент",0,0,"ВывестиВТабличныйДокумент_Кистанов","<?>
#Область ВывестиВТабличныйДокумент

// Показать по быстрому массива структур в табличный документ, делал для внешних обработок.
// Получение массива структур остается за пользователем, данный код лишь выводит данные (с клиента).
//
// Рекомендация использовать с:
// 
//
// Зависимости:
//   ТекущаяОбласть - ЗаполнитьОбластьТабличногоДокумента, 
//                    ВывестиОбластьВТабличныйДокумент, ПолучитьМакетОбъектаНаСервере
//
// Пример:
//   ВывестиВТабличныйДокументНоменклатура();
//
&НаКлиенте
Процедура ВывестиВТабличныйДокумент<?""ЧтоВывести"">()
	табДок	= Новый ТабличныйДокумент;
	Макет	= ПолучитьМакетОбъектаНаСервере(""<?""имяМакета"">"");
	
	//параметрыЗапроса = НовыйПараметры<?""имя"">();
	//ДанныеВывода     = ПолучитьМассивСтруктурНаСервереБезКонтекста(<?""имяПараметраЗапроса"">);
	
	ВывестиОбластьВТабличныйДокумент(табДок,    Макет, ""Заголовок"");
	ВывестиОбластьВТабличныйДокумент(табДок,    Макет, ""ИмяДанных"");
	ЗаполнитьОбластьТабличногоДокумента(табДок, Макет, ""Данные"", ДанныеВывода);
	
	табДок.Показать(""Быстрый Макет"");
КонецПроцедуры

// Выводит в табличный документ указанную область макета с заполнением параметров
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   табДокумент - ТабличныйДокумент
//   Макет - Макет - содержит именованные области которые необходимо вывести в табличный документ.
//   имяОбласти - Строка - данная область обязана быть в макете.
//   ДанныеВывода - Массив Из из Структура:
//     * ключ структуры это имя параметра в макете.
//
// Пример:
//   ДанныеВывода = ЗаполнитьОбластьТабличногоДокумента(табДокумент, Макет, ""Данные"", МассивСтруктур);
//	
&НаСервереБезКонтекста
Процедура ЗаполнитьОбластьТабличногоДокумента(табДокумент, Макет, имяОбласти, ДанныеВывода)
	областьСсылка = Макет.ПолучитьОбласть(имяОбласти);
	
	ИтераторА = 0;
	Пока ИтераторА < ДанныеВывода.Количество() Цикл	
		областьСсылка.Параметры.Заполнить( ДанныеВывода[ИтераторА] );		
		табДокумент.Вывести(областьСсылка);		
		ИтераторА = ИтераторА + 1;
	КонецЦикла;
КонецПроцедуры

// Выводит в табличный документ указанную область макета БЕЗ заполнения параметров
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   табДокумент - ТабличныйДокумент
//   Макет - Макет - содержит именованные области которые необходимо вывести в табличный документ.
//   имяОбласти - Строка - данная область обязана быть в макете.
//
// Пример:
//   ДанныеВывода = ЗаполнитьОбластьТабличногоДокумента(табДокумент, Макет, ""Заголовок"");
//
&НаСервереБезКонтекста
Процедура ВывестиОбластьВТабличныйДокумент(табДокумент, Макет, имяОбласти)
	областьСсылка = Макет.ПолучитьОбласть(имяОбласти);
	табДокумент.Вывести(областьСсылка);
КонецПроцедуры

// Получить макет текущего объекта (например обработки)
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   имяМакета - Строка - имя Макет принадлежащего текущему объекту.
//
// Возвращаемое значение:
//   Макет - Макет
//
// Пример:
//   Торг13 = ПолучитьМакетОбъектаНаСервере(""торг13"");
//	
&НаСервере
Функция ПолучитьМакетОбъектаНаСервере(имяМакета)
	Возврат РеквизитФормыВЗначение(""Объект"").ПолучитьМакет(имяМакета);
КонецФункции

#КонецОбласти"}
},
{0,
{"НайтиОбъектПоРеквизиту",0,0,"НайтиОбъектПоРеквизиту_Кистанов","#Область НайтиОбъектПоРеквизиту
<?>
// Поиск ПО Стандартным реквизитам НЕ_ПОДДЕРЖИВАЕТСЯ!
// Функция удобна тем что подходит для любого типа и объекта и использует метод пратформы ""НайтиПоРеквизиту""
//
// Рекомендация использовать с:
// 
//
// Зависимости:
//   Шаблоны - НовыйЗапрос, ТекстЗапросаПрограммно, ПоляЗапросаСхемыКомпоновкиДанных
//
// Параметры:
//   ТипОбк - Строка - имя типа метаданный в единственном числе (Документ).
//   ИмяОбк - Строка - наименование обк метаданных (РеализацияТоваровУслуг).
//   ИмяРеквизита - Строка
//   ЗначениеРеквизита - Либой
//   Родитель - Либой - необязательный
//   Владелец - Либой - необязательный
//
// Возвращаемое значение:
//   Любой - Объект который был найден или Неопределено
//
// Пример:
//   докРеализация = НайтиОбъектПоРеквизиту(""Документ"", ""РеализацияТоваровУслуг"", ""Организация"", ОрганизацияСсылка);
//
&НаСервереБезКонтекста
Функция НайтиОбъектПоРеквизиту(ТипОбк, ИмяОбк, ИмяРеквизита, ЗначениеРеквизита,
	                                                   Родитель = Неопределено, Владелец = Неопределено)
	менеджерОбк	= Новый (ТипОбк + ""Менеджер"");
    искомыйОбк  = Неопределено;
	
	Если Родитель = Неопределено И Владелец = Неопределено Тогда	
		искомыйОбк = менеджерОбк[ИмяОбк].НайтиПоРеквизиту(ИмяРеквизита, ЗначениеРеквизита);
	ИначеЕсли Родитель <> Неопределено И Владелец = Неопределено Тогда
		искомыйОбк = менеджерОбк[ИмяОбк].НайтиПоРеквизиту(ИмяРеквизита, ЗначениеРеквизита, Родитель);
	Иначе
		искомыйОбк = менеджерОбк[ИмяОбк].НайтиПоРеквизиту(ИмяРеквизита, ЗначениеРеквизита, Родитель, Владелец);
	КонецЕсли;
	
	пустой 		= искомыйОбк = Неопределено ИЛИ искомыйОбк.Ссылка = менеджерОбк[ИмяОбк].ПустаяСсылка();
	результат 	= Новый Структура(""Пустой,Ссылка"", пустой, искомыйОбк.Ссылка);
	
	Возврат результат;
КонецФункции

#КонецОбласти"}
},
{0,
{"СодержитОдинаковыеДанные",0,0,"СодержитОдинаковыеДанные_Кистанов","#Область СодержитОдинаковыеДанные
<?>
// Поиск ПО Стандартным реквизитам НЕ_ПОДДЕРЖИВАЕТСЯ!
// Функция удобна тем что подходит для любого типа и объекта и использует метод пратформы ""НайтиПоРеквизиту""
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   Данные - Массив Из из Структура
//   Искомое - Массив Из из Структура
//   ОбластьПоиска - Массив Из из Строка:
//     * Элемент - Строка - сравнение исключительно по данным полям пропуская все остальные.
//
// Возвращаемое значение:
//   Булево - Истина, Ложь
//
// Пример:
//   существует = СодержитОдинаковыеДанные(мСтруктур1, мСтруктур2);
//	
&НаСервереБезКонтекста
Функция СодержитОдинаковыеДанные(Данные, Искомое, ОбластьПоиска = Неопределено)
	проверкаНеТребуетСравненияВсехПолей = ОбластьПоиска <> Неопределено;
	
	Для каждого обк Из Искомое Цикл
		равныхЗначений = Новый Массив;
		
		Для каждого знчСтруктуры Из обк Цикл
			
			// ограниченныйНаборПроверяемыхПолей +
			текущееПолеНеТребуетПроверки = ЛОЖЬ;            
			Если проверкаНеТребуетСравненияВсехПолей Тогда
			    текущееПолеНеТребуетПроверки = ОбластьПоиска.Найти(знчСтруктуры.Ключ) <> Неопределено;
			КонецЕсли;
			// ограниченныйНаборПроверяемыхПолей -
			
			Если Данные[знчСтруктуры.Ключ] = знчСтруктуры.Значение ИЛИ текущееПолеНеТребуетПроверки Тогда
				равныхЗначений.Добавить(Истина);
			КонецЕсли;						
		КонецЦикла;
		
		Если равныхЗначений.Количество() = обк.Количество() Тогда
			Возврат Истина;		
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

#КонецОбласти"}
},
{0,
{"ПреобразоватьВыборкуВJSON",0,0,"ПреобразоватьВыборкуВJSON_Кистанов","#Область ПреобразоватьВыборкуВJSON
<?>
// Для реализации ответа HTTP сервиса. 
// Псевдонимы полей выборки должны соответствовать значению 
// так как используется ""ЗаполнитьЗначенияСвойств(РеквизитыИмя, Выборка)""
//
// Рекомендация использовать с:
//   НовыйОтветHTTPЗапроса, НовыйПараметры
//
// Параметры:
//   РеквизитыИмя - Строка - ОБЯЗАТЕЛЬНЫЙ, передаем фиксированную строку например ""Код,Наименование""
//   или РезультатЗапроса.Колонки.Найти(""РеквизитыИмя"") так как методом шаблона ""НовыйПараметры""
//   можно добавить в запрос колонку с именем ""РеквизитыИмя"" и знч перечислить поля (например:""Код,Наименование"").
//   
//    Если значение НЕ равно Неопределено Тогда Взять из Выборка.РеквизитыИмя.
//	Это значит что в запрос мы установили параметр ""РеквизитыИмя"" и задали знч строка, например:
//              ПараметрКодНоменклатуры.Вставить(""имя"", ""РеквизитыИмя"");
//		   ПараметрКодНоменклатуры.Вставить(""имя"", ""Код,Наименование"");
//
// Возвращаемое значение:
//   СтрокаJSON - Строка - строка в формате JSON
//
// Пример:
//   Вариант1: ПреобразоватьВыборкуВJSON(Выборка, ""barcode,code,name,article"");
//   Вариант2: ПреобразоватьВыборкуВJSON(Выборка, РезультатЗапроса.Колонки.Найти(""РеквизитыИмя""));
//
&НаСервере
Функция ПреобразоватьВыборкуВJSON(Выборка, РеквизитыИмя) Экспорт		
	Номенклатура = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Если РеквизитыИмя = Неопределено Тогда
			// ВНИМАНИЕ: ""РеквизитыИмя"" передаем фиксированную строку
			// или передаем ""РезультатЗапроса.Колонки.Найти(""РеквизитыИмя"")""
			Продолжить;
		КонецЕсли;

		Реквизиты = Новый Структура(РеквизитыИмя);
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
		Номенклатура.Добавить(Реквизиты);
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Номенклатура);
	
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаJSON;
КонецФункции

#КонецОбласти"}
},
{0,
{"ПреобразоватьJSONВМассив",0,0,"ПреобразоватьJSONВМассив_Кистанов","#Область ПреобразоватьJSONВМассив
<?>
// Для реализации ответа HTTP сервиса.
//
// Рекомендация использовать с:
//   НовыйШаблонURLРедактировать, ПреобразоватьВыборкуВJSON
//
// Параметры:
//   СтрокаJSON - Строка - строка в формате JSON
//
// Возвращаемое значение:
//   ДанныеМассив - Массив Из Структура
//
// Пример:
//   ПреобразоватьJSONВМассив(СтрокаJSON);
//
Функция ПреобразоватьJSONВМассив(СтрокаJSON)	
	ДанныеМассив = Неопределено;
	
	ДанныеJSON = Новый ЧтениеJSON();
	Попытка
	  ДанныеJSON.УстановитьСтроку(СтрокаJSON);	
	  ДанныеМассив = ПрочитатьJSON(ДанныеJSON);
    Исключение
	  Возврат Неопределено;
	КонецПопытки;
	
	Возврат ДанныеМассив;
КонецФункции

#КонецОбласти"}
},
{0,
{"ПреобразоватьРезультатЗапросаВСтруктуру",0,0,"ПреобразоватьРезультатЗапросаВСтруктуру_Кистанов","// Возвращает данные первой записи результата запроса в виде структуры.
// 
// Параметры:
//  РезультатЗапроса - РезультатЗапроса - Результат запроса, содержащий данные для обработки.
// 
// Возвращаемое значение:
//  Структура - структура с результатом.
//
Функция ПреобразоватьРезультатЗапросаВСтруктуру(Знач РезультатЗапроса) Экспорт
	
	КолонкиДанных = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		КолонкиДанных.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат КолонкиДанных;
	КонецЕсли;

	// ИСПОЛЬЗУЕМ получившуюся структуру:
    //КопияСтруктуры = Новый Структура;
    //Для Каждого ЭлементСтруктуры Из КолонкиДанных Цикл
    //  КопияСтруктуры.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
    //КонецЦикла;
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//Выборка.Следующий();
	//
	//ЗаполнитьЗначенияСвойств(КопияСтруктуры, Выборка);
	
	Возврат КолонкиДанных;
КонецФункции"}
},
{0,
{"ПреобразоватьВыборкуВМассивСтруктур",0,0,"ПреобразоватьВыборкуВМассивСтруктур_Кистанов","#Область ПреобразоватьВыборкуВМассивСтруктур
<?>
// Для передачи выборки с сервера на клиента или быстрой печати используя спец. метод из шаблона.
//
// Рекомендация использовать с:
//   СхемаКомпоновкиДанныхОтчета, ПоляЗапросаСхемыКомпоновкиДанных
//
// Параметры:
//   Выборка - Коллекция ВыборкаЗапрос
//   ВыбратьРеквизиты - Массив Из Строка
//     * Элемент - Строка - Наименование ""колонки"" в выборке, будет добавлена в массив структур.
//   ДопУсловиеПереопределяемый - Структура, на усмотрение пользователя. Позволяет накладывать 
//   ПОСТ условие в момент обхода выборки
//
// Возвращаемое значение:
//   массив - массив из структур
//
// Пример:
//   массивСтруктур = ПреобразоватьВыборкуВМассивСтруктур(Выборка, мРеквизиты);
//
&НаСервереБезКонтекста
Функция ПреобразоватьВыборкуВМассивСтруктур(Выборка, ВыбратьРеквизиты, ДопУсловиеПереопределяемый = неопределено)
	массивСтруктур = Новый Массив;
	
	ИтераторА = 0;
	Пока Выборка.Следующий() Цикл
		//// Доп. условие >
		//Если ДопУсловиеПереопределяемый = неопределено 
		//     ИЛИ ДопУсловие.ДатаНачала >= Выборка.Дата И ДопУсловие.ДатаКонца <= Выборка.Дата Тогда
		текущаяЗапись = Новый Структура;
		текущаяЗапись.Вставить(""НомерСтроки"", ИтераторА + 1);
		Для каждого реквизит Из ВыбратьРеквизиты Цикл
			 текущаяЗапись.Вставить(реквизит, Выборка[реквизит]);
		КонецЦикла;
		массивСтруктур.Добавить(текущаяЗапись);
		//	Если ДопУсловие.ТолькоОднуЗапись Тогда
		//		Прервать;
		//	КонецЕсли;
		//КонецЕсли;
		//// Доп. условие <
		
		ИтераторА = ИтераторА + 1;
	КонецЦикла;
	
	Возврат массивСтруктур;
	
КонецФункции

#КонецОбласти"}
},
{0,
{"ПреобразоватьТабличнуюЧастьВМассивСтруктур",0,0,"ПреобразоватьТабличнуюЧастьВМассивСтруктур_Кистанов","#Область ПреобразоватьТабличнуюЧастьВМассивСтруктур
<?>
// Для передачи таблицы значений с сервера на клиента или быстрой печати используя спец. метод из шаблона.
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   ТабЧасть - Табличная часть, табличная часть (какого либо объекта)
//   именаКолонок - Массив Из Строк, строка - это имя колонки в табличной части
//
// Возвращаемое значение:
//   массивСтруктур - Массив Из Структур
//
// Пример:
//  именаКолонок = Новый Массив;
//  именаКолонок.Добавить(""Тип"");
//  именаКолонок.Добавить(""Имя"");
//  именаКолонок.Добавить(""Сценарий"");
// 
//  массивСтруктур = ПреобразоватьТабличнуюЧастьВМассивСтруктур(ТаблицаЗависимостей, именаКолонок);
//
&НаКлиенте
Функция ПреобразоватьТабличнуюЧастьВМассивСтруктур(ТабЧасть, именаКолонок = Неопределено)
 	
 	Если ТабЧасть.Количество() <= 0 ИЛИ именаКолонок = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ИтераторА = 0;
	массивСтруктур = Новый Массив(ТабЧасть.Количество());
	Для каждого э Из ТабЧасть Цикл
		Колонки = СтрСоединить(именаКолонок, "","");
		структураДанных = Новый Структура(Колонки);
		Для каждого колонкаИмя Из именаКолонок Цикл				
			структураДанных[колонкаИмя] = э[колонкаИмя];
		КонецЦикла;
		
		массивСтруктур[ИтераторА] = структураДанных;
		ИтераторА = ИтераторА + 1;
	КонецЦикла;
	
	Возврат массивСтруктур;

КонецФункции

#КонецОбласти"}
},
{0,
{"ПреобразоватьТаблицуЗначенийВМассивСтруктур",0,0,"ПреобразоватьТаблицуЗначенийВМассивСтруктур_Кистанов","#Область ПреобразоватьТаблицуЗначенийВМассивСтруктур
<?>
// Для передачи таблицы значений с сервера на клиента или быстрой печати используя спец. метод из шаблона.
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   ТабЗначений - Коллекция таблица значений
//
// Возвращаемое значение:
//   массив - массив из структур
//
// Пример:
//   массивСтруктур = ПреобразоватьТаблицуЗначенийВМассивСтруктур(ТабЗначений);
//
&НаСервереБезКонтекста
Функция ПреобразоватьТаблицуЗначенийВМассивСтруктур(ТабЗначений)
	
	Если ТабЗначений.Количество() <= 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
		
	именаКолонок = """";
	Для каждого колонка Из ТабЗначений.Колонки Цикл				
		именаКолонок = именаКолонок + ?(именаКолонок = """", """","","") + колонка.Имя;
	КонецЦикла;    
	
	ИтераторА = 0;
	массивСтруктур = Новый Массив(ТабЗначений.Количество());
	Для каждого э Из ТабЗначений Цикл
		структураДанных = Новый Структура(именаКолонок);
		Для каждого колонка Из ТабЗначений.Колонки Цикл				
			структураДанных[колонка.Имя] = э[колонка.Имя];
		КонецЦикла;
		
		массивСтруктур[ИтераторА] = структураДанных;
		ИтераторА = ИтераторА + 1;
	КонецЦикла;
	
	Возврат массивСтруктур;

КонецФункции

#КонецОбласти"}
},
{0,
{"ПреобразоватьМассивСтруктурВТаблицуЗначений",0,0,"ПреобразоватьМассивСтруктурВТаблицуЗначений_Кистанов","#Область ПреобразоватьМассивСтруктурВТаблицуЗначений
<?>
// Вызывающая процедура или функция ""ВыполнитьПреобразованиеСтруктурыВТЗ""
//
&НаКлиенте
Процедура ВыполнитьПреобразованиеСтруктурыВТЗ()
	ОписаниеКолонок = ОписаниеКолонокТаблицыЗначенийСтруктурой();
	ПреобразоватьМассивСтруктурВТаблицуЗначений(мСтруктур, ОписаниеКолонок);
КонецПроцедуры

// Можно пробежать по Таб. документу на клиенте и создать массив из структура
// и передать на сервер без контекста где преобразовать в Таб. значений например
// для передачи в параметры запроса.
//
// Рекомендация использовать с:
//
// Зависимости:
//   Шаблоны        - НовыйТаблицаЗначенийОбщая
//   ТекущаяОбласть - ОписаниеКолонокТаблицыЗначенийСтруктурой
//
// Параметры:
//   Данные          - Массив из структура
//   ОписаниеКолонок - Массив Из Структура - Описание колонок таблицы
//
// Пример:
//   ПреобразоватьТаблицуЗначенийВМассивСтруктур(МассивСтруктур, ОписаниеКолонок) = ТаблицаЗначений.
//
&НаСервереБезКонтекста
Процедура ПреобразоватьМассивСтруктурВТаблицуЗначений(Данные, ОписаниеКолонок)
	ТабЗнач = НовыйТаблицаЗначенийОбщая(ОписаниеКолонок);
	Для Каждого э Из Данные Цикл
		строкаТЧ = ТабЗнач.Добавить();
		ЗаполнитьЗначенияСвойств(строкаТЧ, э);
	КонецЦикла;
	
	// ...	
КонецПроцедуры

#Область ОписаниеКолонокТаблицыЗначенийСтруктурой

//  Описание структуры назначенно в ""НаполнитьПодходящимиРолями"",
//	на текущий момент структура имеет вид:
//  Новый Структура(""Тип,Имя,Сценарий,Роль,Уровень,Превышает"").
//
// Зависимости:
//   Шаблоны - НовыйТаблицаЗначенийОбщая
// 
// Возвращаемое значение:
//  Результат - Массив из Структура
//				*Имя 			- Строка 		- Имя колонки
//				*Тип 			- ОписаниеТипов - Например   простой: ""Новый ОписаниеТипов(""Строка"",,Новый КвалификаторыСтроки(150));""
//												  Например составной: ""СоставнойТипДокумент = Новый Массив;
//											                           СоставнойТипДокумент.Добавить( Тип(""СправочникСсылка.Организация""));
//													                   СоставнойТипДокумент.Добавить( Тип(""СправочникСсылка.Контрагент""));""
//
//				*Заголовок 		- Строка - Синоним колонки
//				*СоставнойТип 	- Булево
//				*Ширина 		- Число
//
&НаКлиенте
Функция ОписаниеКолонокТаблицыЗначенийСтруктурой()	
	КолонокиТабЗнач  		= Новый Массив;
	ПредставлениеКолонок  	= Новый Массив;	
	КолонкиСвойства	 		= ""Имя,Тип,Заголовок,СоставнойТип,Ширина"";
    	
	ПредставлениеКолонок.Добавить(""Тип"");
	ПредставлениеКолонок.Добавить(""Имя"");
	ПредставлениеКолонок.Добавить(""Роль"");
	ПредставлениеКолонок.Добавить(""Сценарий"");
	ПредставлениеКолонок.Добавить(""Уровень"");
	ПредставлениеКолонок.Добавить(""Превышает"");
	
	ОбщийКвалификаторСтроки = Новый КвалификаторыСтроки(150);
	Для Каждого ИмяЗаголовок Из ПредставлениеКолонок Цикл
		ТекущееОписание = Новый ОписаниеТипов(""Строка"",, ОбщийКвалификаторСтроки);
		ТекущаяКолонка 	= Новый Структура(КолонкиСвойства, ИмяЗаголовок, ТекущееОписание, ИмяЗаголовок, Ложь, Неопределено);
		КолонокиТабЗнач.Добавить(ТекущаяКолонка);
	КонецЦикла;
	
	// > Если разные типы или точность
	//КвалификаторИмя       = Новый КвалификаторыСтроки(100);
	//КвалификаторЗаголовок = Новый КвалификаторыСтроки(150);
	//КвалификаторСумма     = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой);
	
	//ТипИмя 		        = Новый ОписаниеТипов(""Строка"",, КвалификаторИмя);
	//ТипЗаголовок 	        = Новый ОписаниеТипов(""Строка"",, КвалификаторЗаголовок);
	//ТипСумма 	            = Новый ОписаниеТипов(""Число"",,  КвалификаторСумма);
	//
	//ПредставлениеИмя       = ""Имя"";
	//ПредставлениеЗаголовок = ""Заголовок"";
	//ПредставлениеСумма     = ""Сумма"";
	//
	//КолонкаИмя 	   = Новый Структура(КолонкиСвойства, ПредставлениеИмя,       ТипТип,       ПредставлениеИмя, 	    Ложь, Неопределено);
	//КолонкаЗаголовок = Новый Структура(КолонкиСвойства, ПредставлениеЗаголовок, ТипЗаголовок, ПредставлениеЗаголовок, Ложь, Неопределено);
	//КолонкаСумма     = Новый Структура(КолонкиСвойства, ПредставлениеСумма, 	  ТипСумма,     ПредставлениеСумма, 	Ложь, Неопределено);
	//
	//КолонокиТабЗнач.Добавить(КолонкаИмя);
	//КолонокиТабЗнач.Добавить(КолонкаЗаголовок);
	//КолонокиТабЗнач.Добавить(КолонкаСумма);
	// < Если разные типы или точность
	
	Возврат КолонокиТабЗнач;
КонецФункции // ОписаниеКолонокТаблицыЗначенийСтруктурой

#КонецОбласти

#КонецОбласти"}
},
{0,
{"ПереборТабличногоДокументаНаКлиентеЗаполняяТЗ",0,0,"ПереборТабличногоДокументаНаКлиентеЗаполняяТЗ_Кистанов","#Область ПереборТабличногоДокументаНаКлиентеЗаполняяТЗ
<?>
// Для быстрой загрузки данных табличного документа в таблицу значений.
// Заголовок колонок табДок должен соответствовать наименованию колонок Таблицы значений.
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   ТабДокумент - Коллекция табличный документ.
//   ТаблицаЗначенийПриемник - Коллекция таблица значений.
//
// Пример:
//   ПереборТабличногоДокументаНаКлиентеЗаполняяТЗ(ТабДокумент, ТабЗначений);
//
&НаКлиенте
Процедура ПереборТабличногоДокументаНаКлиентеЗаполняяТЗ(ТабДокумент, ТабЗначений)
	ПоследняяСтрока  = ТабДокумент.ВысотаТаблицы;
	ПоследняяКолонка = ТабДокумент.ШиринаТаблицы;
	
	Для Строка = 2 По ПоследняяСтрока Цикл		
		НоваяСтрТЗ = ТабЗначений.Добавить();
		Для Колонка = 1 По ПоследняяКолонка Цикл
			имяКолонки = ТабДокумент.Область(1, Колонка).Текст;
			НоваяСтрТЗ[имяКолонки] = ПолучитьСодержаниеЯчейкиТабличногоДокумента(ТабДокумент, Строка, Колонка);
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСодержаниеЯчейкиТабличногоДокумента(пТабличныйДокумент, Строка, Колонка)	
	Если Колонка = 0 Тогда
		Возврат """";
	КонецЕсли;	
	мСодержание = пТабличныйДокумент.Область(""R"" + Формат(Строка,""ЧГ="") + ""C"" + Формат(Колонка,""ЧГ="")).Текст;	
	Возврат СокрЛП(мСодержание);
КонецФункции

#КонецОбласти"}
},
{0,
{"ПреобразоватьТабДокументВРезультатЗапроса",0,0,"ПреобразоватьТабДокументВРезультатЗапроса_Кистанов","#Область ПреобразоватьТабДокументВРезультатЗапроса
<?>
// ТабДок в результат запроса, Табличный документ как источник данных для ПостроительЗапроса.
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   ТабДокумент - Табличный документ
//
// Возвращаемое значение:
//   Коллекция - Результат запроса, 
//
// Пример:
//   РезультатЗапроса = ПреобразоватьТабДокументВРезультатЗапроса(ТабДокумент);
//
&НаСервереБезКонтекста
Функция ПреобразоватьТабДокументВРезультатЗапроса(ТабДокумент)
    ПоследняяСтрока  = ТабДокумент.ВысотаТаблицы;
	ПоследняяКолонка = ТабДокумент.ШиринаТаблицы;
	ОбластьЯчеек     = ТабДокумент.Область(1, 1, ПоследняяСтрока, ПоследняяКолонка);
	
	ИсточникДанных   = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);
	
	ПостроительОтчета                         = Новый ПостроительОтчета; 
	ПостроительОтчета.ИсточникДанных          = ИсточникДанных;	
    ПостроительОтчета.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
	
	ПостроительОтчета.ЗаполнитьНастройки();	
	ПостроительОтчета.Выполнить();
	
	Возврат ПостроительОтчета.Результат;
КонецФункции

#КонецОбласти"}
},
{0,
{"ПреобразоватьМакетВРезультатЗапроса",0,0,"","#Область ПреобразоватьМакетВРезультатЗапроса
<?>
// Макет в результат запроса, например когда необходимо в макете хранить conf данные.
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   ТабДокумент - Табличный документ
//
// Возвращаемое значение:
//   Коллекция - Результат запроса, 
//
// Пример:
//   РезультатЗапроса = ПреобразоватьТабДокументВРезультатЗапроса(ТабДокумент);
//
&НаСервере
Процедура ПреобразоватьМакетВРезультатЗапроса<?ИмяМакет>(Макет, ИмяОбластиВыбора)
    //обк   = РеквизитФормыВЗначение(""Объект"");
    //Макет = обк.ПолучитьМакет(ИмяМакета);

    ПостроительЗапроса = Новый ПостроительЗапроса;
    ПостроительЗапроса.ИсточникДанных = Новый
    ОписаниеИсточникаДанных(Макет.Область(ИмяОбластиВыбора));
    ПостроительЗапроса.Выполнить();

    Результат = ПостроительЗапроса.Результат;
	
	Возврат Результат;
КонецПроцедуры

#КонецОбласти"}
},
{0,
{"ПреобразоватьТабДокументВВыборку",0,0,"ПреобразоватьТабДокументВВыборку_Кистанов","#Область ПреобразоватьТабДокументВВыборку

// Табличный документ с удобным заголовком (содержит синоним для пользователя), этот таб док
// по быстрому преобразовывается в выборку. ТабДокумент предположительно является элементом формы
//
// Рекомендация использовать с:
// 
//
// Зависимости:
//   Шаблоны - ПреобразоватьТабДокументВРезультатЗапроса
//
// Пример:
//   массивСтруктур = НовыйВыборкаПоТипу(""Документ"", ""уатПутевойЛист"", ВыбратьРеквизиты, 
//                                       ПараметрыЗапроса, УсловиеОбходаПереопределяемый);
//	
#Область ТочкаВхода
<?>
ПреобразоватьТабДокументВВыборку<?""Имя"">();

&НаКлиенте
Процедура ПреобразоватьТабДокументВВыборку<?""Имя"">()
	ОписаниеЗаголовкаТабДок = НовыйЗаголовокТабличногоДокумента();	
	УстановитьЗаголовокТабличногоДокумента(ОписаниеЗаголовкаТабДок, ""Наименование"");
	
	ПреобразоватьТабДокументВВыборкуНаСервереБезКонтекста(<?""ИмяТабличногоДокументаФормы"">);	
	УстановитьЗаголовокТабличногоДокумента(ОписаниеЗаголовкаТабДок, ""Синоним"");
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) // событие формы ГДЕ создан ТабличныйДокумент
	ОписаниеЗаголовкаТабДок = НовыйЗаголовокТабличногоДокумента();
	УстановитьЗаголовокТабличногоДокумента(ОписаниеЗаголовкаТабДок);
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Процедура ПреобразоватьТабДокументВВыборкуНаСервереБезКонтекста(ТабДокумент)
	выборка = ПреобразоватьТабДокументВРезультатЗапроса(ТабДокумент).Выбрать();
	
	//
	// ДЕЛАЕМ ЧТО-ТО С ВЫБОРКОЙ
	//
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокТабличногоДокумента(ОписаниеЗаголовкаТабДок, знчЗаголовка = ""Синоним"", ОбвестиОбласть = Истина)
	итераторА = 1;
	Для каждого э Из ОписаниеЗаголовкаТабДок Цикл
		область = <?""ИмяТабличногоДокументаФормы"">.Область(""R1C"" + итераторА);
		область.Текст = э[знчЗаголовка];
		область.СодержитЗначение = Ложь;
		
		Если ОбвестиОбласть Тогда		
			ОбвестиОбласть(область);		
		КонецЕсли;		
		
		итераторА = итераторА + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбвестиОбласть(область)
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
	область.Обвести(Линия, Линия, Линия, Линия);
КонецПроцедуры

&НаКлиенте
Функция НовыйЗаголовокТабличногоДокумента()
	// Синоним для пользователя, Наименование для именования колонок выборки
	ОписаниеЗаголовкаТабДок = Новый Массив;
	ОписаниеЗаголовкаТабДок.Добавить(Новый Структура(""Синоним,Наименование"",""Код"",""Код""));
	ОписаниеЗаголовкаТабДок.Добавить(Новый Структура(""Синоним,Наименование"",""Наименование номенклатуры"",""Наименование""));	
	Возврат ОписаниеЗаголовкаТабДок;
КонецФункции

#КонецОбласти"}
},
{0,
{"ПреобразоватьФайлЭкселВТабДокумент",0,0,"ПреобразоватьФайлЭкселВТабДокумент_Кистанов","#Область ПреобразоватьФайлЭкселВТабДокумент
<?>
//&НаСервереБезКонтекста
//Функция ПреобразоватьТабДокументВРезультатЗапроса(ТабличныйДокумент)
//   ЗапросПостроитель = Новый ПостроительЗапроса;
//   ЗапросПостроитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабличныйДокумент.Область());
//   ЗапросПостроитель.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
//   ЗапросПостроитель.ЗаполнитьНастройки();
//   ЗапросПостроитель.Выполнить();
//   Возврат ЗапросПостроитель.Результат;
//КонецФункции

// Метод Прочитать() доступен только на стороне сервера.
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   ПолныйПутьКФайлу - Строка - полный путь к файлу в формате Excel.
//
// Возвращаемое значение:
//   ТабДокумент - ТабличныйДокумент
//
// Пример:
// ТабДокумент = ПреобразоватьФайлЭкселВТабДокумент(ПутьКФайлуЭксел);
//
&НаСервереБезКонтекста
Функция ПреобразоватьФайлЭкселВТабДокумент(ПолныйПутьКФайлу)
	ТабДокумент = Новый ТабличныйДокумент; 
	ТабДокумент.Прочитать(ПолныйПутьКФайлу, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	
	Возврат ТабДокумент;
КонецФункции

#КонецОбласти"}
},
{0,
{"ЗаписатьТабличныйДокументВФайл",0,0,"ЗаписатьТабличныйДокументВФайл_Кистанов","#Область ЗаписатьТабличныйДокументВФайл
<?>
// Метод Записать() Доступен как на клиенте, так и на сервере.
// Внимание! В веб-клиенте использование данного варианта недоступно.
//
// Рекомендация использовать с:
// 
//
// Зависимости:
//   Шаблоны - НовыйЗапрос, ТекстЗапросаПрограммно, ПоляЗапросаСхемыКомпоновкиДанных
//
// Параметры:
//   ТабДокумент - Табличный документ - данные документа будут сохранены в файл.
//   ПолныйПутьФайла - Строка - только путь к файлу.
//   ИмяСохраняемогоФайла - Строка - только имя файла.
//   РасширениеСохраняемогоФайла - Строка - допускается использование форматов: 
//                                          ANSITXT, DOCX, XLSX, MXL, MXL7, ODS, PDF, TXT.
//
// Пример:
// ЗаписатьТабличныйДокументВФайл(ТабДокумент, ПолныйПутьФайла, ИмяСохраняемогоФайла, ""PDF"");
//
&НаКлиенте
Процедура ЗаписатьТабличныйДокументВФайл(ТабДокумент, ПолныйПутьФайла, ИмяСохраняемогоФайла, 
	                                                                   РасширениеСохраняемогоФайла = ""XLSX"")
    ИмяСохраняемогоФайла = имяФайлаБезРасширения + ""."" + РасширениеСохраняемогоФайла;
    ТабДокумент.Записать(ПолныйПутьФайла + ИмяСохраняемогоФайла, ТипФайлаТабличногоДокумента[РасширениеСохраняемогоФайла]);
КонецПроцедуры

#КонецОбласти"}
},
{0,
{"БезМакетаИсточникДанныхВТабличныйДокумент",0,0,"БезМакетаИсточникДанныхВТабличныйДокумент_Кистанов"," #Область ИсточникДанныхВТабличныйДокумент
 <?>
// Вывести результат выполнения запроса в табличный документ.
//
// Рекомендация использовать с:
//   НовыйЗапрос, НовыйПараметры, УстановитьПараметрыЗапрос, ТекстЗапросаПрограммно
//
// Параметры:
//   ИсточникДанных  - Тип: ТаблицаЗначений, РезультатЗапроса, ОбластьЯчеекТабличногоДокумента
//   ТабличныйДокумент - ТабличныйДокумент, в который будет выведен результат запроса.
//
&НаСервереБезКонтекста
Процедура ИсточникДанныхВТабличныйДокумент(ИсточникДанных, ТабличныйДокумент)
	
	Построитель = Новый ПостроительОтчета;
    Построитель.ИсточникДанных  = Новый ОписаниеИсточникаДанных(ИсточникДанных);
    Построитель.Вывести(ТабличныйДокумент);

КонецПроцедуры // ИсточникДанныхВТабличныйДокумент()

#КонецОбласти"}
},
{0,
{"ПолучитьМассивСтруктурПереборомТабличногоДокумента",0,0,"ПолучитьМассивСтруктурПереборомТабличногоДокумента_Кистанов","#Область ПолучитьМассивСтруктурПереборомТабличногоДокумента

// Для передачи массива структур на сервер без контекста, а там можно преобразовать в ТЗ
// Исключительно для вызова на сервере без контекста иначе есть вариант проще!
//
// Рекомендация использовать с:
// 
//
// Параметры:
//   ТабДокумент - Коллекция табличный документ.
//
// Возвращаемое значение:
//   Результат - массив из структура, первая строка Табличный документ (заголовок) будет
//									  ключом структуры.
//
// Пример:
//   ПолучитьМассивСтруктурПереборомТабличногоДокумента(ТабДокумент); = Массив из Структура.
//
&НаКлиенте
Функция ПолучитьМассивСтруктурПереборомТабличногоДокумента(ТабДокумент)
	ПоследняяСтрока  = ТабДокумент.ВысотаТаблицы;
	ПоследняяКолонка = ТабДокумент.ШиринаТаблицы;
	Результат 	  	 = Новый Массив;
	
	Для Строка = 2 По ПоследняяСтрока Цикл		
		ДанныеСтрокиТабДокумента = Новый Структура;
		Для Колонка = 1 По ПоследняяКолонка Цикл
			имяКолонки = ТабДокумент.Область(1, Колонка).Текст;
			СодержимоеЯчейки = ПолучитьСодержаниеЯчейкиТабличногоДокумента(ТабДокумент, Строка, Колонка);
			ДанныеСтрокиТабДокумента.Вставить(имяКолонки, СодержимоеЯчейки);
		КонецЦикла;
		
		Результат.Добавить(ДанныеСтрокиТабДокумента);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти"}
},
{0,
{"ПреобразоватьМассивСтруктурВТаблицуЗначений",0,0,"ПреобразоватьМассивСтруктурВТаблицуЗначений_Кистанов","// Функция - Преобразовать массив структур в таблицу значений
//
// Параметры:
//  мсДанные - Массив Из Структура 
// 
// Возвращаемое значение:
//  тзДанные - ТаблицаЗначений
//
&НаСервере
Функция ПреобразоватьМассивСтруктурВТаблицуЗначений(мсДанные)
    
    тзДанные = Новый ТаблицаЗначений;
    Для Каждого ЭлементМассива Из мсДанные Цикл
        Если тзДанные.Колонки.Количество() = 0 Тогда
            Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
				МассивДопустимыеТипы = Новый Массив;
				ТипКолонки = ТипЗнч(ЗначениеСтруктуры.Значение); 
    			МассивДопустимыеТипы.Добавить(ТипКолонки);                     
    			Описание_Типов = Новый ОписаниеТипов(МассивДопустимыеТипы);
				тзДанные.Колонки.Добавить(ЗначениеСтруктуры.Ключ,Описание_Типов);
            КонецЦикла;
        КонецЕсли;
        НоваяСтрока = тзДанные.Добавить();
        Для Каждого ЗначениеСтруктуры Из ЭлементМассива Цикл
            НоваяСтрока[ЗначениеСтруктуры.Ключ] = ЗначениеСтруктуры.Значение;
        КонецЦикла;
    КонецЦикла;
    
    Возврат тзДанные;
    
КонецФункции"}
},
{0,
{"ПолучитьИзменитьПараметрыОтборыСКД",0,0,"ПолучитьИзменитьПараметрыОтборыСКД_Кистанов","Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	// ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	// ДокументРезультат.АвтоМасштаб = Истина;	

#Область ОтборВПользовательскихНастройках

	// Получить отбор:
	Коллекция = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	Для Каждого ЭлементНастройки Из Коллекция Цикл
		Если ТипЗнч(ЭлементНастройки) = Тип(""ЭлементОтбораКомпоновкиДанных"") Тогда
			Если ТипЗнч(ЭлементНастройки.ПравоеЗначение) = Тип(""СправочникСсылка.Номенклатура"") Тогда
				ЭлементОтбора = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
    // Установить отбор (вар1):
	Если ЭлементОтбора <> Неопределено Тогда
		Если ЭлементОтбора.Использование Тогда
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(""ОтборПоГСМ"", Истина);
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(""ГСМ"", ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	КонецЕсли;

	// Установить отбор (вар2):
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.ПолучитьНастройки().Отбор.Элементы Цикл
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = ""Подразделение"" Тогда
			Подразделение = ЭлементОтбора.ПравоеЗначение;
			Прервать;			
		КонецЕсли;
	КонецЦикла;

#КонецОбласти

#Область РаботаСПараметрами

	// Получить параметры:
	Организация = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек,""ОрганизацияПодписантов"");
	
	// Установить параметры:
    КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ""Организация2"", Организация.Значение);
	
#КонецОбласти
	
КонецПроцедуры




#Область ВариантРуслана

// Этот вариант был необходим так как в варианте выше есть проблема:
// Параметр устанавливается только с 2 раза и более, а с первого не устанавливается.

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
 
СтандартнаяОбработка = Ложь;
ПользовательскиеНастройкиМодифицированы = Ложь;
 
СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);

 
ИспользуетсяОтборПересчетуТоваров  = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
КомпоновщикНастроек.Настройки, 
""ИспользуетсяОтборПересчетуТоваров"");
 
Если ИспользуетсяОтборПересчетуТоваров = Неопределено Тогда
Возврат;
КонецЕсли;
 
ИспользуетсяОтборПересчетуТоваров.Значение      = Ложь;
ИспользуетсяОтборПересчетуТоваров.Использование = Ложь;
 
НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();
 
ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкиОсновнойСхемы.Отбор,""ПересчетТоваров"");
ИспользуетсяОтборПересчетуТоваров = Ложь;
 
Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
Если ЭлементОтбора.Использование Тогда  
ИспользуетсяОтборПересчетуТоваров = Истина;
Прервать;
КонецЕсли;
КонецЦикла;
 
ПараметрИспользуетсяОтборПересчетуТоваров  = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
КомпоновщикНастроек.Настройки, 
""ИспользуетсяОтборПересчетуТоваров"");
 
ПараметрИспользуетсяОтборПересчетуТоваров.Значение = Истина;
ПараметрИспользуетсяОтборПересчетуТоваров.Использование = ИспользуетсяОтборПересчетуТоваров;
 

Склады = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкиОсновнойСхемы.Отбор,""Склад"");
Склад = ?(Склады = Неопределено, Неопределено,Склады[0].ПравоеЗначение);
 
КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОсновнойСхемы, ""Склад1"", ?(Склад = Неопределено, """", Склад));
КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОсновнойСхемы, ""МОЛ"", ?(Склад = Неопределено, """", Склад.ТекущийОтветственный));
КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОсновнойСхемы, ""МОЛДолжность"", ?(Склад = Неопределено, """", Склад.ТекущаяДолжностьОтветственного));
 
ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос;
 
ТекстЗапроса = СтрЗаменить(
ТекстЗапроса, 
""&ТекстЗапросаВесНоменклатуры"", 
Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(""ТоварыНаСкладахОстаткиИОбороты.Номенклатура.ЕдиницаИзмерения"", ""ТоварыНаСкладахОстаткиИОбороты.Номенклатура""));
 
ТекстЗапроса = СтрЗаменить(
ТекстЗапроса, 
""&ТекстЗапросаОбъемНоменклатуры"", 
Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(""ТоварыНаСкладахОстаткиИОбороты.Номенклатура.ЕдиницаИзмерения"", ""ТоварыНаСкладахОстаткиИОбороты.Номенклатура""));
 
СхемаКомпоновкиДанных.НаборыДанных.НаборДанных.Запрос = ТекстЗапроса;
 
КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОсновнойСхемы, ДанныеРасшифровки);

КомпоновкаДанныхСервер.УстановитьЗаголовкиМакетаКомпоновки(ПолучитьЗаголовкиПолей(), МакетКомпоновки);
КомпоновкаДанныхСервер.УстановитьЗаголовкиМакетаКомпоновки(СтруктураДинамическихЗаголовков(), МакетКомпоновки);
 
ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);

ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
ПроцессорВывода.Вывести(ПроцессорКомпоновки);
 
КомпоновкаДанныхСервер.СкрытьВспомогательныеПараметрыОтчета(СхемаКомпоновкиДанных, КомпоновщикНастроек, ДокументРезультат, ВспомогательныеПараметрыОтчета());
 
// Сообщим форме отчета, что настройки модифицированы
Если ПользовательскиеНастройкиМодифицированы Тогда
КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(""ПользовательскиеНастройкиМодифицированы"", Истина);
КонецЕсли;
 
КонецПроцедуры

#КонецОбласти"}
},
{0,
{"ПолучитьДОПОЛНИТЕЛЬНЫЕ_реквизиты",0,0,"ПолучитьДОПОЛНИТЕЛЬНЫЕ_реквизиты_Кистанов","Функция ПолучитьЗначениеДополнительногоРеквизитаОбъекта(СсылкаНаОбъект, ДопРеквизитаИмяДляРазработчика)
	
	ИсточникИмя = СсылкаНаОбъект.Метаданные().Имя;	
	ИсточникТип = Неопределено;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНаОбъект)) Тогда
   		ИсточникТип = ""Справочник"";
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНаОбъект)) Тогда
   		ИсточникТип = ""Документ"";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	СтрШаблон(
	""ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Значение
	|ИЗ
	|	%1.%2.ДополнительныеРеквизиты
	|ГДЕ
	|		Свойство.Имя = &ДопРеквизитаИмяДляРазработчика
	|		И Ссылка = &СсылкаНаОбъект"",
	ИсточникТип,
	ИсточникИмя
	);
	
	Запрос.УстановитьПараметр(""ДопРеквизитаИмяДляРазработчика"",	ДопРеквизитаИмяДляРазработчика);
	Запрос.УстановитьПараметр(""СсылкаНаОбъект"",					СсылкаНаОбъект);
	
	ЗапросРезультат = Запрос.Выполнить();	
	Выборка = ЗапросРезультат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Значение;
	КонецЕсли;
	
	Возврат """";
	
КонецФункции"}
},
{0,
{"МакетВРезультатЗапроса",0,0,"","
// Макет в результат запроса +++

    //Макет с наименованием - ""ЛНАСписок""
	//В макете одна область с наименованием - ""МойСписок""
	//Область ""МойСписок"" - это таблица и она станет таблицей в запросе!

	МакетЛНА = ПолучитьМакет(""ЛНАСписок"");
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(МакетЛНА.Область(""МойСписок""));
	ПостроительЗапроса.Выполнить();

	ПереченьЛНА = ПостроительЗапроса.Результат.Выгрузить();
// Макет в результат запроса ---"}
}
},
{1,
{"ОписаниеВнешнихОбъектов",1,0,"",""},
{0,
{"ОписаниеВнешнейОбработкиОтчета",0,0,"ОписаниеВнешнейОбработкиОтчета_Кистанов","
#Область ОписаниеВнешнейОбработкиОтчета	

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить(""Представление"", 			Новый ОписаниеТипов(""Строка""));
	Команды.Колонки.Добавить(""Идентификатор"", 			Новый ОписаниеТипов(""Строка""));
	Команды.Колонки.Добавить(""Использование"", 			Новый ОписаниеТипов(""Строка""));
	Команды.Колонки.Добавить(""ПоказыватьОповещение"",	Новый ОписаниеТипов(""Булево""));
	Команды.Колонки.Добавить(""Модификатор"", 			Новый ОписаниеТипов(""Строка""));
	
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, 
	                                     ПоказыватьОповещение = Ложь, Модификатор = """")

	НоваяКоманда 						= ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление 			= Представление; 
	НоваяКоманда.Идентификатор 			= Идентификатор;
	НоваяКоманда.Использование 			= Использование;
	НоваяКоманда.ПоказыватьОповещение 	= ПоказыватьОповещение;
	НоваяКоманда.Модификатор 			= Модификатор;
	
КонецПроцедуры

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	
	// *********ДЛЯ ОБЪЕКТОВ ТИПА:
	<?>// ПараметрыРегистрации.Вставить(""Вид"", ""ПечатнаяФорма"");
	// ПараметрыРегистрации.Вставить(""Вид"", ""ЗаполнениеОбъекта"");
	// ПараметрыРегистрации.Вставить(""Вид"", ""ДополнительныйОтчет"");
	// ПараметрыРегистрации.Вставить(""Вид"", ""ДополнительнаяОбработка"");
	// ПараметрыРегистрации.Вставить(""Вид"", ""СозданиеСвязанныхОбъектов"");
	// ПараметрыРегистрации.Вставить(""Вид"", ""ПечатнаяФорма"");
	
	// *********КОГДА ПечатнаяФорма ИЛИ ДополнительныйОтчет ИЛИ ЗаполнениеОбъекта >
	// МассивНазначений = Новый Массив;
	// МассивНазначений.Добавить(""Документ.<?""ИмяДокумента"">"");
	// ПараметрыРегистрации.Вставить(""Назначение"", МассивНазначений);
	// *********КОГДА ПечатнаяФорма ИЛИ ДополнительныйОтчет ИЛИ ЗаполнениеОбъекта <
			
	ПараметрыРегистрации.Вставить(""Наименование"", 		НСтр(""ru = '<?""НаименованиеОбработки"">'""));
	ПараметрыРегистрации.Вставить(""Информация"", 		НСтр(""ru = '<?""НаименованиеОбработки"">'""));
	ПараметрыРегистрации.Вставить(""БезопасныйРежим"",	Ложь);
	ПараметрыРегистрации.Вставить(""Версия"", 			""1.0.0"");
	
	//	ПараметрыРегистрации.Вставить(""ВерсияБСП"", ""1.2.1.4"");
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
		
	ДобавитьКоманду(
	ТаблицаКоманд, 
	НСтр(""ru = '<?""СинонимОбработки"">'""), 
	
	
	// Доп. параметры (один из 3х блоков) процедуры ""ДобавитьКоманду"" +++
	
	// 1.
	// *********КОГДА ПечатнаяФорма >
	// ""<?""Имя"">"", ""ВызовСерверногоМетода"", Истина, ""ПечатьMXL""
	// *********КОГДА ПечатнаяФорма <
	
	
	// 2.
	// *********КОГДА ДополнительнаяОбработка ИЛИ ДополнительныйОтчет >
	// ""<?""Имя"">"", ""ОткрытиеФормы"", Ложь, """"
	// *********КОГДА ДополнительнаяОбработка ИЛИ ДополнительныйОтчет < 
	

	// 3.
	// *********КОГДА ЗаполнениеОбъекта >
	// ""<?""СинонимОбработки"">"", ""ВызовКлиентскогоМетода"", Истина
	//
	// *********Затем в обработке необходимо создать форму и код в ее модуле:
	// ********* &НаКлиенте Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначенияМассив) Экспорт
	// *********КОГДА ЗаполнениеОбъекта <
	
	// Доп. параметры (один из 3х блоков) процедуры ""ДобавитьКоманду"" ---
	
	
	);
	
	
	ПараметрыРегистрации.Вставить(""Команды"", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;

КонецФункции

#КонецОбласти

#Область ПечатьДанных

//Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыПечати = Неопределено) Экспорт
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ""ДефектовочныйАктВнешний"") Тогда
//		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, ""ДефектовочныйАктВнешний"", НСтр(""ru = 'Дефектовочный акт (внешний)'""),
//			ПечатьДАкт(МассивОбъектов, ОбъектыПечати));
//	КонецЕсли;
//КонецПроцедуры

Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	КоллекцияПечатныхФорм,
	""ДефектовочныйАктВнешний"",
	""Дефектовочный акт (внешний)"",
	ПечатьДАкт(МассивОбъектов, ОбъектыПечати));
	
КонецПроцедуры // Печать()

Функция ПечатьДАкт(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Макет = ЭтотОбъект.ПолучитьМакет(""ПФ_MXL_ДефектовочныйАкт"");
	//
	//ТабДок = Новый ТабличныйДокумент;
	//ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	////ТабДок.ИмяПараметровПечати = ""ПАРАМЕТРЫ_ПЕЧАТИ_ДефектовочныйАктВнешний"";
	//ТабДок.ПолеСверху = 0;
	//ТабДок.ПолеСлева = 0;
	//ТабДок.ПолеСнизу = 0;
	//ТабДок.ПолеСправа = 0;
	//ТабДок.РазмерКолонтитулаСверху = 0;
	//ТабДок.РазмерКолонтитулаСнизу = 0;
	//ТабДок.АвтоМасштаб = Истина;
	//
	//
	////Пока Выборка.Следующий() Цикл
	////	Если ТабДок.ВысотаТаблицы > 0 Тогда
	////		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	////	КонецЕсли;
	////	
	////	НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
	////	
	////	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть(""ШапкаТаблицы"");
	////	
	////	ТабДок.Вывести(ОбластьШапкаТаблицы);
	////	
	////КонецЦикла;
	
	ТабДок = Новый ТабличныйДокумент;
	Возврат ТабДок;
	
КонецФункции

#КонецОбласти"}
}
}
}
}